/*!
 * jQuery idleTimer plugin
 * version 0.9.100511
 * by Paul Irish.
 *   http://github.com/paulirish/yui-misc/tree/
 * MIT license

 * adapted from YUI idle timer by nzakas:
 *   http://github.com/nzakas/yui-misc/
*/ !function (e) { e.idleTimer = function (i, t, d) { d = e.extend({ startImmediately: !0, idle: !1, enabled: !0, timeout: 3e4, events: "mousemove keydown DOMMouseScroll mousewheel mousedown touchstart touchmove" }, d), t = t || document; var l, a, r = function (i) { "number" == typeof i && (i = void 0); var l = e.data(i || t, "idleTimerObj"); l.idle = !l.idle; var a = +new Date - l.olddate; if (l.olddate = +new Date, l.idle && a < d.timeout) { l.idle = !1, clearTimeout(e.idleTimer.tId), d.enabled && (e.idleTimer.tId = setTimeout(r, d.timeout)); return } var m = jQuery.Event(e.data(t, "idleTimer", l.idle ? "idle" : "active") + ".idleTimer"); e(t).trigger(m) }, m = function () { var i = e.data(this, "idleTimerObj"); clearTimeout(i.tId), i.enabled && (i.idle && r(this), i.tId = setTimeout(r, i.timeout)) }, o = e.data(t, "idleTimerObj") || {}; if (o.olddate = o.olddate || +new Date, "number" == typeof i) d.timeout = i; else if ("destroy" === i) return l = t, (a = e.data(l, "idleTimerObj") || {}).enabled = !1, clearTimeout(a.tId), e(l).off(".idleTimer"), this; else if ("getElapsedTime" === i) return +new Date - o.olddate; e(t).on(e.trim((d.events + " ").split(" ").join(".idleTimer ")), m), o.idle = d.idle, o.enabled = d.enabled, o.timeout = d.timeout, d.startImmediately && (o.tId = setTimeout(r, o.timeout)), e.data(t, "idleTimer", "active"), e.data(t, "idleTimerObj", o) }, e.fn.idleTimer = function (i, t) { return t || (t = {}), this[0] && e.idleTimer(i, this[0], t), this } }(jQuery);