function RenderGrossRevenueChart(e) { var t = $("#ddlclient option:selected").val(); getAjax(`/AgencyService/GetGrossRevenueData?Option=${e}&cType=0&ClientID=${t}`, null, function (e) { if ("Success" == e.Status) { e.Xdata.shift(), e.Ydata.shift(); var t = e.Xdata.reverse(), a = e.Ydata.reverse(); LineChart(t, a, "#container1") } else { var t = ["No Data"], a = [0]; LineChart(t, a, "#container1") } }) } function Tabclick(e, t) { sessionStorage.setItem("Type", t), 1 == t && ($("#tabselectBank").addClass("tabselect"), $("#tabNotinBanks").removeClass("tabselect")) } function RenderNetIncomeChart(e) { var t = $("#ddlclient option:selected").val(); getAjax(`/AgencyService/GetGrossRevenueData?Option=${e}&cType=1&ClientID=${t}`, null, function (e) { if ("Success" == e.Status) { e.Xdata.shift(), e.Ydata.shift(); var t = e.Xdata.reverse(), a = e.Ydata.reverse(); LineChart(t, a, "#container2") } else { var t = ["No Data"], a = [0]; LineChart(t, a, "#container2") } }) } $("divClientDetials").addClass("d-none"), $(document).ready(function () { new Clipboard(".copyEmail", { text: function (e) { let t = $(e).data("clipboard-text"); return toastr.success("Email address successfully copied to your clipboard " + t), t } }), AgencyDropdownPartialViewChange(), setTimeout(function () { $(".currency-usd").each(function (e, t) { var a = $(t).text(); if ("0" == a) { var o = new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(a); $(t).text(o) } }) }, 3e3), $("#ddlGrossRevenue").change(function () { var e = $(this); RenderGrossRevenueChart(e.val()) }), $("#dllNetIncome").change(function () { var e = $(this); RenderNetIncomeChart(e.val()) }) }); var totalSum1, totalSum2, colorArrays = [], defaultChartColor = "#edf2f9"; function NeedsChart(e) { let t = document.getElementById("echart-needs"); var a = echarts.init(t); let o = { color: colorArrays, tooltip: { trigger: "item", padding: [7, 10], backgroundColor: utils.grays.white, textStyle: { color: utils.grays.black }, transitionDuration: 0, borderColor: utils.grays["300"], borderWidth: 1, formatter: function e(t) { return "no data" == t.data.name ? "" : "<strong>" + t.data.name + ":</strong> " + t.percent + "%" } }, position: function e(t, a, o, r, n) { return getPosition(t, a, o, r, n) }, legend: { show: !1 }, series: [{ type: "pie", radius: ["100%", "87%"], avoidLabelOverlap: !1, hoverAnimation: !1, itemStyle: { borderWidth: 2, borderColor: utils.grays.white }, label: { normal: { show: !1, position: "center", textStyle: { fontSize: "20", fontWeight: "500", color: utils.grays["700"] } }, emphasis: { show: !1 } }, labelLine: { normal: { show: !1 } }, data: e }] }; o && a.setOption(o) } var color = { Urgent: { className: "bg-red", echartColorCode: "#ff0000" }, High: { className: "bg-orange", echartColorCode: "#F68F57" }, Medium: { className: "bg-light-blue", echartColorCode: "#27BCFE" }, Low: { className: "bg-green", echartColorCode: "#00BE82" } }; function KanbanCountWithIndividualPriority() {
    var e = $("#ddlclient option:selected").val(); getAjax(apiurl + `Needs/KanbanCountWithIndividualPriority?AgencyId=${e}`, null, function (e) {
        let t = e.resultData; for (key in $("#needsCategoryDiv").children().remove(), color) {
            var a = `<div class="d-flex align-items-center">
                                                                        <span class="dot ${color[key].className}"></span>
                                                                        <span class="font-weight-semi-bold">${key}</span>
                                                                    </div>`; $("#needsCategoryDiv").append(a)
        } var o = {}; if (void 0 != t && t.length > 0) for (var r = 0; r < t.length; r++) { let n = t[r].kanbanTaskLabelName, l = t[r].labelNameCount, s = 0; s = t[r].totalTasks, $("#lblTotalTasksCount").text(s); var i = { value: l, name: n }; o[n] = i } else $("#lblTotalTasksCount").text(0), o["no data"] = { value: 1, name: "no data" }; for (key in o) colorArrays.push(color[key] ? color[key].echartColorCode : defaultChartColor); NeedsChart(Object.values(o))
    })
} var colorsArray = []; function NotesChart(e) { let t = document.getElementById("echart-notes"); var a = echarts.init(t); let o = { color: colorsArray, tooltip: { trigger: "item", padding: [7, 10], backgroundColor: utils.grays.white, textStyle: { color: utils.grays.black }, transitionDuration: 0, borderColor: utils.grays["300"], borderWidth: 1, formatter: function e(t) { return "no data" == t.data.name ? "" : "<strong>" + t.data.name + ":</strong> " + t.percent + "%" } }, position: function e(t, a, o, r, n) { return getPosition(t, a, o, r, n) }, legend: { show: !1 }, series: [{ type: "pie", radius: ["100%", "87%"], avoidLabelOverlap: !1, hoverAnimation: !1, itemStyle: { borderWidth: 2, borderColor: utils.grays.white }, label: { normal: { show: !1, position: "center", textStyle: { fontSize: "20", fontWeight: "500", color: utils.grays["700"] } }, emphasis: { show: !1 } }, labelLine: { normal: { show: !1 } }, data: e }] }; o && a.setOption(o) } var colors = { Income: { className: "bg-red", chartColorCode: "#ff0000" }, Expenses: { className: "bg-orange", chartColorCode: "#F68F57" }, Assets: { className: "bg-green", chartColorCode: "#00BE82" }, "Bank Balance": { className: "bg-soft-primary", chartColorCode: "#bfbfbf" }, Liabilities: { className: "bg-blue", chartColorCode: "#235EE8" }, Equity: { className: "bg-light-blue", chartColorCode: "#27BCFE" } }, colorsNoteCat = { Relevant: { className: "turquoiseblue", chartColorCode: "#05768f" }, Reliable: { className: "bg-green", chartColorCode: "#00BE82" }, "Real Time": { className: "yellow", chartColorCode: "#FFDB74" } }; function NotesIndividualCountAndPercentageByAgencyId() {
    var e = $("#ddlclient option:selected").val(); getAjax(apiurl + `Notes/NotesIndividualCountAndPercentageByAgencyId?AgencyId=${e}`, null, function (e) {
        let t = e.resultData; for (key in $("#notesCategoryDiv").children().remove(), colorsNoteCat) {
            var a = `<div class="d-flex align-items-center">
                                                                            <span class="dot ${colorsNoteCat[key].className}"></span>
                                                                            <span class="font-weight-semi-bold">${key}</span>
                                                                        </div>`; $("#notesCategoryDiv").append(a)
        } var o = {}; if (void 0 != t && t.length > 0) for (var r = 0; r < t.length; r++) { let n = t[r].noteCategoryName, l = t[r].noteCategoryCount, s = t[r].totalNotes; var i = { value: l, name: n }; o[n] = i, $("#lblTotalNotesCount").text(s) } else { $("#lblTotalNotesCount").text(0); var i = { value: 1, name: "no data" }; o["no data"] = i } for (key in o) colorsArray.push(colorsNoteCat[key] ? colorsNoteCat[key].chartColorCode : defaultChartColor); NotesChart(Object.values(o))
    })
} function getTeamMembersList() { var e = $("#ddlclient option:selected").val(); $.ajax({ url: "/Needs/getTeamMembersList?ClientID=" + e, type: "GET", contentType: "application/json; charset=utf-8", dataType: "json", success: function (e) { if (null != e) { var t, a = 0; $.each(e.TeamMembers, function (e, o) { $("#teamMember" + (a = o.OrderNumber)).css({ display: "" }), null != o.Username && "" != o.Username && ($("#spTeamChat" + a).removeClass("disabled-action-icons"), t = "tel:" + o.PhoneNumber, $("#phoneNumber" + a).attr("href", t), $("#phoneNumber" + a).removeClass("disabled-action-icons")), null != o.Username && "" != o.Username && null != o.Email && void 0 != o.Email && ($("#email" + a).data("clipboard-text", String(o.Email)), $("#email" + a).removeClass("disabled-action-icons")), null != o.LinkedInProfile && "" != o.LinkedInProfile ? ($("#aLinkedInProfile" + a).attr("href", o.LinkedInProfile), $("#aLinkedInProfile" + a).prop("disabled", !1), $("#aLinkedInProfile" + a).removeClass("disabled-action-icons")) : ($("#aLinkedInProfile" + a)[0].className = $("#aLinkedInProfile" + a)[0].className + " disabled-action-icons", $("#aLinkedInProfile" + a).prop("disabled", !0)), null != o.Username && "" != o.Username && null != o.Jobtitle && "" != o.Jobtitle ? 1 == a ? ($("#spStaffName" + a).html(String(o.Username)), $("#spJobTitle" + a).html("CFO")) : 2 == a ? ($("#spStaffName" + a).html(String(o.Username)), $("#spJobTitle" + a).html("Accounting Manager")) : 3 == a ? ($("#spStaffName" + a).html(String(o.Username)), $("#spJobTitle" + a).html("Accountant")) : 4 == a && ($("#spStaffName" + a).html(String(o.Username)), $("#spJobTitle" + a).html("Bookkeeper")) : ($("#spStaffName" + a).html(String("")), $("#spJobTitle" + a).html(String(""))), null != o.Profileimage && "" != o.Profileimage ? $("#spProfileImage" + a).attr("src", o.Profileimage) : $("#spProfileImage" + a).attr("src", "../assets/img/team/default-logo.png"), null != o.Email && "" != o.Email ? $("#spTeamChat" + a).attr("href", `/Communication/Chat?WithTeamMember=${o.Email}`) : $("#spTeamChat" + a).attr("href", "") }) } } }) } function GetAccountOutStanding() { var e = $("#ddlclient option:selected").val(); $.ajax({ url: `/AgencyService/GetAccountOutStanding?ClientID=${e}`, type: "GET", contentType: "application/json; charset=utf-8", dataType: "json", success: function (e) { null != e && "" != e ? $("#spOutSanding").html(ConvertToUDS(e.Total)) : $("#spOutSanding").html(ConvertToUDS(0)) }, error: function (e) { $("#spOutSanding").html(ConvertToUDS(0)), console.log(e) } }) } function AgencyDropdownPartialViewChange() { ShowlottieLoader(); var e = $("#ddlclient option:selected").val(); $.ajax({ url: "/AgencyService/GetClientDetails?id=" + e, type: "GET", contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (null != t) { if (MenuOptionHideAndShow(e), GetReconcilationData(), GetReconcilationData1(), KanbanCountWithIndividualPriority(), NotesIndividualCountAndPercentageByAgencyId(), $("#roleexist").show(), $(".spClientName").html(String(t.Name)), $(".spEntityName").html(String(t.EntityName)), null != t.StartDate && "" != t.StartDate) { let a = UtcDateToLocalTime(Number(t.StartDate.match(/\d+/)[0])).toDateString(); $("#spCreatedDate").html(a) } $("#spStatus").html(String(t.Status ? "Active" : "Inactive")); let o = moment(new Date).diff(moment(t.StartDate), "months", !1) + 1; $("#spMonths").html(o), getTeamMembersList(), defaultReportsWidget(), $(".badge-soft-success").removeClass("d-none"), $(".badge-success").removeClass("d-none"), $(".rounded-circle").removeClass("d-none") } else $("#roleexist").hide(), $(".spClientName").html(""), $(".spEntityName").html(""), $("#spCreatedDate").html(""), $("#spMonths").html(""), $("#spStatus").html(""), $("#spClientAddress").html(""), $(".badge-soft-success").addClass("d-none"), $(".badge-success").removeClass("d-none"), $(".rounded-circle").removeClass("d-none") }, error: function () { $("#roleexist").hide(), $(".spClientName").html(""), $(".spEntityName").html(""), $("#spCreatedDate").html(""), $("#spMonths").html(""), $("#spStaffName1").html(""), $("#spStaffName2").html(""), $("#spStaffName3").html(""), $("#spStaffName4").html(""), $("#spJobTitle1").html(""), $("#spJobTitle2").html(""), $("#spJobTitle3").html(""), $("#spJobTitle4").html(""), $("#spProfileImage1").removeAttr("src"), $("#spProfileImage2").removeAttr("src"), $("#spProfileImage3").removeAttr("src"), $("#spProfileImage4").removeAttr("src"), $("#spTeamChat1").removeAttr("href"), $("#spTeamChat2").removeAttr("href"), $("#spTeamChat3").removeAttr("href"), $("#spTeamChat4").removeAttr("href"), $("#spStatus").html(""), $("#spClientAddress").html(""), $(".badge-soft-success").addClass("d-none"), $(".badge-success").addClass("d-none"), $(".rounded-circle").addClass("d-none") } }), window.onerror = function (e) { console.log(e), HidelottieLoader() } } function GetReconcilationData() { var e = $("#ddlclient option:selected").val(), t = 0; if (totalSum1 = 0, null == sessionStorage.getItem("NotInBanksData")) getAjax(`/Reconciliation/GetReconciliationDashboardDataAgencyId?AgencyId=${e}&type=Outstanding Payments`, null, function (e) { if ("Success" == e.Message) { let a = e.ResultData; null != a && a.length > 0 ? ($("#lblNotInBanksCount2").text(a[0].Count), $("#lblpostiveBanksCount").text(ConvertToUDS(a[0].amountPositive).replace("-", "")), $("#lblNegativeBanksCount").text(ConvertToUDS(a[0].amountNegative).replace("-", "")), t = a[0].percentage.toFixed(0), totalSum1 = a[0].Count, sessionStorage.setItem("NotInBanksData", JSON.stringify(a))) : ($("#lblNegativeBanksCount").text(ConvertToUDS(0).replace("-", "")), $("#lblPostiveInBooksCount").text(ConvertToUDS(0).replace("-", ""))), $("#divNotInBankPercentage").html(`<div class="progress-circle" id="lblNotInBankPercentage" data-options='{"color":"url(#gradient)","progress":${t},"strokeWidth":5,"trailWidth":5}'></div>`), utils.addProgressCircle("#lblNotInBankPercentage"), TotalSum(totalSum1, totalSum2) } }); else { let a = JSON.parse(sessionStorage.getItem("NotInBanksData")); null != a && a.length > 0 ? ($("#lblNotInBanksCount2").text(a[0].Count), $("#lblpostiveBanksCount").text(ConvertToUDS(a[0].amountPositive).replace("-", "")), $("#lblNegativeBanksCount").text(ConvertToUDS(a[0].amountNegative).replace("-", "")), t = a[0].percentage.toFixed(0), totalSum1 = a[0].Count) : ($("#lblNegativeBanksCount").text(ConvertToUDS(0).replace("-", "")), $("#lblPostiveInBooksCount").text(ConvertToUDS(0).replace("-", ""))), $("#divNotInBankPercentage").html(`<div class="progress-circle" id="lblNotInBankPercentage" data-options='{"color":"url(#gradient)","progress":${t},"strokeWidth":5,"trailWidth":5}'></div>`), utils.addProgressCircle("#lblNotInBankPercentage"), TotalSum(totalSum1, totalSum2) } } function GetReconcilationData1() { var e = $("#ddlclient option:selected").val(), t = 0; if (totalSum2 = 0, null == sessionStorage.getItem("NotInBooksData")) getAjax(`/Reconciliation/GetReconciliationDashboardDataAgencyId?AgencyId=${e}&type=Unreconciled`, null, function (e) { if ("Success" == e.Message) { let a = e.ResultData; null != a && a.length > 0 ? ($("#lblNotInBooksCount2").text(a[0].Count), $("#lblNegativeInBooksCount").text(ConvertToUDS(a[0].amountPositive).replace("-", "")), $("#lblPostiveInBooksCount").text(ConvertToUDS(a[0].amountNegative).replace("-", "")), totalSum2 = a[0].Count, t = a[0].percentage.toFixed(0), sessionStorage.setItem("NotInBooksData", JSON.stringify(a))) : ($("#lblNegativeBanksCount").text(ConvertToUDS(0).replace("-", "")), $("#lblNegativeInBooksCount").text(ConvertToUDS(0).replace("-", ""))), $("#divNotInBookPercentage").html(`<div class="progress-circle" id="divNotInBookPercentage1" data-options='{"color":"url(#gradient)","progress":${t},"strokeWidth":5,"trailWidth":5}'></div>`), utils.addProgressCircle("#divNotInBookPercentage1"), TotalSum(totalSum1, totalSum2) } }); else { var a = JSON.parse(sessionStorage.getItem("NotInBooksData")); null != a && a.length > 0 ? ($("#lblNotInBooksCount2").text(a[0].Count), $("#lblNegativeInBooksCount").text(ConvertToUDS(a[0].amountPositive).replace("-", "")), $("#lblPostiveInBooksCount").text(ConvertToUDS(a[0].amountNegative).replace("-", "")), totalSum2 = a[0].Count, t = a[0].percentage.toFixed(0)) : ($("#lblNegativeBanksCount").text(ConvertToUDS(0).replace("-", "")), $("#lblNegativeInBooksCount").text(ConvertToUDS(0).replace("-", ""))), $("#divNotInBookPercentage").html(`<div class="progress-circle" id="divNotInBookPercentage1" data-options='{"color":"url(#gradient)","progress":${t},"strokeWidth":5,"trailWidth":5}'></div>`), utils.addProgressCircle("#divNotInBookPercentage1"), TotalSum(totalSum1, totalSum2) } } function TotalSum(e, t) { let a = 0; isNaN(e + t) ? $("#lblNotInCount").addClass("d-none") : ($("#lblNotInCount").removeClass("d-none"), a = isNaN(e + t) ? 0 : Number(e + t), $("#lblNotInCount").text(a)) } const camelize = e => { let t = e.replace(/[-_\s.]+(.)?/g, (e, t) => t ? t.toUpperCase() : ""); return `${t.substr(0, 1).toLowerCase()}${t.substr(1)}` }, getData = (e, t) => { try { return JSON.parse(e.dataset[camelize(t)]) } catch (a) { return e.dataset[camelize(t)] } }, getGrays = e => ({ white: getColor("white", e), 100: getColor("100", e), 200: getColor("200", e), 300: getColor("300", e), 400: getColor("400", e), 500: getColor("500", e), 600: getColor("600", e), 700: getColor("700", e), 800: getColor("800", e), 900: getColor("900", e), 1e3: getColor("1000", e), 1100: getColor("1100", e), black: getColor("black", e) }), getColors = e => ({ primary: getColor("primary", e), secondary: getColor("secondary", e), success: getColor("success", e), info: getColor("info", e), warning: getColor("warning", e), danger: getColor("danger", e), light: getColor("light", e), dark: getColor("dark", e) }), getColor = (e, t = document.documentElement) => getComputedStyle(t).getPropertyValue(`--falcon-${e}`).trim(), rgbaColor = (e = "#fff", t = .5) => `rgba(${hexToRgb(e)}, ${t})`, hexToRgb = e => { let t; t = 0 === e.indexOf("#") ? e.substring(1) : e; let a = /^#?([a-f\d])([a-f\d])([a-f\d])$/i, o = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t.replace(a, (e, t, a, o) => t + t + a + a + o + o)); return o ? [parseInt(o[1], 16), parseInt(o[2], 16), parseInt(o[3], 16),] : null }; var totalSalesInit = function e() { var t = document.querySelector(".echart-line-total-sales"), a = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]; if (t) { var o = getData(t, "options"), r = window.echarts.init(t), n = [[60, 80, 60, 80, 65, 130, 120, 100, 30, 40, 30, 70], [100, 70, 80, 50, 120, 100, 130, 140, 90, 100, 40, 50], [80, 50, 60, 40, 60, 120, 100, 130, 60, 80, 50, 60], [70, 80, 100, 70, 90, 60, 80, 130, 40, 60, 50, 80], [90, 40, 80, 80, 100, 140, 100, 130, 90, 60, 70, 50], [80, 60, 80, 60, 40, 100, 120, 100, 30, 40, 30, 70], [20, 40, 20, 50, 70, 60, 110, 80, 90, 30, 50, 50], [60, 70, 30, 40, 80, 140, 80, 140, 120, 130, 100, 110], [90, 90, 40, 60, 40, 110, 90, 110, 60, 80, 60, 70], [50, 80, 50, 80, 50, 80, 120, 80, 50, 120, 110, 110], [60, 90, 60, 70, 40, 70, 100, 140, 30, 40, 30, 70], [20, 40, 20, 50, 30, 80, 120, 100, 30, 40, 30, 70]], l = { color: getGrays()["100"], tooltip: { trigger: "axis", padding: [7, 10], backgroundColor: getGrays()["100"], borderColor: getGrays()["300"], textStyle: { color: getColors().dark }, borderWidth: 1, formatter: function e(t) { var o, r, n, l, s; return n = (r = (o = t)[0]).name, l = r.value, s = new Date(n), "".concat(a[0], " ").concat(s.getDate(), ", ").concat(l) }, transitionDuration: 0, position: function e(t, a, o, r, n) { return getPosition(t, a, o, r, n) } }, xAxis: { type: "category", data: ["2019-01-05", "2019-01-06", "2019-01-07", "2019-01-08", "2019-01-09", "2019-01-10", "2019-01-11", "2019-01-12", "2019-01-13", "2019-01-14", "2019-01-15", "2019-01-16"], boundaryGap: !1, axisPointer: { lineStyle: { color: getGrays()["300"], type: "dashed" } }, splitLine: { show: !1 }, axisLine: { lineStyle: { color: rgbaColor("#000", .01), type: "dashed" } }, axisTick: { show: !1 }, axisLabel: { color: getGrays()["400"], formatter: function e(t) { var o = new Date(t); return "".concat(a[o.getMonth()], " ").concat(o.getDate()) }, margin: 15 } }, yAxis: { type: "value", axisPointer: { show: !1 }, splitLine: { lineStyle: { color: getGrays()["300"], type: "dashed" } }, boundaryGap: !1, axisLabel: { show: !0, color: getGrays()["400"], margin: 15 }, axisTick: { show: !1 }, axisLine: { show: !1 } }, series: [{ type: "line", data: n[0], lineStyle: { color: getColors().primary }, itemStyle: { borderColor: getColors().primary, borderWidth: 2 }, symbol: "circle", symbolSize: 10, smooth: !1, hoverAnimation: !0, areaStyle: { color: { type: "linear", x: 0, y: 0, x2: 0, y2: 1, colorStops: [{ offset: 0, color: rgbaColor(getColors().primary, .2) }, { offset: 1, color: rgbaColor(getColors().primary, 0) }] } } }], grid: { right: "28px", left: "40px", bottom: "15%", top: "5%" } }; l && r.setOption(l), t.echartSetOption(r, o, l); var s = document.querySelector(".select-month"); s && s.addEventListener("change", function (e) { var t = e.currentTarget.value, o = n[t]; r.setOption({ tooltip: { formatter: function e(o) { var r = o[0], n = r.name, l = r.value, s = new Date(n); return "".concat(a[t], " ").concat(s.getDate(), ", ").concat(l) } }, xAxis: { axisLabel: { formatter: function e(o) { var r = new Date(o); return "".concat(a[t], " ").concat(r.getDate()) }, margin: 15 } }, series: [{ data: o }] }) }) } }, totalSalesInitTwo = function e() { var t = document.querySelector(".echart-line-total-sales-2"), a = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]; if (t) { getData(t, "options"); var o = window.echarts.init(t), r = [[60, 80, 60, 80, 65, 130, 120, 100, 30, 40, 30, 70], [100, 70, 80, 50, 120, 100, 130, 140, 90, 100, 40, 50], [80, 50, 60, 40, 60, 120, 100, 130, 60, 80, 50, 60], [70, 80, 100, 70, 90, 60, 80, 130, 40, 60, 50, 80], [90, 40, 80, 80, 100, 140, 100, 130, 90, 60, 70, 50], [80, 60, 80, 60, 40, 100, 120, 100, 30, 40, 30, 70], [20, 40, 20, 50, 70, 60, 110, 80, 90, 30, 50, 50], [60, 70, 30, 40, 80, 140, 80, 140, 120, 130, 100, 110], [90, 90, 40, 60, 40, 110, 90, 110, 60, 80, 60, 70], [50, 80, 50, 80, 50, 80, 120, 80, 50, 120, 110, 110], [60, 90, 60, 70, 40, 70, 100, 140, 30, 40, 30, 70], [20, 40, 20, 50, 30, 80, 120, 100, 30, 40, 30, 70]], n = { color: getGrays()["100"], tooltip: { trigger: "axis", padding: [7, 10], backgroundColor: getGrays()["100"], borderColor: getGrays()["300"], textStyle: { color: getColors().dark }, borderWidth: 1, formatter: function e(t) { var o, r, n, l, s; return n = (r = (o = t)[0]).name, l = r.value, s = new Date(n), "".concat(a[0], " ").concat(s.getDate(), ", ").concat(l) }, transitionDuration: 0, position: function e(t, a, o, r, n) { return getPosition(t, a, o, r, n) } }, xAxis: { type: "category", data: ["2019-01-05", "2019-01-06", "2019-01-07", "2019-01-08", "2019-01-09", "2019-01-10", "2019-01-11", "2019-01-12", "2019-01-13", "2019-01-14", "2019-01-15", "2019-01-16"], boundaryGap: !1, axisPointer: { lineStyle: { color: getGrays()["300"], type: "dashed" } }, splitLine: { show: !1 }, axisLine: { lineStyle: { color: getGrays()["300"], type: "dashed" } }, axisTick: { show: !1 }, axisLabel: { formatter: function e(t) { var o = new Date(t); return "".concat(a[o.getMonth()], " ").concat(o.getDate()) }, margin: 15 } }, yAxis: { type: "value", axisPointer: { show: !1 }, splitLine: { lineStyle: { color: getGrays()["300"], type: "dashed" } }, boundaryGap: !1, axisLabel: { show: !0, color: getGrays()["400"], margin: 15 }, axisTick: { show: !1 }, axisLine: { show: !1 } }, series: [{ type: "line", data: r[0], lineStyle: { color: getColors().primary }, itemStyle: { borderColor: getColors().primary, borderWidth: 2 }, symbol: "circle", symbolSize: 10, smooth: !1, hoverAnimation: !0, areaStyle: { color: { type: "linear", x: 0, y: 0, x2: 0, y2: 1, colorStops: [{ offset: 0, color: rgbaColor(getColors().primary, .2) }, { offset: 1, color: rgbaColor(getColors().primary, 0) }] } } }], grid: { right: "28px", left: "40px", bottom: "15%", top: "5%" } }; n && o.setOption(n); var l = document.querySelector(".select-month"); l && l.addEventListener("change", function (e) { var t = e.currentTarget.value, n = r[t]; o.setOption({ tooltip: { formatter: function e(o) { var r = o[0], n = r.name, l = r.value, s = new Date(n); return "".concat(a[t], " ").concat(s.getDate(), ", ").concat(l) } }, xAxis: { axisLabel: { formatter: function e(o) { var r = new Date(o); return "".concat(a[t], " ").concat(r.getDate()) }, margin: 15 } }, series: [{ data: n }] }) }) } }, defaultReportsWidget = function () { var e = $("#ddlclient option:selected").val(); getAjax(`/Reports/GetDashboardReports?agencyId=${e}`, null, function (e) { var t = $("#divMonthlyReports"), a = $("#divYearlyReports"); if (t.empty(), a.empty(), e.DataMonthly.length > 0) for (var o = 0; o < e.DataMonthly.length; o++) { let r = prepareReportMedia(e.DataMonthly[o]); t.append(r) } if (e.DataYearly.length > 0) for (var o = 0; o < e.DataYearly.length; o++) { let n = prepareReportMedia(e.DataYearly[o]); a.append(n) } HidelottieLoader(), "none" == $("#Loader").css("display") && (RenderGrossRevenueChart($("#ddlGrossRevenue").val()), RenderNetIncomeChart($("#dllNetIncome").val())) }) }; function prepareReportMedia(e) {
    let t = SpecialURLEncoding(e.DownloadFileLink), a = getSampleBGImageByFileExtension(e.FileExtention); return isEmptyOrBlank(a) && (a = e.FilePath), e.FilePath = e.FilePath.replace("~/", "../../"), `<div class="media align-items-center mb-3">
                                    <div class="avatar avatar-2xl">
                                        <a class="data-fancybox" href="${t}" data-fancybox="group" data-type="iframe"><img class="rounded" src="${a = a.replace("~/", "../../")}" alt="" style="height:46px;width:36px"></a>
                                    </div>
                                    <div class="media-body ml-3">
                                        <h6 class="mb-0 font-weight-semi-bold"><a class="text-900" href="${t}"data-fancybox="group">${e.PeriodType} ${e.Year}</a></h6>
                                        <p class="text-500 fs--2 mb-0">Created <span class="ml-2 d-inline-block">${moment(e.CreatedDate).format("MMMM DD, YYYY")}</span></p>
                                    </div>
                                </div>`} var createTwilioUser = function () { postAjax("/Twilio/CreateTwilioUser", null, function () { }) };