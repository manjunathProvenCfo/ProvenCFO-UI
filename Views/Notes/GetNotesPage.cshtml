@*@model Proven.Model.NotesSummarymainModel*@
@using Proven.Model
@{
    ViewBag.Title = "GetNotesPage";
}
<style>
    div#summaryData {
        padding-top: 1px;
    }

    .turquoiseblue {
        background-color: #05768f !important;
    }

    .yellow {
        background-color: #FFDB74 !important;
    }
</style>
<div class="container-fluid p-0" data-layout="container">
    <div class="mb-3 v-pills-div notes-container">
        @{var summary = (ClientModel)TempData["NotesSummary"];}
        @{var NoteSummaryData = (IEnumerable<NotesSummaryVM>)TempData["NotesSummarydata"];}

        <div class="card notes-items-container">
            <div class="bg-holder d-none d-lg-block bg-card" style="background-image:url(../assets/img/illustrations/corner-4.png);">
            </div>
            <div class="card-header d-flex align-items-center justify-content-between">
                <h5 class="mb-0">Status</h5>
                <div class="dropdown">
                    <div class="d-flex">
                        @if (ViewBag.IsEditMode == true)
                        {
                            <button class="btn btn-falcon-default btn-sm mx-1" id="email" type="button" title="Email" data-toggle="modal" data-target="#myModal" style="height:35px;">
                                <span class="fa fa-envelope" data-fa-transform="shrink-3 down-2 m-2 p"></span><span class="d-none d-sm-inline-block "></span>
                            </button>

                            @Html.DropDownList(Convert.ToString(summary.Summaryid_ref), new SelectList(NoteSummaryData, "Id", "SummaryType"), new { @class = "form-control dropDownSelect2", @style = "width: 290.5px; ", @id = "ddlSummary" })



                            @*<h5 class="mb-0 text-right" id="notes-updatesummary-new-btn"><span class="fas fa-edit"></span></h5>*@
                          
                        }
                         
                    </div>

                </div>

            </div>
            <div class="card-body notes-item shadow-sm col-md-10" , id="summaryData">

                @{
                    string val = ViewBag.selectSummaryStatusText;

                    String[] frmt = val.Split('.');

                }
                @frmt[0]<span>.</span><br><br />

                @for (var i = 1; i < frmt.Length - 1; i++)
                {
                    @frmt[i]<span>.</span>
                }
            </div>




            @*<p class="mt-2 mb-0">@Html.Raw(summary?.Summary)</p>
                <input type="hidden" id="hdnSummary" value="@(summary?.Summary)" />*@


            @*<div class="Words">*@
            @*@if (summary?.SummaryCreatedByFullName == "")
                    {
                        <span>&nbsp;</span>
                    }
                    else
                    {
                <span>
                    Created by:

                    <span id="lblSummaryCreatedBy">@(summary?.SummaryCreatedByFullName)</span>, <span id="lblSummaryCreatedDate">@(summary?.SummaryCreatedDate)</span>
                </span>
                    }*@

            @*@if (summary?.SummaryModifiedByFullName == "")
                {
                    <span>&nbsp;</span>
                }
                else
                {
                    <span>
                        Last Edited by:
                        <span id="lblSummaryModifiedBy">@(summary?.SummaryModifiedByFullName)</span>, <span id="lblSummaryModifiedDate">@(summary?.SummaryModifiedDate)</span>
                    </span>
                }*@

            @*</div>*@



        </div>
    </div>

    <div class="row scrollspy-listing">

        <div class="col-3 order-2">

            <div class="sticky-top sticky-kit right-nav-pills bg-white">

                <div class="nav flex-column nav-pills">
                    @foreach (var Categories in (IEnumerable<NotesCategoriesModel>)TempData["CategoriesAndNotes"])
                    {
                        @*<a class="nav-link active" href="#v-pills-@Categories.NoteCategory" data-category-id="@Categories.Id" data-fancyscroll data-offset="30">@Categories.NoteCategory</a>*@

                        <a class="nav-link active" href="#v-pills-@Categories.NoteCategory.Replace(@" ","")" data-category-id="@Categories.Id" data-fancyscroll data-offset="30">@Categories.NoteCategory</a>

                    }

                </div>
            </div>
        </div>

        <div class="col-9 order-1">
            @{int containerCounter = 0;}

            @{ int counter = 0; }
            @foreach (var Categories in (IEnumerable<NotesCategoriesModel>)TempData["CategoriesAndNotes"])
            {
                containerCounter++;

                <div class="mb-3 v-pills-div notes-container" id="v-pills-@Categories.NoteCategory.Replace(@" ","")" data-category-id="@Categories.Id">
                    <div class="card notes-items-container" id="@("notes-items-container"+containerCounter)">
                        <div class="card-header d-flex align-items-center justify-content-between">
                            <h3>@Categories.NoteCategory</h3>
                            @*<div class="btn btn-light p-0"><i class="fas fa-plus"></i></div>*@
                            @*Here I am writing new line for add button for testing*@
                            @if (ViewBag.IsEditMode == true)
                            {
                                <div class="dropdown">
                                    <div class="btn btn-sm btn-falcon-default dropdown-toggle dropdown-caret-none" id="notes-create-new-btn">
                                        <span class="fas fa-plus"></span>
                                    </div>
                                </div>
                            }

                        </div>

                        @if (Categories.NotesCategoriesList != null)
                        {
                            foreach (var Category in Categories.NotesCategoriesList)
                            {
                                counter++;
                                if ((Category.IsPublished == "Published" && ViewBag.IsEditMode == false) || (ViewBag.IsEditMode == true))
                                {
                                    <div class="card-body notes-item shadow-sm" data-id="@Category.Id" data-position="@Category.Position">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <h6 style="color: #00BE82; "> @Category.Title</h6>
                                            @if (ViewBag.IsEditMode == true)
                                            {
                                                <div class="d-flex align-items-center">
                                                    <span class="mr-2" style="font-size: 14px;" id="lblIsPublished">@Category.IsPublished</span>
                                                    <div class="custom-control custom-switch custom-control-inline  mr-0">
                                                        @if (@Category.IsPublished.ToLower() == "published")
                                                        {
                                                            <input class="custom-control-input" type="checkbox" id="@($"chkIsPublished{counter}")" data-id="@Category.Id" checked>
                                                        }
                                                        else
                                                        {
                                                            <input class="custom-control-input" type="checkbox" id="@($"chkIsPublished{counter}")" data-id="@Category.Id">
                                                        }
                                                        <label class="custom-control-label" for="@($"chkIsPublished{counter}")"></label>
                                                    </div>
                                                    <div class="ml-2" style=" font-size : 24px">
                                                        <div class="nav-item dropdown dropdown-on-hover dots-dropdown" style="list-style: none;">
                                                            <a class="dropdown" id="dividerExample" href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="font-size:24px;">
                                                                <i class="fas fa-ellipsis-v" data-fa-transform="shrink-6"></i>
                                                            </a>

                                                            <div class="dropdown-menu" aria-labelledby="dividerUSE">
                                                                <a class="dropdown-item" href="javascript:void(0)" descriptionId="@Category.Id" onclick="openEdit(event);">Edit</a>
                                                                <a class="dropdown-item" href="#" id="moveUp">Move Up</a>
                                                                <a class="dropdown-item" href="#" id="moveDown">Move Down</a>
                                                                <div class="dropdown-divider"></div>
                                                                <a class="dropdown-item" href="#" onclick="DeleteNotesDescription('@Category.Id')" style="color:#E63756;">Delete</a>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="ml-2" style="font-size:24px;">
                                                        <i class="fas fa-check" data-fa-transform="shrink-6" onclick="ResolveNote('@Category.Id')"></i>
                                                    </div>

                                                </div>
                                            }
                                        </div>
                                        <p> @Html.Raw(Category.Description)</p>                                       
                                        <h6 class="badge mr-1 py-2 @Category.LableClass"> @Category.Labels </h6>
                                        <div class="Words">
                                            Created by: @Category.CreatedByUser, <span class="last-date">@Category.CreatedDate</span>
                                            @if ((Category.ModifiedByUser == ""))
                                            {
                                                <span>&nbsp;</span>
                                            }
                                            else
                                            {
                                                <span>| Last Edited by: @Category.ModifiedByUser, <span class="last-date">@Category.ModifiedDate</span> </span>

                                            }

                                            @*<hr>*@
                                        </div>

                                        @*<h6 style="color: #00BE82; "> @Category.Labels</h6>*@

                                    </div>

                                }
                            }
                        }

                    </div>
                </div>
            }

            @{
                if (Session["UserId"] != null)
                {
                    Html.RenderAction("CreateNewNotes", "Notes");
                    Html.RenderAction("OpenDescription", "Notes");
                    Html.RenderAction("UpdateNoteSummary", "Notes");
                    //Html.RenderAction("UpdateClientRefId", "Notes");
                }
            }

        </div>

    </div>
    @Html.Partial("_NotesEmail", true)
</div>

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/assets/lib/tinymce/tinymce.min.js"></script>
    <script src="~/assets/lib/shopify-draggable/draggable.bundle.js"></script>

    @*For AgencySelectionDropdown*@
    <script type="text/javascript">


        var $formValidator;
        $(document).ready(function () {
            var ClientID = $("#ddlclient option:selected").val();
            //getAgencyMembersList(ClientID);
          /*  GetTotalNotesCount();*/
            $formValidator = $("#formCreateNotes").validate(
                {
                    ignore: ""
                });
            $formValidator.settings.ignore = "";
            $("#ddlSummary").val(@(summary?.Summaryid_ref));

            $("#ddlSummary").change(function () {

                let id = $("#ddlSummary").val();
                getAjax(`/Notes/UpdateClientRefId?id=${id}&clientId=${getClientId()} `, null, function (res) {

                    if (res.Message == 'Success') {

                        let formate = res.Description+"";


                          $("#summaryData").html(formate.replace(".",".<br><br>"));
                        /*$("#summaryData").html(res.Description);*/

                    }


                })

            })

            HidelottieLoader();
        });
        //$(document).ready(function () {
        //    $('#NoteId').click(function () {
        //        
        //        var ClientID = $("#ddlclient option:selected").val();
        //        var NoteID = $("#NoteId option:selected").val();
        //        if (ClientID != null && ClientID != undefined && ClientID != '') {
        //            $.ajax({
        //                url: '/NotesController/GetNotesPage?id=' + ClientID + NoteID,
        //                type: "GET",
        //                contentType: "application/json; charset=utf-8",
        //                dataType: "json",
        //                success: function (data) {
        //                    if (data != null) {
        //                        $('#Notes-create-new-btn').show();//TODO
        //                        SetUserPreferencesForAgency();
        //                        window.location.reload();
        //                    }
        //                    else {
        //                    }
        //                },
        //                error: function () {
        //                }
        //            });
        //        }
        //        else {
        //            window.location.reload();
        //        }
        //    })
        //});

        function AgencyDropdownPartialViewChange() {
            var ClientID = $("#ddlclient option:selected").val();

            ShowlottieLoader();
            if (ClientID != null && ClientID != undefined && ClientID != '') {
                $.ajax({
                    url: '/AgencyService/GetClientDetails?id=' + ClientID ,
                    type: "GET",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        if (data != null) {
                            $('#Notes-create-new-btn').show();//TODO
                            SetUserPreferencesForAgency();
                            sessionStorage.setItem("LastMailSent", data.MailSendDateNotes)
                            /*LastMailSent = data.MailSendDate;*/
                            window.location.reload();
                        }
                        else {
                        }
                    },
                    error: function () {
                    }
                });
            }
            else {
                window.location.reload();
            }
        }


        //function GetTotalNotesCount() {
        //    var ClientID = $("#ddlclient option:selected").val();
        //    getAjax(`/Notes/TotalNotesCountByAgencyId?AgencyId=${ClientID}`, null, function (response) {


        //        if (response.Message == "Success") {

        //            let data = response.ResultData;
        //            let TotalNotes = 0;

        //            for (var i = 0; i < data.length; i++) {
        //                TotalNotes = TotalNotes + Number(data[i].TotalNotes);
        //            }
        //            $("#lblTotalNotes").text(TotalNotes);
        //        }
        //    });
        //}

    </script>

    <script type="text/javascript">
        $(document).ready(function () {

            $(".v-pills-div").find(".card-body:first #moveUp").remove();
            $(".v-pills-div").find(".card-body:last #moveDown").remove();

            $('#notes-modal-new').on('hidden.bs.modal', function () {
                location.reload();

            })

            $("#email-subject").on("focus", function (e) {
                e.preventDefault();
                e.target.removeAttribute("readonly");

            });

            $("#email-subject").on("blur", function (e) {
                e.preventDefault();
                e.target.setAttribute("readonly", "");
            });
        });

        var gCurrentViewTaskId = '';
        function addTagOnView(TagNames) {

            $('#divTag ul').empty();
            $('#divTagView ul').empty();
            if (TagNames != null) {

                var tagName = TagNames.split(',');
                if (tagName.length > 0) {
                    tagName = tagName[0];
                    switch (tagName) {
                        case 'Relevant':
                            addTag('bg-light-blue text-white', 'Relevant', true);
                            break;
                        case 'Reliable':
                            addTag('turquoiseblue text-white', 'Reliable', true);
                            break;
                        case 'Real Time':
                            addTag('yellow text-white', 'Real Time', true);
                            break;

                        default:
                    }
                }
            }
        }
        function addTag(className, TagName, Isview = false,label_id) {
           
            var NotesId = gCurrentViewTaskId;
            var tags = $('#divTag span');
            $('#divTagView ul').empty();
            $('#divTag ul').empty();
            var IsNotDuplicate = false
            //$.each(tags, function (key, value) {
            //    if (value != undefined && value.innerText == TagName) {
            //        IsNotDuplicate = true;
            //    }
            //});
            //if (IsNotDuplicate == false) {
            //$('#divTag').prepend('<span class="badge mr-1 py-2 ' + className + '" data-toggle="dropdown" aria-expanded="true">' + TagName + '</span> <div class="dropdown-menu dropdown-md px-0 py-3 show" style="position: absolute; transform: translate3d(0px, 28px, 0px); top: 0px; left: 0px; will-change: transform;" x-placement="bottom-start"><span class="input-group-btn"><a class="dropdown-item" href="#!"></a><div class="dropdown-item text-danger" onclick="EnterComments();">Remove Member</div></span></div>');

            // }
            if (NotesId != null && NotesId !== "" && Isview == false) {
                $('#divTagView').prepend('<ul class="nav avatar-group mb-0"><li label-id=' + label_id + ' class="nav-item dropdown"><a aria-expanded="false" data-bs-toggle="dropdown" role="button" href="#" class="nav-link p-0 dropdown-toggle dropdown-caret-none ms-n1"><span class="badge mr-1 py-2 ' + className + '" data-toggle="dropdown" aria-expanded="true" onclick="taggaleRemoveOption()">' + TagName + '</span></a><div class="dropdown-menu dropdown-md px-0 py-3" style="" id="divShowRemove"><a class="dropdown-item text-danger" href="#!" onclick="RemoveTags();">Remove Tag</a></div></li></ul>');
                /* UpdateLableForKanbanTask(NotesId, TagName);*/
                $('#' + NotesId + ' .card-body .badge').empty();
                $('#' + NotesId + ' .card-body').prepend('<div class="mb-2"><span class="badge py-2 me-1 mb-1 ' + className + '">' + TagName + '</span></div>')
            } else if (NotesId != null && NotesId !== "" && Isview == true) {

                $('#divTagView').prepend('<ul class="nav avatar-group mb-0"><li label-id=' + label_id + ' class="nav-item dropdown"><a aria-expanded="false" data-bs-toggle="dropdown" role="button" href="#" class="nav-link p-0 dropdown-toggle dropdown-caret-none ms-n1"><span class="badge mr-1 py-2 ' + className + '" data-toggle="dropdown" aria-expanded="true" onclick="taggaleRemoveOption()">' + TagName + '</span></a><div class="dropdown-menu dropdown-md px-0 py-3" style="" id="divShowRemove"><a class="dropdown-item text-danger" href="#!" onclick="RemoveTags();">Remove Tag</a></div></li></ul>');
            }
            else {

                $('#divTag').prepend('<ul class="nav avatar-group mb-0"><li label-id=' + label_id  + ' class="nav-item dropdown"><a aria-expanded="false" data-bs-toggle="dropdown" role="button" href="#" class="nav-link p-0 dropdown-toggle dropdown-caret-none ms-n1"><span class="badge mr-1 py-2 ' + className + '" data-toggle="dropdown" aria-expanded="true" onclick="taggaleRemoveOption()">' + TagName + '</span></a><div class="dropdown-menu dropdown-md px-0 py-3" style="" id="divShowRemove"><a class="dropdown-item text-danger" href="#!" onclick="RemoveTags();">Remove Tag</a></div></li></ul>');
            }


        }
        function RemoveTags() {
            $('#divTag ul').empty();
            $('#divTagView ul').empty();
        }

        $(function () {
            $("[id='notes-create-new-btn']").click(function (e) {

                let btnAdd = $(this);
                let categoryId = btnAdd.parents('.v-pills-div').data().categoryId;
                $("#NoteCatId").val(categoryId);
                $("#CategoriesId_ref").val(categoryId);
                tinymce.get("Description").getContent()
                tinymce.get("Description").setContent("");
                tinyMCE.activeEditor.setContent("");
                $("#notes-modal-new").modal("show");

                $("#btnCreateNewNotesDescription").text("Create");

            });
            $("#btnCreateNewNotesDescription").click(function () {


                $("#Description").val(tinymce.get("Description").getContent());
                if ($("#Title").valid() === false || $("#Description").valid() == false)
                    return;
                var id = $('#Id').val();
                var title = $('#Title').val();
                var noteCatId = $('#NoteCatId').val();
                var CategoriesId_ref = $('#CategoriesId_ref').val();
                var ClientID = $("#ddlclient option:selected").val();
                var agencyId = $('#ClientID').val();

                var isPublished = "Unpublished";

                var Labels = $('#divTag span').map(function (i, opt) {
                    return $(opt) != null && $(opt).length > 0 ? $(opt)[0].innerText : '';
                }).toArray()[0];

                var LabelId = $('#divTag li') != undefined ? $('#divTag li').attr('label-id'):'';

                if ($("#chkPublished").prop("checked") === true) {
                    isPublished = "Published";
                }
                var position = $('#Position').val();

                var description = tinyMCE.get("Description").getContent();
                var status = $('#NotesStatus').val();

                $("#btnCreateNewNotesDescription").prop('create', 'Save');

                var pdata = { Id: id, Title: title, Description: description, NoteCatId: noteCatId, AgencyId: ClientID, IsPublished: isPublished, Position: position, Status: status, Labels: Labels, CategoriesId_ref: CategoriesId_ref, LabelId_ref: LabelId};
                let json = JSON.stringify({ Notes: pdata });

                postAjax('/Notes/CreateNewNotes', JSON.stringify({ Notes: pdata }), function (response) {
                    if (response.Message == 'Success') {
                        window.location.reload();
                        $('.close-circle').click();
                        $('.modal-backdrop').remove();
                    }
                    else {
                        if (response.Message == 'Exist') {
                            ShowAlertBoxWarning('Required!', response.Message);
                        }
                        else {
                            ShowAlertBoxWarning('Exist!', response.Message);

                        }
                    }

                })
            });

            $("[id^=chkIsPublished]").change(function () {

                let el = $(this);
                let isChecked = el[0].checked;
                if (isChecked == true)
                    el.parent('div').siblings("span#lblIsPublished").text("Published");
                else
                    el.parent('div').siblings("span#lblIsPublished").text("Unpublished");
                //TODO//Update status in database
                /*let pdata = {Id: el.data().id, IsPublished: isChecked };*/
                postAjax('/Notes/PublishingNotes?Id=' + el.data().id, function (response) {

                    if (response.Message == 'Success') {
                    }

                });

            });

            $("[Id=moveUp]").click(function () {
                let el = $(this);

                let id = el.parents(".card-body").data().id;
                let swapId = el.parents(".card-body").prev().data().id;
                let pdata = { Id: id, SwapId: swapId };
                //postAjax('', JSON.stringify({pdata}), function (response) {

                //});
            })

            $("[Id=moveDown]").click(function () {
                let el = $(this);

                let id = el.parents(".card-body").data().id;
                let swapId = el.parents(".card-body").next().data().id;
                let pdata = { Id: id, SwapId: swapId };
                //postAjax('', JSON.stringify({pdata}), function (response) {

                //});
            })

        });

        function openEdit(e) {

            e.stopPropagation();
            var catDesId = e.currentTarget.attributes["descriptionId"].value;
            $("#NoteCatId").val(NoteCatId);
            $("#notes-modal-new").modal("show");
            $("#btnCreateNewNotesDescription").text("Update");
            $.ajax({
                url: '/Notes/OpenExistingDescription?NotesDescriptionId=' + catDesId,
                //cache: false,
                success: function (response) {

                    if (response.Message == 'Success') {
                        if (response.Description != null) {


                            let published = response.Description.IsPublished;
                            let title = response.Description.Title;
                            let tagName = response.Description.Labels;
                            $('#Id').val(response.Description.Id);
                            $('#Title').val(title);
                            if (response.Description.LableClass != null && response.Description.LabelId_ref != null) {
                                addTag(response.Description.LableClass, response.Description.Labels, true, response.Description.LabelId_ref);
                            }                                                    
                            if (published.toLowerCase() == "published") {
                                $("#chkPublished").prop('checked', true);
                            }
                            else
                                $("#chkPublished").prop('checked', false);

                            $('#Description').html(response.Description.Description);
                            if (response.Description.Description != null) {
                                $('#Description').html(response.Description.Description);
                                tinymce.get("Description").setContent(response.Description.Description);
                            }

                            $("#NoteCatId").val(response.Description.NoteCatId);
                            $("#AgencyId").val(response.Description.AgencyId);
                            $("#Position").val(response.Description.Position);
                            $("#CategoriesId_ref").val(response.Description.CategoriesId_ref);
                        }
                    }
                    else {
                        if (response.Message == 'Exist') {
                            ShowAlertBox('Required!', response.Message, 'warning');
                        }
                        else {
                            ShowAlertBox('Exist!', response.Message, 'warning');
                        }
                    }
                }

            });
        }

        $(function () {
            $("[id='notes-updatesummary-new-btn']").click(function (e) {

                let content = $("#hdnSummary").val();
                tinymce.get("txtSummary").setContent(content);
                tinyMCE.activeEditor.setContent(content);
                $("#notesummary-modal-new").modal("show");
                $("#summaryData").html(res.Description);

            });
            $("#btnUpdateNoteSummary").click(function () {
                var ClientID = $("#ddlclient option:selected").val();

                var summary = tinyMCE.get("txtSummary").getContent();

                var pdata = { Id: parseInt(ClientID), Summary: summary };
                postAjax('/Notes/UpdateNoteSummary', JSON.stringify(pdata), function (response) {

                    if (response.Message == 'Success') {
                        let data = response.Data;
                        window.location.reload();
                        $("#lblSummaryCreatedBy").text(data.Summaryid_ref);
                        $("#lblSummaryCreatedBy").text(data.SummaryCreatedByFullName);
                        $("#lblSummaryCreatedDate").text(moment(data.SummaryCreatedDate));
                        if (!isEmptyOrBlank(data.SummaryModifiedByFullName)) {
                            $("#lblSummaryModifiedBy").text(data.SummaryModifiedByFullName);
                            $("#lblSummaryModifiedDate").text(moment(data.SummaryModifiedDate));
                        }
                        //window.location.reload();
                        $('.close-circle').click();
                        $('.modal-backdrop').remove();
                    }
                    else {
                        if (response.Message == 'Exist') {
                            ShowAlertBox('Required!', response.Message, 'warning');
                        }
                        else {
                            ShowAlertBox('Exist!', response.Message, 'warning');

                        }
                    }

                })
            });
        });

        function DeleteNotesDescription(Id) {

            swal({
                title: "Are you sure?",
                text: "Do you really want to delete this note?",
                type: "warning",
                showCancelButton: true,
                closeOnConfirm: false,
                confirmButtonText: "Yes, delete it!",
                confirmButtonColor: "#ec6c62"

            },

                function () {

                    $.ajax({
                        type: "POST",
                        url: '/Notes/DeleteNotesDescription/' + Id,
                    })
                        .done(function (data) {

                            /*if ((data == 'Unpublished') || (data == 'Published')) {*/
                            sweetAlert
                                ({
                                    title: "Deleted!",
                                    text: "Note successfully deleted!",
                                    type: "success"
                                },
                                    function () {
                                        window.location.reload();
                                    });

                        })
                        .error(function (data) {
                            swal("Oops", "We couldn't connect to the server!", "error");
                        });
                });
        }

        function ResolveNote(Id) {

            swal({
                title: "Are you sure?",
                text: "Do you really want to resolve this note?",
                type: "warning",
                showCancelButton: true,
                closeOnConfirm: false,
                confirmButtonText: "Yes, resolve it!",
                confirmButtonColor: "#ec6c62"

            },

                function () {

                    $.ajax({
                        type: "POST",
                        url: '/Notes/ResolveNote/' + Id,
                    })
                        .done(function (data) {

                            if ((data == '') || (data == false)) {
                                sweetAlert
                                    ({
                                        title: "Resolved!",
                                        text: "Note successfully resolved!",
                                        type: "success"
                                    },
                                        function () {
                                            window.location.reload();
                                        });
                            }


                        })
                        .error(function (data) {
                            swal("Oops", "We couldn't connect to the server!", "error");
                        });
                });
        }

        $(function () {

            $("#email").click(function () {

                var url = window.location.host;

                let totalNotes = 0;
                var ClientId = $("#ddlclient option:selected").val();
                var ClientName = $("#ddlclient option:selected").text();
                getClientDate(ClientName);
                ClientName = encodeURIComponent(ClientName);
                var LastMailSent = sessionStorage.getItem("LastMailSent");
                $("#lblTotalNotesCount").text(totalNotes);

                /* var NotInBankUnreconciledItemsCount = $("#lblNotInBooksCount").text();*/
                getAjax(`/Notes/EmailSend?ClientName=${ClientName}&ClientId=${ClientId}&url=${url}&totalNotes=${totalNotes}&sentdate=${LastMailSent}`, null, function (response) {
                    if (response.Status == 'Success') {

                        var text = response.Recipients.toString().split(",");
                        var str = text.join(', ');
                        $("#email-to").val(str);
                        if (str == "") {
                            $("#sendbutton").attr("disabled", true);
                        }

                        $("#email-subject").val(response.Subject);
                        $("#ibody").html(response.Body);
                        $("#ifooter").html(response.LastSent);
                    }
                });

            });
        });

        //var text = "";
        //function getClientDate(ClientName) {
        //    getAjaxSync(apiurl + `Notes/getLastSentDate?ClientName=${ClientName}`, null, function (response) {
        //        text = response.resultData;
        //    });

        //}

        function getClientDate(ClientName) {
            getAjaxSync(apiurl + `Notes/getLastSentDate?ClientName=${ClientName}`, null, function (response) {
                sessionStorage.setItem("LastMailSent", response.resultData);
            });

        }

        function sendMail() {
            var recip = $("#email-to").val();
            var subject = $("#email-subject").val();
            var body = $("#ibody").html();
            var pdata = {
                Recipents: recip,
                Subject: subject,
                Body: body,
            };
            postAjaxSync(apiurl + `Notes/sendNotesEmail`, JSON.stringify(pdata), function (response) {
                ShowAlertBoxSuccess("", "Email has been sent ", function () { window.location.reload(); });
            });


        }

    </script>
    @if (ViewBag.IsDraggable == true)
    {
        <script type="text/javascript">
            $(function () {
                var Selectors = {
                    BODY: 'body',
                    NOTES_CONTAINER: '.notes-container',
                    NOTES_ITEMS_CONTAINER: 'div[id^=notes-items-container]',
                    NOTES_ITEM: '.notes-item',
                };

                let arrItemsContainer = $(Selectors.NOTES_ITEMS_CONTAINER).toArray();
                for (var i = 0; i < arrItemsContainer.length; i++) {
                    let sortable = new window.Draggable.Sortable(arrItemsContainer[i], {
                        draggable: Selectors.NOTES_ITEM,
                        delay: 200,
                        mirror: {
                            appendTo: Selectors.BODY,
                            constrainDimensions: true
                        }
                    });
                    sortable.on('drag:stop', function (e) {
                        var $this = $(e.data.source);
                        var $itemContainer = $this.closest(Selectors.NOTES_ITEMS_CONTAINER);
                        let $items = $itemContainer.find('.notes-item:visible');
                        let ids = [];
                        let positions = [];
                        for (var i = $items.length; i > 0; i--) {
                            ids.push(parseInt($items[i - 1].getAttribute("data-id")));
                            positions.push(i);
                            $items[i - 1].setAttribute("data-position", i);
                        }
                        let pdata = { Ids: ids, Positions: positions.reverse() };
                        //post Ajax
                        let json = JSON.stringify(pdata);

                        postAjax('/Notes/DragAndDropNotesDescription', JSON.stringify(pdata), function (response) {
                            if (response.Message == 'Success') {

                            }

                        })

                    });
                }


                Array.prototype.forEach.bind($(".last-login"))(

                    _td => {
                        if (_td.innerText == "") {
                            return;
                        }
                        let _date = _td.innerText;

                        let utcDate = _date;


                        var localTime = UtcDateToLocalTime(utcDate);


                        _date = `${localTime.getMonth() + 1}/${localTime.getDate()}/${localTime.getFullYear()} ${localTime.getHours()}:${localTime.getMinutes()} ${(localTime.getHours() >= 12 ? "PM" : "AM")}`;

                        _td.innerText = _date;
                    }
                );


            });




        </script>
    }
}