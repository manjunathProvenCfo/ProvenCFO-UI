@model List<Proven.Model.ClientXeroAccountsVM>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@*@Styles.Render("~/bundles/customcss")
    @Scripts.Render("~/bundles/modernizr")*@

<style>
    a.page-link {
        background-color: #fff !important;
        border-color: #d8e2ef !important;
    }

    .page-link:hover {
        color: #000 !important;
    }

    .page-item.active .page-link {
        z-index: 3;
        color: #fff !important;
        background-color: #00BE82 !important;
    }
</style>
@using (Html.BeginForm("GetBankAccounts", "Integration", FormMethod.Post, Model))
{
    @Html.AntiForgeryToken()
    <div class="card mb-3">
        <div class="card-header">
            <div class="row align-items-center justify-content-between">
                <div class="col-6 col-sm-auto d-flex align-items-center pr-0">
                    <h5 class="fs-0 mb-0 text-nowrap py-2 py-xl-0"> Bank Accounts  |  </h5>&nbsp;
                    @Html.Hidden("XeroConnectionStatus", (object)@ViewBag.XeroConnectionStatus, new { @Id = "XeroConnectionStatus" })
                    @Html.Hidden("XeroStatusMessage", (object)@ViewBag.XeroStatusMessage, new { @Id = "XeroStatusMessage" })
                    <div class="error" id="XeroStatus"></div>
                </div>
                <div class="col-6 col-sm-auto ml-auto text-right pl-0">
                    @*<div class="d-none" id="purchases-actions">
                            <div class="input-group input-group-sm">
                                <select class="custom-select cus" aria-label="Bulk actions">
                                    <option selected="">Bulk actions</option>

                                    <option value="Delete">Delete</option>
                                    <option value="Archive">Archive</option>
                                </select>
                                <button class="btn btn-falcon-default btn-sm ml-2" type="button">Submit</button>
                            </div>
                        </div>*@

                    <div id="dashboard-actions row">
                        <div class="dz-error-message col-12"></div>
                        @*<button class="btn btn-falcon-default btn-sm mx-1" id="ibulkupdate" type="submit" title="Update">
            <span class="" data-fa-transform="shrink-3 down-2 m-2 p"></span><span class="d-none d-sm-inline-block ">Update</span>
        </button>*@

                        @Html.Hidden("AccountingPackageId", (object)@ViewBag.AccountingPackageId, new { @Id = "AccountingPackageId" })
                        @if (ViewBag.AccountingPackageId == 2)
                        {
                            <button class="btn btn-falcon-default btn-sm" type="button" id="btnSync"><span class="fas fa-external-link-alt" data-fa-transform="shrink-3 down-2"></span><span class="d-none d-sm-inline-block ml-1" onclick="XeroBankAccountSync();" id="spanSync">Sync From QuickBooks</span></button>
                        }
                        else
                        {
                            <button class="btn btn-falcon-default btn-sm" type="button" id="btnSync"><span class="fas fa-external-link-alt" data-fa-transform="shrink-3 down-2"></span><span class="d-none d-sm-inline-block ml-1" onclick="XeroBankAccountSync();" id="spanSync">Sync From Xero</span></button>
                        }

                    </div>
                </div>
            </div>
        </div>
        <div class="card-body px-0 pt-0">
            <div class="dashboard-data-table">
                <table id="clientlist" class="table table-sm table-dashboard fs--1 data-table border-bottom">
                    <thead class="bg-200 text-900">
                        <tr>

                            <th class="no-sort pr-1 align-middle data-table-row-bulk-select">
                                <div class="custom-control custom-checkbox">
                                    <input class="custom-control-input checkbox-bulk-select" id="checkbox-bulk-purchases-select" type="checkbox" data-checkbox-body="#purchases" data-checkbox-actions="#purchases-actions" data-checkbox-replaced-element="#dashboard-actions" />
                                    <label class="custom-control-label" for="checkbox-bulk-purchases-select"></label>
                                </div>
                            </th>
                            <th class="sort pr-1 align-middle" width="15%">Account Name</th>
                            <th class="sort pr-1 align-middle" width="15%">Account Number</th>
                            <th class="sort pr-1 align-middle" width="10%">Type</th>
                            <th class="sort pr-1 align-middle" width="10%">Status</th>

                        </tr>
                    </thead>
                    <tbody id="purchases">
                        
                            @foreach (var item in Model)
                            {
                                <tr class="btn-reveal-trigger">
                                    <td class="align-middle">
                                        <div class="custom-control custom-checkbox">
                                            <input class="custom-control-input checkbox-bulk-select-target" type="checkbox" id="@item.AccountID" value="@item.Status" checked="@item.IsActive" onclick="CheckBankAccount(event);"/>
                                            <label class="custom-control-label" for="@item.AccountID"></label>
                                            @*@Html.HiddenFor(modelItem => item.ExcludedAccountNumbers, new { @id = "hidExcludedAccountNumbers" })
                            @Html.HiddenFor(modelItem => item.IncludedAccountNumbers, new { @id = "hidIncludedAccountNumbers" })*@
                                        </div>
                                    </td>
                                    <td class="align-middle">
                                        @Html.DisplayFor(modelItem => item.Name)
                                    </td>
                                    <td class="align-middle">
                                        @Html.DisplayFor(modelItem => item.BankAccountNumber)
                                    </td>
                                    <td class="align-middle">
                                        @Html.DisplayFor(modelItem => item.Type)
                                    </td>
                                    <td class="align-middle">
                                        @Html.DisplayFor(modelItem => item.Status)
                                    </td>
                                </tr>
                            }
                       
                    </tbody>

                </table>
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/js/table")
    <script>

        $(document).ready(function () {
            setTimeout(function () {
                XeroConnectionUpdate();

            }, 2000);
            $('#checkbox-bulk-purchases-select').parent().addClass("d-none");

        });
        //$(document).ready(function () {
        //    EnableSelectedBulkUpdateButton();
        //});


        function XeroConnectionUpdate() {
            var XConstatus = $('#XeroConnectionStatus');
            var XMessage = $('#XeroStatusMessage');
            var XStatus = $('#XeroStatus');
            if (XConstatus.val() == "True") {
                var AccountingPackageId = $('#AccountingPackageId').val();
                if (AccountingPackageId != undefined && AccountingPackageId != null && AccountingPackageId == 2) {
                    XStatus.text("QuickBooks connected");
                }
                else {
                    XStatus.text("Xero connected");
                }
                XStatus.css('color', 'green');
                $('#btnSync').show();//prop('disabled', false);
                HidelottieLoader();
                //$('#spanSync').prop('disabled', false);
            }
            else {
                XStatus.text('Error Connecting to Xero: ' + XMessage.val());
                XStatus.css('color', 'red');
                $('#btnSync').hide()//prop('disabled', true);
                // $('#spanSync').prop('disabled', true);
            }
        }

        function AgencyDropdownPartialViewChange() {
            

            ShowlottieLoader();
            setTimeout(function () {
                var ClientID = $("#ddlclient option:selected").val();
                console.log('ClientID' + ClientID)
                getAjaxSync(`/AgencyService/GetClientDetails?id=` + ClientID, null, function (response) {
                    if (response != null) {
                        SetUserPreferencesForAgency();
                        setTimeout(function () {
                            window.location.reload();
                            UpdateXeroConnectionStatus();

                        }, 2200);
                    }
                    else {

                    }
                });
            }, 2000);
        }
        function UpdateXeroConnectionStatus() {
            postAjax('/Integration/UpdateXeroConnectionStatus', null, function (data) {
                if (data === true) {
                    XeroConnectionUpdate();
                    window.location.reload();
                }
            });
        }
        function XeroBankAccountSync() {

            ShowlottieLoader();
            var ClientID = $("#ddlclient option:selected").val();
            postAjax('/Integration/GetXeroBankAccountSync?ClientID=' + ClientID, null, function (data) {
                if (data === false) {
                    ShowAlertBoxError("Error", "Bank Account not updated.", function () { window.location.reload(); });
                }
                else {
                    ShowAlertBoxSuccess("Success!", "Bank Accounts synced with Xero successfully.", function () { window.location.reload(); });
                }

            });
            
        }

        var EnableSelectedBulkUpdateButton = function () {
            var IsAllSelected = $('#checkbox-bulk-purchases-select')[0].checked;
            var SelectedItems = sessionStorage.getItem('SelectedRecords');
            if ((SelectedItems != null && SelectedItems != '') || IsAllSelected == true) {
                $("#ibulkupdate").attr('disabled', false);
                $("#ibulkupdate").attr('title', 'Bulk Update');

            }
            else {
                $("#ibulkupdate").attr('disabled', true);
                $("#ibulkupdate").attr('title', 'Select A Row to Update.');

            }
        }

        $('.checkbox-bulk-select-target').click(function () {

            if ($(this).is(":checked")) {

                $(this).closest('tr').addClass('bg-300');
            }
            else {
                $(this).closest("tr").removeClass('bg-300');
            }
        });
        /* checkbox - bulk - purchases - select*/

        $('.checkbox-bulk-select').change(function () {
            if ($(this).is(":checked", true)) {

                $(this).closest('table').addClass('bg-300');
            }
            else {
                $(this).closest("table").removeClass('bg-300');
            }
            //$(".checkbox-bulk-select").attr('checked', false);
            //$(this).closest('tr').css("background-color", "#ff0000");
        });

        $("#clientExist").addClass('d-none');
        $("#clientExist").html('');
        $('#datepicker').attr('data-options', '{"dateFormat":"m/d/Y"}');

        function GetUnselectedXeroaccouts() {
            var ExcludedAccountId = '';
            var IncludedAccountId = '';
            var uncheckaccounts = $('.checkbox-bulk-select-target');
            if (uncheckaccounts != null && uncheckaccounts != undefined) {
                $.each(uncheckaccounts, function (key, val) {
                    if (val != null && val.checked == false) {
                        ExcludedAccountId = ExcludedAccountId != '' ? ExcludedAccountId + ',' + val.id : val.id;
                    }
                    else if (val != null && val.checked == true) {
                        IncludedAccountId = IncludedAccountId != '' ? IncludedAccountId + ',' + val.id : val.id;
                    }
                });
            }
            $('#hidExcludedAccountNumbers').val(ExcludedAccountId);
            $('#hidIncludedAccountNumbers').val(IncludedAccountId);
        }
        function CheckExistValidation() {
            if ($("#ClientName").val() === "" && $("#clientExist").html() !== "") {
                $('#clientExist').hide();
                $("#clientExist").addClass('d-none');
                $("#clientExist").html('');
            }
        }
        // document.getElementById("clientExist").style.display = "none";
        var msg = $('#CreateOrUpdate') != undefined ? $('#CreateOrUpdate').val() : '';

        if (msg != undefined && msg != '' && msg == "Created") {
            AddAlertRole();
            $('#CreateOrUpdate').val('');
        }
        else if (msg != undefined && msg != '' && msg == "Updated") {
            UpdateAlertRole();
            $('#CreateOrUpdate').val('');
        }
        else if (msg != undefined && msg != '' && msg == "Exist") {
            $('#clientExist').show();
            $("#clientExist").removeClass('d-none');
            $("#clientExist").html('This Client Agency name has been already taken.');
            $('#CreateOrUpdate').val('');
        }
        function AddAlertRole() {
            sweetAlert
                ({
                    title: "Created!",
                    text: "New Client  created successfully!",
                    type: "success"
                },
                    function () {
                        window.location.href = '/Client/ClientList'
                    });
        }
        function UpdateAlertRole() {
            sweetAlert
                ({
                    title: "Updated!",
                    text: "Client  updated successfully!",
                    type: "success"
                },
                    function () {
                        window.location.href = '/Client/ClientList'
                    });
        }
        var CheckBankAccount = function (e) {
           
            var IsActive = e.currentTarget.checked;
            var AccountId = e.currentTarget.attributes["Id"].value;
            postAjax(apiurl + 'Xero/UpdateBankAccount?AccountId=' + AccountId + '&IsActive=' + IsActive, null, function (data) {
                if (data.resultData === false) {
                    ShowAlertBoxError("Error", "Bank Account not updated.", function () { window.location.reload(); });
                }
                else {
                    ShowAlertBoxSuccess("Success!", "Bank Accounts updated successfully.", function () { window.location.reload(); });
                }

            });
        }
      
    </script>

}






