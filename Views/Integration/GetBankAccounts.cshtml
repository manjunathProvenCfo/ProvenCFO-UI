@model List<Proven.Model.ClientXeroAccountsVM>
@{
    ViewBag.Title = "CreateClient";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



@if (ViewData.ModelState.IsValid)
{
    if (@ViewBag.Name != null)
    {
        <b>
            ClientName : @ViewBag.ClientName<br />
            Email : @ViewBag.Email<br />
            PhoneNumber : @ViewBag.PhoneNumber<br />
            Address : @ViewBag.Address<br />
            ContactPersonName : @ViewBag.ContactPersonName
        </b>
    }
}

<script>
    // document.getElementById("clientExist").style.display = "none";
</script>



    @Html.ValidationSummary(true)

    <div class="card">
        <div class="card-body overflow-hidden">


            <div class="card-body px-0 pt-0">
                <div class="dashboard-data-table">
                    <table id="clientlist" class="table table-sm table-dashboard fs--1 data-table border-bottom">
                        <thead class="bg-200 text-900">
                            <tr>


                                <th class="sort pr-1 align-middle" width="15%">Account Name</th>
                                <th class="sort pr-1 align-middle" width="15%">Account Number</th>
                                <th class="sort pr-1 align-middle" width="10%">Type</th>
                                <th class="sort pr-1 align-middle" width="10%">Status</th>

                            </tr>
                        </thead>
                        <tbody id="purchases">
                            @foreach (var item in Model)
                            {
                                <tr class="btn-reveal-trigger">

                                    <td class="align-middle">
                                        @Html.DisplayFor(modelItem => item.Name)
                                    </td>
                                    <td class="align-middle">
                                        @Html.DisplayFor(modelItem => item.BankAccountNumber)
                                    </td>
                                    <td class="align-middle">
                                        @Html.DisplayFor(modelItem => item.Type)
                                    </td>
                                    <td class="align-middle">
                                        @Html.DisplayFor(modelItem => item.Status)
                                    </td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </div>
            </div>
        </div>
    </div>






@section Scripts {
    @Scripts.Render("~/bundles/js/table")
    @Scripts.Render("~/bundles/js/reconciliationMain")

    <script>

        $(document).ready(function () {
            setTimeout(function () {
                XeroConnectionUpdate();


            }, 2000);

        });

        function XeroConnectionUpdate() {
            var XConstatus = $('#XeroConnectionStatus');
            var XMessage = $('#XeroStatusMessage');
            var XStatus = $('#XeroStatus');
            if (XConstatus.val() == "True") {
                XStatus.text("Xero connected");
                XStatus.css('color', 'green');
                $('#btnSync').show();//prop('disabled', false);
                HidelottieLoader();
                //$('#spanSync').prop('disabled', false);
            }
            else {
                XStatus.text('Error Connecting to Xero :' + XMessage.val());
                XStatus.css('color', 'red');
                $('#btnSync').hide()//prop('disabled', true);
                // $('#spanSync').prop('disabled', true);
            }
        }

        function AgencyDropdownPartialViewChange() {
            debugger;

            ShowlottieLoader();
            setTimeout(function () {
                var ClientID = $("#ddlclient option:selected").val();
                console.log('ClientID' + ClientID)
                getAjaxSync(`/AgencyService/GetClientDetails?id=` + ClientID, null, function (response) {
                    if (response != null) {
                        SetUserPreferencesForAgency();
                        setTimeout(function () {
                            window.location.reload();
                            UpdateXeroConnectionStatus();

                        }, 2200);
                    }
                    else {

                    }
                });
            }, 2000);
        }
        function UpdateXeroConnectionStatus() {
            postAjax('/Integration/UpdateXeroConnectionStatus', null, function (data) {
                if (data === true) {
                    XeroConnectionUpdate();
                    window.location.reload();
                }
            });
        }
        function XeroGlAccoutSync() {

            ShowlottieLoader();
            var ClientID = $("#ddlclient option:selected").val();
            postAjax('/Integration/GetXeroGLAccountSync?ClientID=' + ClientID, null, function (data) {
                if (data === false) {
                    ShowAlertBoxError("Error", "GL Account not updated.", function () { window.location.reload(); });
                }
                else {
                    ShowAlertBoxSuccess("Success!", "GL Accounts synced with Xero successfully.", function () { window.location.reload(); });
                }

            });
            /*  HidelottieLoader();*/
        }

    </script>


}





