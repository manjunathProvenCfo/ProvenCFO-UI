@using ProvenCfoUI.Models;

@model ProvenCfoUI.Models.CreateClientVM
@{
    ViewBag.Title = "CreateClient";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



@if (ViewData.ModelState.IsValid)
{
    if (@ViewBag.Name != null)
    {
        <b>
            ClientName : @ViewBag.ClientName<br />
            Email : @ViewBag.Email<br />
            PhoneNumber : @ViewBag.PhoneNumber<br />
            Address : @ViewBag.Address<br />
            ContactPersonName : @ViewBag.ContactPersonName
        </b>
    }
}



<script>
    // document.getElementById("clientExist").style.display = "none";
</script>


@using (Html.BeginForm("CreateClient", "Client", FormMethod.Post))
{

    @Html.ValidationSummary(true)

    <div class="card">
        <div class="card-body overflow-hidden">
            @if (@ViewBag.ErrorMessage != null)
            {
                @Html.Hidden("CreateOrUpdate", (object)@ViewBag.ErrorMessage, new { @id = "CreateOrUpdate" });
            }
            @if (@ViewBag.Message != null)
            {
                <div class="alert alert-success mb-4">
                    <p class="mb-0">@ViewBag.Message</p>
                </div>
            }
            @if (Model.Id == null || Model.Id == 0)
            {
                <h3 class="font-weight-normal fs-2 fs-md-3 mb-0 border-bottom pb-2">Create Client</h3>
            }
            else
            {

                <div class="card-header">
                    <div class="row align-items-center justify-content-between border-bottom">
                        <div class="col-6 col-sm-auto d-flex align-items-center pr-0">

                            <h3 class="font-weight-normal fs-2 fs-md-3 mb-0  pb-2">Edit Client </h3>&nbsp;
                        </div>
                        <div class="col-6 col-sm-auto ml-auto text-right pl-0">
                            <div class="d-none" id="purchases-actions">
                                <div class="input-group input-group-sm">
                                    <select class="custom-select cus" aria-label="Bulk actions">
                                        <option selected="">Bulk actions</option>
                                        <option value="Delete">Delete</option>
                                        <option value="Archive">Archive</option>
                                    </select>
                                    <button class="btn btn-falcon-default btn-sm ml-2" type="button">Submit</button>
                                </div>
                            </div>
                            <div id="dashboard-actions">
                                @if (Model.Id != null || Model.Id != 0)
                                {

                                    <button class="btn btn-falcon-default btn-sm mx-1" id="btnapiTokenUpdate" type="button" title="Token Update">
                                        <span class="" data-fa-transform="shrink-3 down-2 m-2 p"></span><span class="d-none d-sm-inline-block ">Update API Token</span>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>

            }

            <div class="row mt-4">
                <div class="col-12">
                    <form method="  " action="createclient">
                        <div class="row form-group custom-form-width">
                            <div class="col-12 col-lg-8 col-xl-5">
                                <fieldset class="scheduler-border">
                                    <legend class="scheduler-border col-xl-5">Basic Information</legend>
                                    @*<legend>Basic Information</legend>*@
                                    @*<h5 style="margin-bottom: 20px;">Basic Information</h5>*@

                                    <div class="row align-items-center form-group">
                                        @Html.HiddenFor(x => x.Id, "id")
                                        @Html.HiddenFor(x => x.Email, "Email")
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-create-name" class="mb-0">Client Name</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.ClientName, new { htmlAttributes = new { @class = "form-control", onfocusout = "CheckExistValidation()" } })
                                            @*@Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })*@
                                            <span class="text-danger field-validation-error" data-valmsg-for="ClientName" data-valmsg-replace="true"><span id="clientExist" class=""></span></span>
                                        </div>
                                    </div>
                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0"> Entity Name</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.DropDownListFor(model => model.BillableEntityId, new SelectList(Model.billableEntitiesList, "Id", "EntityName"), "Select Entity", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.BillableEntityId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0"> Team</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.DropDownListFor(model => model.TeamId, new SelectList(Model.TeamList, "Id", "TeamName"), "Select Team", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.TeamId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0">City</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.CityName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CityName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-create-phonenumber" class="mb-0">State</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.DropDownListFor(model => model.StateId, new SelectList(Model.StateList, "Id", "StateName"), "Select State", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="" class="mb-0">Start Date</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.StartDateText, new { htmlAttributes = new { @class = "form-control datetimepicker", id = "datepicker" } })
                                            @Html.ValidationMessageFor(model => model.StartDateText, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="row align-items-center form-group">

                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email">Status</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.DropDownListFor(m => m.Status, new List<SelectListItem>() { new SelectListItem { Text = "Active", Value = "Active" }, new SelectListItem { Text = "Inactive", Value = "Inactive" } }, new { @class = "form-control text-box single-line" })
                                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email">Receives Quarterly Reports</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            <div class="custom-control custom-switch custom-control-inline  mr-0">
                                                @Html.CheckBoxFor(x => x.ReceiveQuarterlyReports, new { @class = "custom-control-input" })
                                                <label class="custom-control-label" for="ReceiveQuarterlyReports">Yes, receives quarterly reports</label>
                                            </div>

                                        </div>
                                    </div>
                                    @if (Model.ThirdPartyAccountingApp_ref == 2)
                                    {
                                        <div class="row align-items-center form-group">
                                            <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                                <label for="split-login-email">Enable data Sync</label>
                                            </div>
                                            <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                                <div class="custom-control custom-switch custom-control-inline  mr-0">
                                                    @Html.CheckBoxFor(x => x.EnableAutomation, new { @class = "custom-control-input", disabled = "disabled" })

                                                    <label class="custom-control-label" for="EnableAutomation">Yes, Enable data Sync</label>
                                                </div>

                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="row align-items-center form-group">
                                            <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                                <label for="split-login-email">Enable data Sync</label>
                                            </div>
                                            <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                                <div class="custom-control custom-switch custom-control-inline  mr-0">
                                                    @Html.CheckBoxFor(x => x.EnableAutomation, new { @class = "custom-control-input" })

                                                    <label class="custom-control-label" for="EnableAutomation">Yes, Enable data Sync</label>
                                                </div>

                                            </div>
                                        </div>
                                    }
                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email">Enable Plaid</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            <div class="custom-control custom-switch custom-control-inline  mr-0">
                                                @Html.CheckBoxFor(x => x.Plaid_Enabled, new { @class = "custom-control-input" })
                                                <label class="custom-control-label" for="Plaid_Enabled">Yes, Enable Plaid</label>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email">Accounting Package</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @foreach (var thirdPartyAccountingApp_ref in (List<Proven.Model.ThirdPartyAccountingAppVM>)TempData["ThirdPartyAccountApp"])
                                            {
                                                if (Model.Id == null || Model.Id == 0)
                                                {
                                                    <span>
                                                        @if (Model.ThirdPartyAccountingApp_ref == thirdPartyAccountingApp_ref.Id)
                                                        {
                                                            @Html.RadioButtonFor(m => m.ThirdPartyAccountingApp_ref, thirdPartyAccountingApp_ref.Id, new { @checked = "checked" })
                                                        }
                                                        else
                                                        {
                                                            @Html.RadioButtonFor(m => m.ThirdPartyAccountingApp_ref, thirdPartyAccountingApp_ref.Id)
                                                        }
                                                        @thirdPartyAccountingApp_ref.Name
                                                    </span>
                                                }

                                                else
                                                {
                                                    <span>
                                                        @if (Model.ThirdPartyAccountingApp_ref == thirdPartyAccountingApp_ref.Id)
                                                        {
                                                            @Html.RadioButtonFor(m => Model.ThirdPartyAccountingApp_ref, thirdPartyAccountingApp_ref.Id, new { @checked = "checked", disabled = "disabled" })
                                                        }
                                                        else
                                                        {
                                                            @Html.RadioButtonFor(m => Model.ThirdPartyAccountingApp_ref, thirdPartyAccountingApp_ref.Id, new { disabled = "disabled" })
                                                        }

                                                        @thirdPartyAccountingApp_ref.Name
                                                    </span>
                                                }

                                                <br />

                                            }
                                        </div>
                                    </div>
                                </fieldset>
                                <fieldset class="scheduler-border">
                                    <legend class="scheduler-border col-xl-7">Accounting Package Details</legend>
                                    @*<h5 style="margin-bottom: 25px;">Accounting Package Details</h5>*@

                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0"> API Client Scope</label>
                                    </div>
                                    @if (Model.ThirdPartyAccountingApp_ref == 2)
                                    {
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8" id="divQuickbookscopeoption" style="">
                                            <select class="qbookselect form-control" name="XeroScopeArray" multiple>
                                            </select>
                                            @*@Html.DropDownListFor(m => m.XeroScopeArray, new List<SelectListItem>()  { new         SelectListItem        { Text = "com.intuit.quickbooks.accounting", Value = "com.intuit.quickbooks.accounting", Selected = true },
                new SelectListItem { Text = "com.intuit.quickbooks.payment", Value = "com.intuit.quickbooks.payment",Selected = true },
                new SelectListItem { Text = "openid", Value = "openid",Selected = true },
                }, new { @class = " qbookselect form-control", @multiple = "multiple" })*@
                                            @Html.ValidationMessageFor(m => m.XeroScopeArray, "", new { @class = "text-danger" })
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8" id="divQuickbookscopeoption" style="display:none;">
                                            <select class="qbookselect form-control" name="XeroScopeArray" multiple>
                                            </select>
                                            @*@Html.DropDownListFor(m => m.XeroScopeArray, new List<SelectListItem>()  { new         SelectListItem        { Text = "com.intuit.quickbooks.accounting", Value = "com.intuit.quickbooks.accounting", Selected = true  },
                new SelectListItem { Text = "com.intuit.quickbooks.payment", Value = "com.intuit.quickbooks.payment", Selected = true  },
                new SelectListItem { Text = "openid", Value = "openid" , Selected = true  },
                }, new { @class = " qbookselect form-control", @multiple = "multiple" })*@
                                            @Html.ValidationMessageFor(m => m.XeroScopeArray, "", new { @class = "text-danger" })
                                        </div>
                                    }

                                    @if (Model.ThirdPartyAccountingApp_ref == 1)
                                    {


                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8" id="divxeroscopeoption">

                                            <select class="divxeroscopeoption form-control" name="XeroScopeArray" multiple>
                                            </select>
                                            @*@Html.DropDownListFor(m => m.XeroScopeArray, new List<SelectListItem>()  { new SelectListItem { Text = "projects.read", Value = "projects.read" },
                new SelectListItem { Text = "openid", Value = "openid", Selected = true   },
                new SelectListItem { Text = "profile", Value = "profile", Selected = true  },
                new SelectListItem { Text = "email", Value = "email",Selected = true  },
                new SelectListItem { Text = "offline_access", Value = "offline_access",Selected = true  },
                new SelectListItem { Text = "accounting.reports.read", Value = "accounting.reports.read", Selected = true  },
                new SelectListItem { Text = "accounting.transactions", Value = "accounting.transactions" ,Selected = true },
                new SelectListItem { Text = "accounting.transactions.read", Value = "accounting.transactions.read" },
                new SelectListItem { Text = "accounting.reports.read", Value = "accounting.reports.read",Selected = true  },
                new SelectListItem { Text = "accounting.reports.tenninetynine.read", Value = "accounting.reports.tenninetynine.read" },
                new SelectListItem { Text = "accounting.budgets.read", Value = "accounting.budgets.read" },
                new SelectListItem { Text = "accounting.journals.read", Value = "accounting.journals.read" },
                new SelectListItem { Text = "accounting.settings", Value = "accounting.settings",Selected = true  },
                new SelectListItem { Text = "accounting.settings.read", Value = "accounting.settings.read" },
                new SelectListItem { Text = "accounting.contacts", Value = "accounting.contacts" },
                new SelectListItem { Text = "accounting.contacts.read", Value = "accounting.contacts.read" },
                new SelectListItem { Text = "accounting.attachments", Value = "accounting.attachments" },
                new SelectListItem { Text = "accounting.attachments.read", Value = "accounting.attachments.read" },
                new SelectListItem { Text = "assets", Value = "assets" },
                new SelectListItem { Text = "assets.read", Value = "assets.read" },
                new SelectListItem { Text = "files", Value = "files" },
                new SelectListItem { Text = "files.read", Value = "files.read" },
                new SelectListItem { Text = "payroll.employees", Value = "payroll.employees" },
                new SelectListItem { Text = "payroll.employees.read", Value = "payroll.employees.read" },
                new SelectListItem { Text = "payroll.payruns", Value = "payroll.payruns" },
                new SelectListItem { Text = "payroll.payruns.read", Value = "payroll.payruns.read" },
                new SelectListItem { Text = "payroll.payslip", Value = "payroll.payslip" },
                new SelectListItem { Text = "payroll.payslip.read", Value = "payroll.payslip.read" },
                new SelectListItem { Text = "payroll.settings", Value = "payroll.settings" },
                new SelectListItem { Text = "payroll.settings.read", Value = "payroll.settings.read" },
                new SelectListItem { Text = "payroll.timesheets", Value = "payroll.timesheets" },
                new SelectListItem { Text = "payroll.timesheets.read", Value = "payroll.timesheets.read" },
                }, new { @class = " divxeroscopeoption form-control", @multiple = "multiple" })
                @Html.ValidationMessageFor(m => m.XeroScopeArray, "", new { @class = "text-danger" })*@
                                        </div>
                                    }
                                    else
                                    {




                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8 d-none" id="divxeroscopeoption">

                                            <select class="divxeroscopeoption form-control" name="XeroScopeArray" multiple>
                                            </select>
                                            @*@Html.DropDownListFor(m => m.XeroScopeArray, new List<SelectListItem>()  { new SelectListItem { Text = "projects.read", Value = "projects.read" },
                new SelectListItem { Text = "openid", Value = "openid", Selected = true   },
                new SelectListItem { Text = "profile", Value = "profile", Selected = true  },
                new SelectListItem { Text = "email", Value = "email",Selected = true  },
                new SelectListItem { Text = "offline_access", Value = "offline_access",Selected = true  },
                new SelectListItem { Text = "accounting.reports.read", Value = "accounting.reports.read", Selected = true  },
                new SelectListItem { Text = "accounting.transactions", Value = "accounting.transactions" ,Selected = true },
                new SelectListItem { Text = "accounting.transactions.read", Value = "accounting.transactions.read" },
                new SelectListItem { Text = "accounting.reports.read", Value = "accounting.reports.read",Selected = true  },
                new SelectListItem { Text = "accounting.reports.tenninetynine.read", Value = "accounting.reports.tenninetynine.read" },
                new SelectListItem { Text = "accounting.budgets.read", Value = "accounting.budgets.read" },
                new SelectListItem { Text = "accounting.journals.read", Value = "accounting.journals.read" },
                new SelectListItem { Text = "accounting.settings", Value = "accounting.settings",Selected = true  },
                new SelectListItem { Text = "accounting.settings.read", Value = "accounting.settings.read" },
                new SelectListItem { Text = "accounting.contacts", Value = "accounting.contacts" },
                new SelectListItem { Text = "accounting.contacts.read", Value = "accounting.contacts.read" },
                new SelectListItem { Text = "accounting.attachments", Value = "accounting.attachments" },
                new SelectListItem { Text = "accounting.attachments.read", Value = "accounting.attachments.read" },
                new SelectListItem { Text = "assets", Value = "assets" },
                new SelectListItem { Text = "assets.read", Value = "assets.read" },
                new SelectListItem { Text = "files", Value = "files" },
                new SelectListItem { Text = "files.read", Value = "files.read" },
                new SelectListItem { Text = "payroll.employees", Value = "payroll.employees" },
                new SelectListItem { Text = "payroll.employees.read", Value = "payroll.employees.read" },
                new SelectListItem { Text = "payroll.payruns", Value = "payroll.payruns" },
                new SelectListItem { Text = "payroll.payruns.read", Value = "payroll.payruns.read" },
                new SelectListItem { Text = "payroll.payslip", Value = "payroll.payslip" },
                new SelectListItem { Text = "payroll.payslip.read", Value = "payroll.payslip.read" },
                new SelectListItem { Text = "payroll.settings", Value = "payroll.settings" },
                new SelectListItem { Text = "payroll.settings.read", Value = "payroll.settings.read" },
                new SelectListItem { Text = "payroll.timesheets", Value = "payroll.timesheets" },
                new SelectListItem { Text = "payroll.timesheets.read", Value = "payroll.timesheets.read" },
                }, new { @class = " divxeroscopeoption form-control", @multiple = "multiple" })
                @Html.ValidationMessageFor(m => m.XeroScopeArray, "", new { @class = "text-danger" })*@
                                        </div>
                                    }

                                </div>


                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0"> API Client ID</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">

                                            @{
                                                                var res = (ViewBag.thirdPatyAPI as List<ThirdPartyAPIDetailsVM>)

                                                                        .Where(apid => apid.ThirdParty == (Model.ThirdPartyAccountingApp_ref == 1 ? "Xero" : "QuickBook")).ToList();

                                                                var apiDetails = (@ViewBag.thirdPatyAPI as List<ThirdPartyAPIDetailsVM>);


                                                                 res.Add(new ThirdPartyAPIDetailsVM()
                                                                {
                                                                    ClientId = "",
                                                                    ClientSecret = "",
                                                                    Status = true,
                                                                    ThirdParty = "Select"
                                                                });
                                            }



                                                            @Html.DropDownListFor(m => m.APIClientID, res.Select(ele => new SelectListItem()
                                                            {
                                                                Text = ele.ClientId != "" ? ele.ClientId : ele.ThirdParty,
                                                                Value = ele.ClientId + "=" + ele.ClientSecret,
                                                                Selected = (Model.APIClientID == ele.ClientId ? true : false) || ele.ThirdParty == "Select"
                                                            }), new { @class = "form-control", id = "apiclientid" })





                                            @Html.ValidationMessageFor(model => model.APIClientID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0"> API Client Secret</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.APIClientSecret, new { htmlAttributes = new { @class = "form-control  readonly" } })
                                            @Html.ValidationMessageFor(model => model.APIClientSecret, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    @if (Model.ThirdPartyAccountingApp_ref == 1)
                                    {
                                        <div class="row align-items-center form-group" id="xero">
                                            <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                                <label for="split-login-email" class="mb-0"> Xero ID</label>
                                            </div>
                                            <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                                @Html.EditorFor(model => model.XeroID, new { htmlAttributes = new { @class = "form-control ClientXeroIdTextBox" } })

                                                <button id="xeroIDFetch" title="click here to get xero related information."><i class="fa fa-ellipsis-v hover-pointer" aria-hidden="true" id="" style="" title="click here to get xero related information."></i></button>
                                                @Html.ValidationMessageFor(model => model.XeroID, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    }
                                    @if (Model.ThirdPartyAccountingApp_ref == 1)
                                    {
                                        <div class="row align-items-center form-group" id="xerocontact">
                                            <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                                <label for="split-login-email" class="mb-0"> Xero Contact ID For ProvenCFO</label>
                                            </div>
                                            <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                                @Html.EditorFor(model => model.XeroContactIDforProvenCfo, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.XeroContactIDforProvenCfo, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    }
                                    @if (Model.ThirdPartyAccountingApp_ref == 1)
                                    {
                                        <div class="row align-items-center form-group" id="xeroshort">
                                            <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                                <label for="split-login-email" class="mb-0"> Xero Short Code</label>
                                            </div>
                                            <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                                @Html.EditorFor(model => model.XeroShortCode, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.XeroShortCode, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    }
                                    @if (Model.ThirdPartyAccountingApp_ref == 2)
                                    {
                                        <div class="row align-items-center form-group" id="quickbookcompany">
                                            <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                                <label for="split-login-email" class="mb-0"> QuickBooks Company ID</label>
                                            </div>
                                            <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                                @Html.EditorFor(model => model.QuickBooksCompanyId, new { htmlAttributes = new { @class = "form-control", @data_val_number = "The field QuickBooks Company ID must be a number" } })
                                                @Html.ValidationMessageFor(model => model.QuickBooksCompanyId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    }
                                    else
                                                {
                                        <div class="row align-items-center form-group" id="quickbookcompany" style="display:none;">
                                            <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                                <label for="split-login-email" class="mb-0"> QuickBooks Company ID</label>
                                            </div>
                                            <div class="col-12 col-md-8 col-lg-9 col-xl-8">

                                                @Html.EditorFor(model => model.QuickBooksCompanyId, new { htmlAttributes = new { @class = "form-control", @data_val_number = "The field QuickBooks Company ID must be a number" } })
                                                @Html.ValidationMessageFor(model => model.QuickBooksCompanyId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    }
                                </fieldset>
                                <fieldset class="scheduler-border">
                                    <legend class="scheduler-border col-xl-5">Third Party Links</legend>
                                    @*<h5 class="" style="">Third Party Links</h5>*@
                                    <div class="row align-items-center form-group" id="xeroasana">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0"> Asana ID</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.AsanaId, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.AsanaId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="row align-items-center form-group" id="xeroeverhour">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0"> Everhour ID</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.EverhourId, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.EverhourId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="row align-items-center form-group" id="xerocrm">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0"> CRM ID</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.CrmId, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.CrmId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>



                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0">Dashboard ID</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.DashboardId, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.DashboardId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0"> Dashboard URL ID </label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.DashboardURLId, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.DashboardURLId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0"> Report ID </label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.ReportId, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ReportId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </fieldset>
                                <div class="row align-items-center form-group">


                                </div>



                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4"></div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @if (Model.Id == null || Model.Id == 0)
                                        {
                                            <button class="btn btn-primary" type="submit" id="btnCreate" name="submit" href="@Url.Action("CreateClient", "Client")">Create</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-primary" type="submit" id="btnCreate" onclick="GetUnselectedXeroaccouts();" name="submit" href="@Url.Action("CreateClient", "Client")">Update</button>
                                        }
                                        <input type="button" value="Cancel" class="btn btn-primary ml-2" onclick="location.href='@Url.Action("ClientList", "Client")'" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

        </div>
    </div>
}
@Html.Partial("_ClientAPITokenUpldate", true)
<style>
    fieldset.scheduler-border {
        border: 1px groove #ddd !important;
        padding: 0 1.4em 1.4em 1.4em !important;
        margin: 0 0 1.5em 0 !important;
        -webkit-box-shadow: 0px 0px 0px 0px #000;
        box-shadow: 0px 0px 0px 0px #000;
    }

    legend.scheduler-border {
        font-size: 1.2em !important;
        font-weight: bold !important;
        text-align: left !important;
    }

    .ClientXeroIdTextBox {
        display: inline !important;
        width: 92% !important;
        user-select: none;
    }

    .hover-pointer {
        cursor: pointer;
    }
</style>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")




<script>

        $(function () {


            $btnapiTokenUpdate = $("[id*='btnapiTokenUpdate']");
            $APITokenupdatepopup = $("[id*='api-token-modal']");
            $btnapiTokenUpdate.click(function (e) {
                e.stopPropagation();
                e.preventDefault();
                $APITokenupdatepopup.modal('show');
                let checkParty = "@Model.ThirdPartyAccountingApp_ref";
                if (checkParty == "2") {
                    $("#div_IdToken").addClass("d-none");
                }
            });

            $("#ReceiveQuarterlyReports").prop('cheked', @Convert.ToString(Model.ReceiveQuarterlyReports).ToLower());

            addMultipleSelectValues('[name=XeroScopeArray]', '@Model.APIScope');


            /*$('#TeamId').rules('remove');*/
            $(".checkbox-bulk-select-target").click(function (e) {
                if (e.checked) {
                    $('#hidExcludedAccountNumbers').val()
                }
            });
        })

        $("#clientExist").addClass('d-none');
        $("#clientExist").html('');
        $('#datepicker').attr('data-options', '{"dateFormat":"m/d/Y"}');

        function GetUnselectedXeroaccouts() {
            var ExcludedAccountId = '';
            var IncludedAccountId = '';
            var uncheckaccounts = $('.checkbox-bulk-select-target');
            if (uncheckaccounts != null && uncheckaccounts != undefined) {
                $.each(uncheckaccounts, function (key, val) {
                    if (val != null && val.checked == false) {
                        ExcludedAccountId = ExcludedAccountId != '' ? ExcludedAccountId + ',' + val.id : val.id;
                    }
                    else if (val != null && val.checked == true) {
                        IncludedAccountId = IncludedAccountId != '' ? IncludedAccountId + ',' + val.id : val.id;
                    }
            });
           }
            $('#hidExcludedAccountNumbers').val(ExcludedAccountId);
            $('#hidIncludedAccountNumbers').val(IncludedAccountId);
        }
        function CheckExistValidation() {
            if ($("#ClientName").val() === "" && $("#clientExist").html() !== "") {
                $('#clientExist').hide();
                $("#clientExist").addClass('d-none');
                $("#clientExist").html('');
            }
        }
        // document.getElementById("clientExist").style.display = "none";
        var msg = $('#CreateOrUpdate') != undefined ? $('#CreateOrUpdate').val() : '';

        if (msg != undefined && msg != '' && msg == "Created") {
            AddAlertRole();
            $('#CreateOrUpdate').val('');
        }
        else if (msg != undefined && msg != '' && msg == "Updated") {
            UpdateAlertRole();
            $('#CreateOrUpdate').val('');
        }
        else if (msg != undefined && msg != '' && msg == "Exist") {
            $('#clientExist').show();
            $("#clientExist").removeClass('d-none');
            $("#clientExist").html('This Client Agency name has been already taken.');
            $('#CreateOrUpdate').val('');
        }
        function AddAlertRole() {
            sweetAlert
                ({
                    title: "Created!",
                    text: "New Client  created successfully!",
                    type: "success"
                },

                    setTimeout(setTimeout(function () {
                        window.location.href = '/Client/ClientList'
                    }), 3000));
        }
        function UpdateAlertRole() {
            sweetAlert
                ({
                    title: "Updated!",
                    text: "Client  updated successfully!",
                    type: "success"
                },
                    setTimeout(setTimeout(function () {
                        window.location.href = '/Client/ClientList'
                    }),3000))
        }

          const apidetails=[{
           "xero_apiclientId":"@ViewBag.thirdPatyAPI[0].ClientId",
           "xero_secret": "@ViewBag.thirdPatyAPI[0].ClientSecret"},
        {
            "q_clientId": "@ViewBag.thirdPatyAPI[1].ClientId",
            "q_secret": "@ViewBag.thirdPatyAPI[1].ClientSecret"
        }];

        var UpdatedToken = function () {
            var refresh_token = $('#txt_refresh_token').val();
            var access_token = $('#txt_access_token').val();
            var id_token = $('#txt_id_token').val();
            let TokenId = "@Model.XeroTokenInfoLink_ref";
            let AgencyID = "@Model.Id";
            let ThirdPartyAccountingApp_ref = "@Model.ThirdPartyAccountingApp_ref";

            var TokenInfoVM = {
                access_token: access_token,
                refresh_token: refresh_token,
                id_token: id_token,
                Id: parseInt(TokenId),
                AgencyID: parseInt(AgencyID),
                ThirdPartyAccountingAppId_ref: parseInt(ThirdPartyAccountingApp_ref)
            }
            postAjaxSync(apiurl + `Xero/UpdateAccessToken`, JSON.stringify(TokenInfoVM), function (response) {
                var r = response;
                if (response != null && response.status == true) {

                    ShowAlertBoxSuccess("Success!", "API token has been updated successfully.", function () {
                        $APITokenupdatepopup.modal('hide');
                        $('#txt_refresh_token').val('');
                        $('#txt_access_token').val('');
                        $('#txt_id_token').val('');});
                }
                else {
                    ShowAlertBoxError("Error while update the token.");
                }
            });
    }
    var LoadAuthenticationWindow = function (type) {
        var pClient = {
            Id: "@Model.Id",
            ThirdPartyAccountingApp_ref: type
        }
        getAjaxSync(`/Integration/GenerateAuthorizationPromptUrl`, pClient, function (response) {
            if (response.Status === "Success") {
                window.location.href = response.url;
            }

        });

    }


    const totalScopsXero = [
        { data: "profile", select: true },
        { data: "openid", select: true },
        { data: "email", select: true },

        { data: "offline_access", select: true },
        { data: "accounting.reports.read", select: true },
        { data: "accounting.transactions", select: true },
        { data: "accounting.transactions.read", select: true },

        { data: "accounting.reports.tenninetynine.read", select: false },
        { data: "accounting.budgets.read", select: true },
        { data: "accounting.journals.read", select: true },
        { data: "accounting.settings", select: true },
        { data: "accounting.settings.read", select: true },
        { data: "accounting.contacts", select: false },
        { data: "accounting.contacts.read", select: false },
        { data: "accounting.attachments", select: false },
        { data: "accounting.attachments.read", select: false },
        { data: "assets", select: false },
        { data: "assets.read", select: false },
        { data: "files", select: false },
        { data: "files.read", select: false },
        { data: "payroll.employees", select: false },

        { data: "payroll.employees.read", select: false },
        { data: "payroll.payruns", select: false },
        { data: "payroll.payruns.read", select: false },
        { data: "payroll.payslip", select: false },
        { data: "payroll.payslip.read", select: false },
        { data: "payroll.settings", select: false },
        { data: "payroll.settings.read", select: false },

        { data: "payroll.timesheets", select: false },
        { data: "payroll.timesheets.read", select: false },

    ];
    $(document).ready(function () {
             var IsTokenUpdated = "@Session["IsTokenUpdated"]";
            HidelottieLoader();

            $(".readonly")[0].setAttribute("readonly", "");
            var checkParty = "@Model.ThirdPartyAccountingApp_ref";


            if (checkParty == "2") {
                $(".qbookselect").select2({ maximumSelectionLength: 10, allowClear: false });

                $("#APIClientSecret")[0].value = apidetails[1].q_secret;
            }
            else {
                $(".divxeroscopeoption").select2({ maximumSelectionLength: 50, allowClear: false });

            }

            //api scope problem



            const quickBooksScops = [
                { data: "com.intuit.quickbooks.accounting", select: true },
                { data: "com.intuit.quickbooks.payment", select: false },
                { data: "openid", select: true }
            ];

            const selected = "@Model.APIScope";
            const thirdPartyService = "@Model.ThirdPartyAccountingApp_ref";



            if (selected == "" && thirdPartyService=="1")
            totalScopsXero.map(ele => $(".divxeroscopeoption").append(new Option(ele.data, ele.data, ele.select, ele.select)).trigger('change'));


            if (selected!=""&&thirdPartyService == "1") {

                const selectedResult = selected.split(' ').filter(ele => {


                return !ele.includes("quickbooks", 0);
            });


                var fil = totalScopsXero.map(ele => ele.data).filter(ele => !selectedResult.includes(ele));

                selectedResult.map(ele => $(".divxeroscopeoption").append(new Option(ele, ele, true, true)));

                fil.map(ele => $(".divxeroscopeoption").append(new Option(ele, ele, false, false)));


            }


            if (selected == "" && thirdPartyService == "2") {
                quickBooksScops.map(ele => $(".qbookselect").append(new Option(ele.data, ele.data, ele.select, ele.select)).trigger("change"));
            }

            if (selected != "" && thirdPartyService == "2") {

                var selectedResult = selected.split(' ');

                if (selectedResult.length > 3) {


                    selectedResult = selectedResult.slice(0, 3);

                }

                quickBooksScops.forEach(function (i) {
                    if (jQuery.inArray(i.data, selectedResult) !== -1) {
                        i.select = true;
                    }
                })
                quickBooksScops.map(ele => $(".qbookselect").append(new Option(ele.data, ele.data, ele.select, ele.select)));

               }


            /*********************************************************/

            $("#apiclientid").unbind().on("change", function (e) {

                let secret = e.target
                    .selectedOptions[0]
                    .value;

                if (secret == "") {
                    $("#APIClientSecret")[0].value = "";
                }
                else {

                $("#APIClientSecret")[0].value = ("" + secret).split("=")[1];
                }
            });

            if (document.getElementById("xeroIDFetch")) {

                $("#xeroIDFetch").unbind().on("click", function (e) {
                    e.preventDefault();
                    const xerioID = $("#XeroID")[0];
                    const xeroContect = $("#XeroContactIDforProvenCfo")[0];
                    const xeroShortCode = $("#XeroShortCode")[0];
                    const clientName = $("#ClientName")[0].value;
                    const isSelected = $("#apiclientid")[0].value != "0";
                    const apiclientId = $("#apiclientid")[0].value.split("=")[0];
                    const secret = $("#apiclientid")[0].value.split("=")[1];


                    if (clientName != null && clientName != "" && isSelected) {

                        $.ajax(`/Client/GetXeroRelatedInfo?agencyName=${encodeURIComponent(clientName)}&clientId=${apiclientId}&clientSecret=${secret}`, {
                            method: "GET",
                            contentType: "application/json",
                            complete: function (res) {
                                if (res.status != 200) {
                                    ShowAlertBoxError("Unable to get Xero Details!");
                                    return;
                                }

                                if (res.responseJSON.Status=="Error") {

                                if (res.responseJSON.ErrorMessage != "") {
                                    ShowAlertBoxError(res.responseJSON.ErrorMessage);
                                    return;
                                    }
                                }
                                xerioID.value = res.responseJSON.XeroID;
                                xeroShortCode.value = res.responseJSON.XeroShortCod;
                                xeroContect.value = res.responseJSON.XeroContectInfo;
                            }
                        });
                    } else {
                        ShowAlertBoxError("Select the API client Id or Client Name is  not selected!");
                    }



                });
            }

            if (IsTokenUpdated != null && IsTokenUpdated === 'true') {
                ShowAlertBoxSuccess("Success", "Authentication succesfull!");
                IsTokenUpdated = 'false';
            }

            //Toggle data sync option.only one need to be selected at one time.
            ToggleDataSyncOption();


        });


    function ToggleDataSyncOption() {

            var plaid = $("#Plaid_Enabled")[0];
            var automation = $("#EnableAutomation")[0];

            var isAutomationTrue = "@Model.EnableAutomation";
            var isPlaidTrue = "@Model.Plaid_Enabled";

            if (isAutomationTrue != "False" && isPlaidTrue != "False") {
                isPlaidTrue = "False";
        }
        var _toggle_state = [{ plaid: isPlaidTrue != "False" ? true : false, ele: plaid }, { automation: isAutomationTrue != "False" ? true : false, ele: automation }];

        var toggle = function (e) {
                let ele = e.target;
                if (ele.getAttribute("id") == "Plaid_Enabled" && _toggle_state[0].plaid == false) {
                        _toggle_state[0].plaid = true;
                    $(_toggle_state[0].ele).click();
                    if (_toggle_state[1].automation == true) { $(_toggle_state[1].ele).click(); _toggle_state[1].automation == false }

                } else {
                    if (_toggle_state[0].plaid == true) {
                        $(_toggle_state[0].ele).click();
                        _toggle_state[0].plaid == false;

                    }
                    if (_toggle_state[1].automation == true) {
                        _toggle_state[1].automation = false;
                        $(_toggle_state[1].ele).click();


                    } else {

                        _toggle_state[1].automation = true;
                        $(_toggle_state[1].ele).click();

                    }
                }
            }
            plaid.addEventListener("click", toggle);
            automation.addEventListener("click", toggle);
    }

    $('input[type=radio][name=ThirdPartyAccountingApp_ref]').change(function () {
           const selected = "@Model.APIScope";
            if (this.checked && this.value == '1') {
                $("#xeroshort").show();
                $("#xerocrm").show();
                $("#xero").show();
                $("#xerocontact").show();
                $('#divxeroscopeoption').removeClass('d-none');
                $(".divxeroscopeoption").select2({ maximumSelectionLength: 50, allowClear: false });

                $("#apiclientid")[0].children[0].setAttribute("value", `${apidetails[0].xero_apiclientId}=${apidetails[0].xero_secret}`);
                $("#apiclientid")[0].children[0].innerHTML = apidetails[0].xero_apiclientId;


                if ($("#apiclientid")[0].selectedOptions[0]
                    .value != "=") {
                    $("#APIClientSecret")[0].value = apidetails[0].xero_secret;

                }
                    $("#quickbookcompany").hide();
                $("#divQuickbookscopeoption").hide();
                $("#EnableAutomation").prop("disabled", false);


                    if ($(".divxeroscopeoption")[0].children.length==0)
                    totalScopsXero.map(ele => $(".divxeroscopeoption").append(new Option(ele.data, ele.data, ele.select, ele.select)).trigger('change'));

            }
            else {
                $('#EnableAutomation').prop('checked', true);
                $("#xeroshort").hide();
                $("#xerocontact").hide();
                $("#xero").hide();
                $('#divxeroscopeoption').addClass('d-none');

                $("#divQuickbookscopeoption").show();
                $(".qbookselect").select2({ maximumSelectionLength: 10, allowClear: false });


                $('#EnableAutomation').trigger('click');
                $("#EnableAutomation").prop("disabled", true);
                $('#XeroScopeArray').val();
                $("#quickbookcompany").show();


                $("#apiclientid")[0].children[0].setAttribute("value", `${apidetails[1].q_clientId}=${apidetails[1].q_secret}`);
                $("#apiclientid")[0].children[0].innerHTML = apidetails[1].q_clientId;

                if ($("#apiclientid")[0].selectedOptions[0]
                    .value != "=") {
                $("#APIClientSecret")[0].value = apidetails[1].q_secret;
                }



                const quickBooksScops = [
                    { data: "com.intuit.quickbooks.accounting", select: true },
                    { data: "com.intuit.quickbooks.payment", select: false },
                    { data: "openid", select: true }
                ];

                if ($(".qbookselect")[0].children.length<2)
                    quickBooksScops.map(ele => $(".qbookselect").append(new Option(ele.data, ele.data, ele.select, ele.select)));


            }

        });




    $('#resetValue').on('click', function () {
        $('#txt_refresh_token').val('');
        $('#txt_access_token').val('');
        $('#txt_id_token').val('');

    });

</script>


}





