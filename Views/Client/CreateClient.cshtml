@model ProvenCfoUI.Models.CreateClientVM
@{
    ViewBag.Title = "CreateClient";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



@if (ViewData.ModelState.IsValid)
{
    if (@ViewBag.Name != null)
    {
        <b>
            ClientName : @ViewBag.ClientName<br />
            Email : @ViewBag.Email<br />
            PhoneNumber : @ViewBag.PhoneNumber<br />
            Address : @ViewBag.Address<br />
            ContactPersonName : @ViewBag.ContactPersonName
        </b>
    }
}

<script>
    // document.getElementById("clientExist").style.display = "none";
</script>


@using (Html.BeginForm("CreateClient", "Client", FormMethod.Post))
{

    @Html.ValidationSummary(true)

    <div class="card">
        <div class="card-body overflow-hidden">
            @if (@ViewBag.ErrorMessage != null)
            {
                @Html.Hidden("CreateOrUpdate", (object)@ViewBag.ErrorMessage, new { @id = "CreateOrUpdate" });
            }
            @if (@ViewBag.Message != null)
            {
                <div class="alert alert-success mb-4">
                    <p class="mb-0">@ViewBag.Message</p>
                </div>
            }
            @if (Model.Id == null || Model.Id == 0)
            {
                <h3 class="font-weight-normal fs-2 fs-md-3 mb-0 border-bottom pb-2">Create Client </h3>
            }
            else
            {
                <h3 class="font-weight-normal fs-2 fs-md-3 mb-0 border-bottom pb-2">Edit Client </h3>
            }

            <div class="row mt-4">
                <div class="col-12">
                    <form method="post" action="createclient">
                        <div class="row form-group custom-form-width">
                            <div class="col-12 col-lg-8 col-xl-5">
                                <div class="row align-items-center form-group">
                                    @Html.HiddenFor(x => x.Id, "id")
                                    @Html.HiddenFor(x => x.Email, "Email")
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-create-name" class="mb-0">Client Name</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.EditorFor(model => model.ClientName, new { htmlAttributes = new { @class = "form-control", onfocusout = "CheckExistValidation()" } })
                                        @*@Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })*@
                                        <span class="text-danger field-validation-error" data-valmsg-for="ClientName" data-valmsg-replace="true"><span id="clientExist" class=""></span></span>
                                    </div>
                                </div>
                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0"> Entity Name</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.DropDownListFor(model => model.BillableEntityId, new SelectList(Model.billableEntitiesList, "Id", "EntityName"), "Select Entity", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.BillableEntityId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0"> Team</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.DropDownListFor(model => model.TeamId, new SelectList(Model.TeamList, "Id", "TeamName"), "Select team", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.TeamId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0"> City</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.EditorFor(model => model.CityName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CityName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0"> XeroScope</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">



                                        @if (Model.Id == null || Model.Id == 0)
                                        {

                                            @Html.DropDownListFor(m => m.XeroScope, new List<SelectListItem>() { new SelectListItem { Text = "projects.read", Value = "projects.read" },
                                            new SelectListItem { Text = "accounting.transactions", Value = "accounting.transactions" },
                                            new SelectListItem { Text = "accounting.transactions.read", Value = "accounting.transactions.read" },
                                            new SelectListItem { Text = "accounting.reports.read", Value = "accounting.reports.read" },
                                            new SelectListItem { Text = "accounting.reports.tenninetynine.read", Value = "accounting.reports.tenninetynine.read" },
                                            new SelectListItem { Text = "projects", Value = "projects" },
                                            new SelectListItem { Text = "projects", Value = "projects" },
                                            new SelectListItem { Text = "projects", Value = "projects" },
                                            new SelectListItem { Text = "projects", Value = "projects" },
                                            new SelectListItem { Text = "projects", Value = "projects" },
                                            new SelectListItem { Text = "projects", Value = "projects" },
                                            new SelectListItem { Text = "projects", Value = "projects" },
                                            new SelectListItem { Text = "projects", Value = "projects" },
                                            new SelectListItem { Text = "projects", Value = "projects" },
                                            new SelectListItem { Text = "projects", Value = "projects" },
                                            new SelectListItem { Text = "projects", Value = "projects" },
                                            }, new { @class = "selectpicker form-control", @multiple = "multiple" })
                                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                            @*<select name="XeroScope" class="selectpicker form-control" id="multiple-select" multiple="multiple" data-options='{"placeholder":"Select scope"}'>
                <option>projects.read</option>
                <option>projects</option>
                <option>accounting.transactions</option>
                <option>accounting.transactions.read</option>
                <option>accounting.reports.read</option>
                <option>accounting.reports.tenninetynine.read</option>
                <option>accounting.budgets.read</option>
                <option>accounting.journals.read</option>
                <option>accounting.settings</option>
                <option>accounting.settings.read</option>
                <option>accounting.contacts</option>
                <option>accounting.contacts.read</option>
                <option>accounting.attachments</option>
                <option>accounting.attachments.read</option>
                <option>assets</option>
                <option>assets.read</option>
                <option>files</option>
                <option>files.read</option>
                <option>payroll.employees</option>
                <option>payroll.employees.read</option>
                <option>payroll.payruns</option>
                <option>payroll.payruns.read</option>
                <option>payroll.payslip</option>
                <option>payroll.payslip.read</option>
                <option>payroll.settings</option>
                <option>payroll.settings.read</option>
                <option>payroll.timesheets</option>
                <option>payroll.timesheets.read</option>

            </select>*@
                                            @Html.ValidationMessageFor(model => model.XeroScope, "", new { @class = "text-danger" })
                                        }
                                        else
                                        {

                                            @Html.EditorFor(model => model.XeroScope, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.XeroScope, "", new { @class = "text-danger" })
                                        }

                                    </div>
                                </div>
                                    @*<div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0"> XeroScope</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.XeroScope, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.XeroScope, "", new { @class = "text-danger" })
                                        </div>
                                    </div>*@
                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0"> XeroClientID</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.XeroClientID, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.XeroClientID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0"> XeroClientSecret</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.XeroClientSecret, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.XeroClientSecret, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-create-phonenumber" class="mb-0">State</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.DropDownListFor(model => model.StateId, new SelectList(Model.StateList, "Id", "StateName"), "Select state", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email" class="mb-0"> XeroID</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.XeroID, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.XeroID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="" class="mb-0">Start Date</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.StartDateText, new { htmlAttributes = new { @class = "form-control datetimepicker", id = "datepicker" } })
                                            @*@Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control datetimepicker", id = "datepicker", type = "date", placeholder = "m-d-Y" } })*@


                                        </div>
                                    </div>

                                    <div class="row align-items-center form-group">
                                        @*<div class="col-12 col-md-4 col-lg-3 col-xl-4">
                <label for="split-create-phonenumber" class="mb-0">Address </label>
            </div>
            <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>*@
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                            <label for="split-login-email">Status</label>
                                        </div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.DropDownListFor(m => m.Status, new List<SelectListItem>() { new SelectListItem { Text = "Active", Value = "Active" }, new SelectListItem { Text = "Inactive", Value = "Inactive" } }, new { @class = "form-control text-box single-line" })
                                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="row align-items-center form-group">
                                        @*<div class="col-12 col-md-4 col-lg-3 col-xl-4">
                <label for="split-create-phonenumber" class="mb-0">Contact Person Name </label>
            </div>
            <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                @Html.EditorFor(model => model.ContactPersonName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContactPersonName, "", new { @class = "text-danger" })
            </div>*@
                                    </div>



                                    <div class="row align-items-center form-group">
                                        <div class="col-12 col-md-4 col-lg-3 col-xl-4"></div>
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @if (Model.Id == null || Model.Id == 0)
                                            {
                                                <button class="btn btn-primary" type="submit" id="btnCreate" name="submit" href="@Url.Action("CreateClient", "Client")">Create</button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-primary" type="submit" id="btnCreate" name="submit" href="@Url.Action("CreateClient", "Client")">Update</button>
                                            }
                                            <input type="button" value="Cancel" class="btn btn-primary ml-2" onclick="location.href='@Url.Action("ClientList", "Client")'" />
                                        </div>

                                    </div>
                                </div>
                        </div>
                    </form>
                </div>
            </div>

        </div>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>


        $("#clientExist").addClass('d-none');
        $("#clientExist").html('');
        $('#datepicker').attr('data-options', '{"dateFormat":"m/d/Y"}');


        function CheckExistValidation() {
            if ($("#ClientName").val() === "" && $("#clientExist").html() !== "") {
                $('#clientExist').hide();
                $("#clientExist").addClass('d-none');
                $("#clientExist").html('');
            }
        }
        // document.getElementById("clientExist").style.display = "none";
        var msg = $('#CreateOrUpdate') != undefined ? $('#CreateOrUpdate').val() : '';

        if (msg != undefined && msg != '' && msg == "Created") {
            AddAlertRole();
            $('#CreateOrUpdate').val('');
        }
        else if (msg != undefined && msg != '' && msg == "Updated") {
            UpdateAlertRole();
            $('#CreateOrUpdate').val('');
        }
        else if (msg != undefined && msg != '' && msg == "Exist") {
            $('#clientExist').show();
            $("#clientExist").removeClass('d-none');
            $("#clientExist").html('This Client Agency name has been already taken.');
            $('#CreateOrUpdate').val('');
        }
        function AddAlertRole() {
            sweetAlert
                ({
                    title: "Created!",
                    text: "New Client  created successfully!",
                    type: "success"
                },
                    function () {
                        window.location.href = '/Client/ClientList'
                    });
        }
        function UpdateAlertRole() {
            sweetAlert
                ({
                    title: "Updated!",
                    text: "Client  updated successfully!",
                    type: "success"
                },
                    function () {
                        window.location.href = '/Client/ClientList'
                    });
        }

    </script>


}





