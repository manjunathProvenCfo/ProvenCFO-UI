@using System.Globalization;

@model IEnumerable<Proven.Model.reconciliationVM>
@{ ViewBag.Title = "ReconciliationMain";
    Layout = "~/Views/Shared/_Layout.cshtml"; }

@Styles.Render("~/bundles/css/twilio-chat")

<div class="row">
    @Html.Hidden("XeroConnectionStatus", (object)@ViewBag.XeroConnectionStatus, new { @Id = "XeroConnectionStatus" })
    @Html.Hidden("XeroStatusMessage", (object)@ViewBag.XeroStatusMessage, new { @Id = "XeroStatusMessage" })
    <div class="col-md-12" id="divTable">
        <div class="card mb-3">
            <div class="card-header">
                <div class="row align-items-center justify-content-between">
                    <div class="col-6">
                        <div class="row align-items-center">
                            <div class="d-flex align-items-center ml-2" id="tabNotinBooks" onclick="Tabclick(event,0); ">
                                <span class="fas fa-book"></span>
                                <h6 class="mb-0 ml-2"><a href="@Url.Action("GetReconcilation", "Reconciliation", new { Type = "Not in Books" })">Not in Books</a></h6>
                                <span class="badge badge-pill badge-soft-danger ml-3" id="lblNotInBooksCount">0</span>
                            </div>

                            <div class="d-flex align-items-center ml-2" id="tabNotinBanks" onclick="Tabclick(event,1);">
                                <span class="far fa-credit-card"></span>
                                <h6 class="mb-0 ml-2"><a href="@Url.Action("GetReconcilation", "Reconciliation", new { Type = "Not in Banks" })">Not in Banks</a></h6>
                                <span class="badge badge-pill badge-soft-danger ml-3" id="lblNotInBanksCount">0</span>
                            </div>

                        </div>
                    </div>



                    <div class="col-6 col-sm-auto ml-auto text-right pl-0">

                        <div class="d-flex align-items-center">
                            <div class="d-flex">

                                @if (ViewBag.IsStaffUser == true)
                                {
                                    <button class="btn btn-falcon-default btn-sm mx-1" id="email" type="button" title="Email" data-toggle="modal" data-target="#myModal">
                                        <span class="fa fa-envelope" data-fa-transform="shrink-3 down-2 m-2 p"></span><span class="d-none d-sm-inline-block "></span>
                                    </button>


                                }
                                <input type="hidden" value="@ViewBag.AccountingPackage" id="hdAccointingPackage" />

                                <button class="btn btn-falcon-default btn-sm mx-1" id="btnImportReconcilition" type="button" title="Import">
                                    <span class="" data-fa-transform="shrink-3 down-2 m-2 p"></span><span class="d-none d-sm-inline-block ">Import</span>
                                </button>

                                <button class="btn btn-falcon-default btn-sm mx-1" id="ibulkupdate" type="button" title="Bulk Update">
                                    <span class="" data-fa-transform="shrink-3 down-2 m-2 p"></span><span class="d-none d-sm-inline-block ">Bulk Update</span>
                                </button>

                                @if (ViewBag.IsStaffUser == true && ViewBag.AccountingPackage != 2)
                                {
                                    <button class="btn btn-falcon-default btn-sm mx-1 d-none" id="OnDemandData" type="button" title="Request on-demand data"><span class="fa fa-undo" data-fa-transform="shrink-3 down-2 m-2 p"></span></button>
                                }


                                @if (ViewBag.IsStaffUser == true && ViewBag.AccountingPackage != 2)
                                {
                                    <button class="btn btn-falcon-default btn-sm mx-1 d-none" id="OnDemandDataPlaid" type="button" title="Request on-demand Plaid data"><span class="fa fa-undo" data-fa-transform="shrink-3 down-2 m-2 p"></span></button>
                                }




                                <button class="btn btn-falcon-default btn-sm mx-1 d-none " id="ichat" type="button"><span class="fas fa-comment-dots" data-fa-transform="shrink-3 down-2"></span><span class="d-none d-sm-inline-block "></span></button>
                                <button class="btn btn-falcon-default btn-sm mx-1" id="Filter" type="button" title="Apply filter"><span class="fas fa-filter" data-fa-transform="shrink-3 down-2"></span><span class="d-none d-sm-inline-block "></span></button>
                            </div>


                        </div>





                    </div>
                </div>
            </div>




            <div class="card-body px-0 pt-0">

                <div class="dashboard-data-table table-responsive">
                    <table class="table table-sm table-dashboard fs--1 data-table border-bottom" id="tblreconcilation" data-options='{"responsive":true,"pagingType":"simple","lengthChange":true,"searching":true,"pageLength":8,"columnDefs":[{"targets":[0,8],"orderable":true,"width":10%}],"language":{"info":"_START_ to _END_ Items of _TOTAL_ — <a href=\"#!\" class=\"font-weight-semi-bold\"> A Cherry Blossom <span class=\"fas fa-angle-right\" data-fa-transform=\"down-1\"></span> </a>"},"buttons":["copy","excel"]}'>
                        <thead class="bg-200 text-900">
                            <tr>
                                <th class="no-sort pr-1 align-middle data-table-row-bulk-select">
                                    <div class="custom-control custom-checkbox">
                                        <input class="custom-control-input checkbox-bulk-select" id="checkbox-bulk-purchases-select" onchange="SelectAllClick(this);" type="checkbox" data-checkbox-body="#purchases" data-checkbox-actions="#purchases-actions" data-checkbox-replaced-element="#dashboard-actions" />
                                        <label class="custom-control-label" for="checkbox-bulk-purchases-select"></label>
                                    </div>
                                </th>
                                <th class="sort pr-1 align-middle">Account</th>
                                <th class="sort pr-1 align-middle">Date</th>
                                <th class="sort pr-1 align-middle">Who</th>
                                <th class="sort pr-1 align-middle">Description</th>
                                <th class="sort pr-1 align-middle">Amount</th>



                                @if (TempData["Action"] != null && ((List<Proven.Model.ReconcilationActionOptionVM>)TempData["Action"]).Count > 0 && ViewBag.isvisibleGlAccount == true)
                                {
                                    <th class="sort pr-10 align-center "> Action</th>
                                }

                                @if (TempData["GLAccounts"] != null && ((List<Proven.Model.XeroGlAccountVM>)TempData["GLAccounts"]).Count > 0 && ViewBag.isvisibleGlAccount == false)
                                {
                                    <th class="sort pr-1 align-middle">GL Account</th>
                                } @*<th></th>*@

                                @if (ViewBag.IsBankRuleVisible == true && ViewBag.isvisibleGlAccount == false)
                                {
                                    <th class="sort pr-10 align-center ">Rule</th>
                                }


                                @if (TempData["TrackingCategories"] != null && ViewBag.isvisibleGlAccount == false)
                                {
                                    foreach (var tcgroup in (List<Proven.Model.XeroTrackingOptionGroupVM>)TempData["TrackingCategories"])
                                    {
                                        <th class="sort pr-10 align-center ">@tcgroup.Name</th>
                                    }

                                }

                                <th class="top no-sort align-middle data-table-row-action"></th>

                            </tr>
                        </thead>
                        <tbody id="purchases">
                            @foreach (var item in (List<Proven.Model.reconciliationVM>)TempData["ReconcilationData"])
                            {
                                <tr class="btn-reveal-trigger cursor-pointer">
                                    <td class="align-middle">
                                        <div class="custom-control custom-checkbox">
                                            <input class="custom-control-input checkbox-bulk-select-target" onclick="SelectClick(this);" type="checkbox" id="@item.id" value="@item.Selected" />

                                            <label class="custom-control-label" for="@item.id"></label>
                                        </div>
                                    </td>
                                    <td class="sort pr-1 align-middle col-xs-2"> @Html.DisplayFor(modelItem => item.account_name)</td>
                                    <td class="sort pr-1 align-middle col-xs-1">@Html.DisplayFor(modelItem => item.date)</td>
                                    <td class="sort pr-1 align-middle col-xs-1" data-toggle="tooltip" title="@item.description">@Html.DisplayFor(modelItem => item.description_display) </td>
                                    <td class="sort pr-1 align-middle col-xs-2" data-toggle="tooltip" title="@item.reference">@Html.DisplayFor(modelItem => item.reference_display)</td>
                                    @if (item.amount < 0)
                                    {
                                        <td class="sort pr-1 align-middle text-danger col-xs-1">@Convert.ToString(Html.DisplayFor(modelItem => item.amount)).Replace("-", "")</td>

                                    }
                                    else
                                    {
                                        <td class="sort pr-1 align-middle col-xs-1"> @Html.DisplayFor(modelItem => item.amount)</td>
                                    }

                                    @if (TempData["GLAccounts"] != null && ((List<Proven.Model.XeroGlAccountVM>)TempData["GLAccounts"]).Count > 0 && ViewBag.isvisibleGlAccount == false)
                                    {
                                        <td class="sort pr-1 align-middle col-xs-1">
                                            <div class="row justify-content-between">
                                                @if (ViewBag.IsStaffUser == true)
                                                {
                                                    <div class="col-auto lastmodified" id="Gltoggel" data-toggle="tooltip" data-html="true" utc="@item.GlAccountModifiedDateUTC" ModifiedBy="@item.GlAccountModifiedBy" title="No Modification yet.">
                                                        @Html.DropDownListFor(modelItem1 => item.gl_account_ref, new SelectList((List<Proven.Model.XeroGlAccountVM>)TempData["GLAccounts"], "Id", "Name", item.gl_account_ref), "Pick Account", new { @class = "form-control selectpicker glAccountDD", @onchange = "javascript:onChangeglAccount('" + item.id + "',event)", style = "width: 225px;", @utcdate = string.Format(CultureInfo.InvariantCulture, "{0:dd MMM yyyy hh:mm:ss tt}", @item.GlAccountModifiedDateUTC), @ModifiedBy = @item.GlAccountModifiedBy })
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="col-auto">
                                                        @Html.DropDownListFor(modelItem1 => item.gl_account_ref, new SelectList((List<Proven.Model.XeroGlAccountVM>)TempData["GLAccounts"], "Id", "Name", item.gl_account_ref), "Pick Account", new { @class = "form-control selectpicker glAccountDD", @onchange = "javascript:onChangeglAccount('" + item.id + "',event)", style = "width: 225px;" })
                                                    </div>
                                                }
                                            </div>

                                        </td>
                                    }
                                    @if (ViewBag.IsBankRuleVisible == true && ViewBag.isvisibleGlAccount == false)
                                    {
                                        <td class="sort pr-1 align-middle col-xs-1">
                                            <div class="row justify-content-between">
                                                <div class="col-auto">
                                                    @Html.DropDownListFor(modelItem1 => item.rule, new SelectList((List<SelectListItem>)TempData["BankRule"], "Value", "Text", item.rule), "Set Rule", new { @class = "form-control selectpicker glAccountDD", @onchange = "javascript:onChangeBankRule('" + item.id + "',event)", style = "width: 160px;" })
                                                </div>
                                            </div>
                                        </td>
                                    }

                                    @if (TempData["Action"] != null && ((List<Proven.Model.ReconcilationActionOptionVM>)TempData["Action"]).Count > 0 && ViewBag.isvisibleGlAccount == true)
                                    {
                                        <td class="sort pr-1 align-middle col-xs-1">
                                            <div class="row justify-content-between">
                                                @if (item.ActionModifiedBy != null && ViewBag.IsStaffUser == true)
                                                {
                                                    <div class="col-auto lastmodified" id="Actiontoggel" data-toggle="tooltip" data-html="true" title="No Modification yet.">

                                                        @Html.DropDownListFor(modelItem1 => item.ref_ReconciliationAction, new SelectList((List<Proven.Model.ReconcilationActionOptionVM>)TempData["Action"], "Id", "ActionName", item.ref_ReconciliationAction), "Pick Action", new { @class = "form-control selectpicker glAccountDD", @onchange = "javascript:onChangeAction('" + item.id + "',event)", style = "width: 225px;", @utcdate = string.Format(CultureInfo.InvariantCulture, "{0:dd MMM yyyy hh:mm:ss tt}", @item.ActionModifiedDateUTC), @ModifiedBy = @item.ActionModifiedBy })
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="col-auto">
                                                        @Html.DropDownListFor(modelItem1 => item.ref_ReconciliationAction, new SelectList((List<Proven.Model.ReconcilationActionOptionVM>)TempData["Action"], "Id", "ActionName", item.ref_ReconciliationAction), "Pick Action", new { @class = "form-control selectpicker glAccountDD", @onchange = "javascript:onChangeAction('" + item.id + "',event)", style = "width: 225px;" })
                                                    </div>
                                                }
                                            </div>
                                        </td>
                                    }

                                    @if (TempData["TrackingCategories"] != null && ViewBag.isvisibleGlAccount == false)
                                    {
                                        int count = 0;
                                        foreach (var tcgroup in (List<Proven.Model.XeroTrackingOptionGroupVM>)TempData["TrackingCategories"])
                                        {

                                            <td class="sort pr-1 align-middle col-xs-1">
                                                <div class="row justify-content-between">
                                                    <div class="col-auto">
                                                        @if (count == 0)
                                                        {
                                                            @Html.DropDownListFor(modelItem => item.tracking_category_ref, new SelectList(tcgroup.Options, "Id", "Option", item.tracking_category_ref), "Select " + @tcgroup.Name, new { @class = "form-control selectpicker glAccountDD", @onchange = "javascript:onChangeTc('" + item.id + "',event)", style = "width: 180px;" }) }
                                                        else
                                                        {
                                                            @Html.DropDownListFor(modelItem => item.additional_tracking_category_ref, new SelectList(tcgroup.Options, "Id", "Option", item.additional_tracking_category_ref), "Select " + @tcgroup.Name, new { @class = "form-control selectpicker glAccountDD", @onchange = "javascript:onChangeAditinalTc('" + item.id + "',event)", style = "width: 180px;" })}

                                                    </div>
                                                </div>
                                            </td>
                                            count++;
                                        }

                                    }
                                    <td id="tdComments" class="no-sort pr-1 align-middle white-space-nowrap">
                                        @if (item.Iscurrent_user_mentioned == true)
                                        {
                                            <button id="btnComment" data-id="@item.id" class="btn btn-link btn-sm btn-reveal mr-3" type="button" data-boundary="html" aria-expanded="false">
                                                <span class="fas fa-comment fs--1"></span>
                                            </button>
                                        }
                                        else
                                        {
                                            <button id="btnComment" data-id="@item.id" class="btn btn-link btn-sm btn-reveal mr-3" type="button" data-boundary="html" aria-expanded="false">

                                                @if (item.has_twilio_conversation == true)
                                                {
                                                    <span class="far fa-comment fs--1"></span>

                                                }
                                                else
                                                {
                                                    <span class="far fa-comment fs--1 text-dark"></span>
                                                }


                                            </button>
                                        }

                                    </td>
                                </tr>
                            }

                        </tbody>

                    </table>

                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4 p-l-2 d-none" id="divChat">
        @Html.Partial("_communicationReconcilation", true)
    </div>
    <div class="col-md-4 p-l-2 d-none" id="divFilter">
        @Html.Partial("_reconcilationFilter", true)
    </div>
    <div class="col-md-4 p-l-2 d-none" id="divBulkUpdate">
        @Html.Partial("_reconcilationBulkupdate", true)

    </div>
    @if (ViewBag.AccountingPackage == 2)
    {
        @Html.Partial("ReconciliationQuickBookFileUploaderPartial")
    }
    else
    {
        @Html.Partial("_ReconciliationFileUploaderPartial")
    }
    @Html.Partial("_ReconcilationEmail", true)
    @Html.Partial("_ReconcilationEditComment", true)
</div>

<style>
    .text-dark {
        color: #0b1727 !important;
    }

    li.select2-results__option {
        font-size: 13px;
    }
</style>



@section Scripts {
    @Scripts.Render("~/bundles/js/table")
    <script src="~/assets/lib/emojionearea/emojionearea.js"></script>
    <link rel="stylesheet" href=" https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />
    @Scripts.Render("~/bundles/lib/twilio-chat-lib")
    @Scripts.Render("~/bundles/js/kanban")
    @Scripts.Render("~/bundles/js/reconcilation-comments")
    @Scripts.Render("~/bundles/js/imports")
    @Scripts.Render("~/bundles/js/toastr")
    <script>
        $(document).ready(function () {
            chat.userId = "@ViewBag.UserId";
            chat.userEmail = "@ViewBag.UserEmail";
            //Comment Icons
            chat.type = 1;
            chat.forReconciliationIconColor = true;
            createTwilioClient();
            $(document).on('click', ".paginate_button", function () {

                let pageIndex = Number($(this).children('a').data("dt-idx"));
                $(".glAccountDD").each(function (index, element) {
                   
                    let itemIndex = pageIndex + "" + index;
                    $(this).attr('id', 'item_gl_account_ref' + itemIndex);
                    if ($(element).attr('data-select2-id') == null || $(element).attr('data-select2-id') == undefined) { $(element).select2(); }
                    //$(element).select2();
                });
                $('.lastmodified').tooltip();
                lastModify();
               
            })
            $(document).on('click', ".custom-select", function () {
              
                $(".glAccountDD").each(function (index, element) {
                   
                    $(this).attr('id', 'item_gl_account_ref' + index);
                    if ($(element).attr('data-select2-id') == null || $(element).attr('data-select2-id') == undefined) { $(element).select2(); }
                });
                $('.lastmodified').tooltip();
                lastModify();
            })

            $(document).on('click', ".sorting_asc", function () {
                $(".glAccountDD").each(function (index, element) {

                    $(this).attr('id', 'item_gl_account_ref' + index);
                    if ($(element).attr('data-select2-id') == null || $(element).attr('data-select2-id') == undefined) { $(element).select2(); }
                });
                $('.lastmodified').tooltip();
                lastModify();
            })

            $(document).on('click', ".sorting_desc", function () {
                $(".glAccountDD").each(function (index, element) {

                    $(this).attr('id', 'item_gl_account_ref' + index);
                    if ($(element).attr('data-select2-id') == null || $(element).attr('data-select2-id') == undefined) { $(element).select2(); }
                });
                $('.lastmodified').tooltip();
                lastModify();
            })

            $(".glAccountDD").each(function (index, element) {              
                $(this).attr('id', 'item_gl_account_ref' + index);
                $(element).select2();
            });


            //$(document).on('click', ".paginate_button", function () {
                
            //    Array.prototype.forEach.bind($(".col-auto"))(ele => {
            //        var str = Array.prototype.filter.bind(ele.children)(e => e.nodeName == 'SPAN');

                   
            //        if (str.length > 1) {

            //            for (let index = 1; index < str.length; index++) {
            //                str[index].style.display = "none";
            //            }


            //        }
            //    });


            //    $(".glAccountDD").select2()
            //})


            //$(document).on('click', ".custom-select", function () {

            //    Array.prototype.forEach.bind($(".col-auto"))(ele => {
            //        var str = Array.prototype.filter.bind(ele.children)(e => e.nodeName == 'SPAN'); if (str.length > 1) {

            //            for (let index = 1; index < str.length; index++) {
            //                str[index].style.display = "none";
            //            }


            //        }
            //    });



            //    $(".glAccountDD").select2()
            //})


        });


        var myParam = location.search.split('yes=')[1];

        if (myParam == "1") {
            $("#email").show();
            $("#btnImportReconcilition").show();
        }

    </script>

    <script>
         Dropzone.autoDiscover = false;
        var totalSum1;
        var totalSum2;
        function drawnCallbackTblReconciliation(settings) {
            alert('')
        }
        function SelectAllClick(e) {
            if (e.checked == false) {
                sessionStorage.removeItem('SelectedRecords');
                sessionStorage.removeItem('UnSelectedRecords');
                $('.checkbox-bulk-select-target').closest("tr").removeClass('bg-300');

            }

            EnableSelectedBulkUpdateButton();

        }
        function SelectClick(e) {

            if (e.checked) {
                var UnSelectedRecords = isEmptyOrBlank(sessionStorage.getItem('UnSelectedRecords')) === false ? sessionStorage.getItem('UnSelectedRecords')?.split(',') : [];


                UnSelectedRecords = UnSelectedRecords.filter(function (x) {
                    return x != e.id
                });
                sessionStorage.setItem('UnSelectedRecords', UnSelectedRecords);

                var SelectedItems = isEmptyOrBlank(sessionStorage.getItem('SelectedRecords')) === false ? (sessionStorage.getItem('SelectedRecords') + ',' + e.id) : e.id;
                sessionStorage.setItem('SelectedRecords', SelectedItems);

            }
            else {

                //Remove unselected items from selected Items List
                var SelectedItems = isEmptyOrBlank(sessionStorage.getItem('SelectedRecords')) === false ? sessionStorage.getItem('SelectedRecords')?.split(',') : [];
                SelectedItems = SelectedItems.filter(function (x) {
                    return x != e.id
                });

                sessionStorage.setItem('SelectedRecords', SelectedItems);

                var UnSelectedItems = isEmptyOrBlank(sessionStorage.getItem('UnSelectedRecords')) === false ? (sessionStorage.getItem('UnSelectedRecords') + ',' + e.id) : e.id;
                sessionStorage.setItem('UnSelectedRecords', UnSelectedItems);


            }
                  EnableSelectedBulkUpdateButton();
        }

        function onCommentsClick(e, channelUniqueNameGuid) {
            e.preventDefault();
            $('#divFilter').hide();
            $('#divFilter').addClass('d-none');
            $('#divChat').show();
            $('#divChat').removeClass('d-none');
            $('#divTable').addClass('col-md-8').removeClass('col-md-12');
            //let channelUniqueNameGuid = $(this).data().id;
            chat.publicChannelUniqueNameGuid = channelUniqueNameGuid;
            loadChatPage(true, 1);
        }
        function XeroConnectionUpdate() {

            var XConstatus = $('#XeroConnectionStatus');
            $("#OnDemandData").show();
        }
        function reconcilationonstatusDemand(RequestID) {

            var ClientID = $("#ddlclient option:selected").val();

            getAjax(`/Reconciliation/GetXeroOnDemandRequestStatusById?RequestID=${RequestID}`, null, function (response) {

                if (response.Message == "SUCCESS") {
                    sessionStorage.removeItem("NotInBooksData");
                    sessionStorage.removeItem("NotInBanksData");
                    msg = 'Reconciliation data extracted successfully. Please wait for page to refresh.' ;
                    $('#loadertext').text(msg);
                    ShowAlertBoxSuccess("Success!", "Successfully synced with Xero.", function () { window.location.reload(); });
                }
                else if (response.Message == "FAILED")
                {
                    sessionStorage.removeItem("NotInBooksData");
                    sessionStorage.removeItem("NotInBanksData");
                    msg = 'Reconciliation data extracted successfully. Please wait for page to refresh.';
                    $('#loadertext').text(msg);
                    ShowAlertBoxError("Error!", "Sorry, there was a problem getting data from Xero. Please try again later.", function () { window.location.reload(); });
                }
                else {
                    var msg = 'Loading..'
                    switch (response.Message) {
                        case 'New':
                            msg = 'Sent on-demand data extract request.'
                            break;
                        case 'INITIATED':
                            msg = 'Logging  in to Xero...'
                            break;
                        case 'INITIATED 1':
                            msg = 'Logging in to  Xero...'
                            break;
                        case 'WAITING FOR OTP':
                            msg = 'Waiting for OTP to log in to Xero.';
                            break;
                        case 'LOGGED-IN':
                            msg = 'Logged in successfully to Xero.'
                            break;
                        case 'GETTING DATA':
                            msg = 'Reconciliation data extracting for a selected agency. ';
                            break;
                        case 'SUCCESS':
                            msg = 'Reconciliation data extracted successfully. Please wait for page to refresh. ';

                            break;
                        case 'FAILED':
                            msg = 'Error while data extratction from Xero. Please try after some time. ';

                            break;

                        default:
                            msg = response.Message;
                    }
                    $('#loadertext').text(msg);
                    reconcilationonstatusDemand(RequestID);
                }

            })

        }

        function FillterReset() {
            sessionStorage.removeItem('Filter');
            var url = '@Url.Action("ReconciliationMain", "Reconciliation")';
            window.location.href = url;
        }
        function BulkActionCancel() {

            ShowConfirmBoxWarning("Are you sure?", "Do you really want to cancel the bulk action?", "Yes, cancel it!", function (isConfirmed) {
                if (isConfirmed == false)
                    return;
                sessionStorage.removeItem('SelectedRecords');
                sessionStorage.removeItem('UnSelectedRecords');
                var url = '@Url.Action("ReconciliationMain", "Reconciliation")';
                window.location.href = url;
            });

        }
        function FillterReconcilation() {
            var account = $('#filteraccounts').val().join(',');
            var ClientID = $("#ddlclient option:selected").val();
            var fromDate, toDate;
            var filterReconcilationcategories = 0;
            var IsNotinBooks = $('#tabNotinBooks').hasClass('tabselect');
            var type = 'Outstanding Payments';
            if (IsNotinBooks == true) {
                type = 'Unreconciled';
                sessionStorage.setItem('Type', 0);
            }
            else {
                sessionStorage.setItem('Type', 1);
            }

            if ($('#rb1').prop('checked') == true) {
                filterReconcilationcategories = 1;
            }
            else if ($('#rb2').prop('checked') == true) {
                filterReconcilationcategories = 2;
            }
            else if ($('#rb3').prop('checked') == true) {
                filterReconcilationcategories = 3;
            }

            var datepicker = $("#timepicker2").val();
            if (datepicker.includes("to")) {
                this.fromDate = datepicker.substring(0, datepicker.indexOf("to")).trim();
                this.toDate = datepicker.substring(datepicker.indexOf("to") + 2).trim();
            } else {
                this.fromDate = datepicker;
                this.toDate = datepicker;
            }
            var MinAmount = $("#filterMinAmount").val();
            var MaxAmount = $("#filterMaxAmount").val();
            var bankrule = $("#bankrule").val().join(',');
            var TrackingCategories = $("#TrackingCategories").val() != undefined ? $("#TrackingCategories").val().join(',') :'';
            var TrackingCategories_1 = $("#TrackingCategories_1").val() != undefined? $("#TrackingCategories_1").val().join(','):'';
            var pdata = {
                accounts: account,
                dateRangeFrom: this.fromDate,
                dateRangeTo: this.toDate,
                amountMin: MinAmount,
                amountMax: MaxAmount,
                Bankrule: bankrule,
                TrackingCategory1: TrackingCategories,
                TrackingCategory2: TrackingCategories_1,
                FilterType: filterReconcilationcategories,
                AgencyID: ClientID,
                Type: type,
                selectedDate: datepicker
            }
            sessionStorage.setItem('Filter', JSON.stringify(pdata));

            var url = '@Url.Action("GetFilteredReconcilationdata", "Reconciliation", new { accounts = "_accounts",
                              dateRangeFrom = "_dateRangeFrom",
                              dateRangeTo = "_dateRangeTo",
                              amountMin = "_amountMin",
                              amountMax = "_amountMax",
                              Bankrule = "_Bankrule",
                              TrackingCategory1 = "_TrackingCategory1",
                              TrackingCategory2 = "_TrackingCategory2",
                              FilterType = "_FilterType",
                              AgencyID = "_AgencyID",
                              Type = "_Type"
                          })';
            url = url.replace('_accounts', account);
            url = url.replace('_dateRangeFrom', this.fromDate);
            url = url.replace('_dateRangeTo', this.toDate);
            url = url.replace('_amountMin', MinAmount);
            url = url.replace('_amountMax', MaxAmount);
            url = url.replace('_Bankrule', bankrule);
            url = url.replace('_TrackingCategory1', TrackingCategories);
            url = url.replace('_TrackingCategory2', TrackingCategories_1);
            url = url.replace('_FilterType', filterReconcilationcategories);
            url = url.replace('_AgencyID', ClientID);
            url = url.replace('_Type', type);


            url = replaceAll(url, '\&amp;', '&');
            url = replaceAll(url, '#', '%23');
            url = replaceAll(url, '(', '%28');
            url = replaceAll(url, ')', '%29');
            window.location.href = url;
        }

        function LoadFilterData() {
            var filterData = JSON.parse(sessionStorage.getItem('Filter'));
            if (filterData) {
                $('#Filter').css("background-color", "#edf2f9");
                if (filterData.accounts != '' && filterData.accounts.split(',').length > 0) {
                    $('#filteraccounts').val(filterData.accounts.split(',')).trigger('change');
                }
                $("#timepicker2").val(filterData.selectedDate);
                $("#filterMinAmount").val(filterData.amountMin);
                $("#filterMaxAmount").val(filterData.amountMax);
                if (filterData.Bankrule != '' && filterData.Bankrule.split(',').length > 0) {
                    $('#bankrule').val(filterData.Bankrule.split(',')).trigger('change');
                }
                //$("#bankrule").val(filterData.Bankrule.split(','));
                if (filterData.TrackingCategory1 != null && filterData.TrackingCategory1 != '' && filterData.TrackingCategory1.length > 0) {
                    $("#TrackingCategories").val(filterData.TrackingCategory1).trigger('change');
                }
                if (filterData.TrackingCategory2 != null && filterData.TrackingCategory2 != '' && filterData.TrackingCategory2.length > 0) {
                    $("#TrackingCategories_1").val(filterData.TrackingCategory2).trigger('change');
                }
                if (filterData.FilterType == 0) {
                    $('#rb0').prop('checked', true);
                }
                else if (filterData.FilterType == 1) {
                    $('#rb1').prop('checked', true);
                }
                else if (filterData.FilterType == 2) {
                    $('#rb2').prop('checked', true);
                }
                else if (filterData.FilterType == 3) {
                    $('#rb3').prop('checked', true);
                }
            }
        }
        function Tabclick(e, type) {
            sessionStorage.setItem('Type', type);
            if (type == 0) {

                $('#tabNotinBooks').addClass('tabselect');
                $('#tabNotinBanks').removeClass('tabselect');
            }
            else {

                $('#tabNotinBooks').removeClass('tabselect');
                $('#tabNotinBanks').addClass('tabselect');
            }
        }


        function BulkActionReconcilation(CommentText) {
            var GLaccount = $('#BA_filterGLaccounts').val();
            //var CommentText = $("#channel-messagesBulk").text().replace('\n\n', '').trim();
            //var CommentText = [];
            //Array.prototype.forEach.bind($('.chat-message'))(e => CommentText.push($(e).html()))
            var CreatedBy = $('#topProfilePicture').attr('userId');
            var Action = $('#BA_filterAction').val();
            var ClientID = $("#ddlclient option:selected").val();
            var bankrule = $('#BA_bankrules').val();
            var reconcilationStatus = $('#BA_Status').val();
            var TrackingCategories = $("#BA_TrackingCategories").val() != undefined ? $("#BA_TrackingCategories").val() : 0;
            var AditionalTrackingCategories = $("#BA_TrackingCategories_1").val() != undefined ? $("#BA_TrackingCategories_1").val() : 0;
            var IsAllSelected = $('#checkbox-bulk-purchases-select')[0].checked;
            var SelectedItems = sessionStorage.getItem('SelectedRecords');
            var UnSelectedRecords = sessionStorage.getItem('UnSelectedRecords');
            IsAllSelected = $("#checkbox-bulk-purchases-select")[0].getAttribute("isselected") == "true";

            if (
                ((SelectedItems == null && IsAllSelected != true) || (IsAllSelected != true && SelectedItems == ''))) {
                ShowAlertBoxWarning("No records are selected to perform bulk action.");
                return;
            }

            if (GLaccount == '' && bankrule == '' && reconcilationStatus == '' && (TrackingCategories == '' || TrackingCategories == 0) && (AditionalTrackingCategories == '' && AditionalTrackingCategories == 0 && Action == '')) {
                ShowAlertBoxWarning("No Option are selected to perform bulk action.");
                return;
            }
            var type = 'Outstanding Payments';
            var IsNotinBooks = $('#tabNotinBooks').hasClass('tabselect');
            if (IsNotinBooks == true) {
                type = 'Unreconciled';
                sessionStorage.setItem('Type', 0);
            }
            else {
                sessionStorage.setItem('Type', 1);
            }

            let pdata = {
                GLaccount: GLaccount, TrackingCategory: TrackingCategories,
                AditionalTrackingCategory: AditionalTrackingCategories, BankRule: bankrule,
                AgencyID: ClientID,
                IsAllSelected: IsAllSelected,
                SelectedItems: SelectedItems,
                UnSelectedRecords: UnSelectedRecords,
                reconcilationStatus: reconcilationStatus,
                Action: Action,
                CommentText: CommentText,
                CreatedBy: CreatedBy

            };

            postAjax('/Reconciliation/ReconcilationBuilAction', JSON.stringify(pdata), function (response) {
                if (response.Message == 'Success') {
                    sessionStorage.removeItem('SelectedRecords');
                    sessionStorage.removeItem('UnSelectedRecords');
                    ShowAlertBoxSuccess("Success!", "Successfully updated " + response.UpdatedCount + " records.", function () {
                        sessionStorage.clear();
                        location.reload(true);
                        /*window.location.reload();*/
                    });
                }
                else if (response.Message == 'NoRecords')
                {
                    ShowAlertBoxWarning("No records are selected to perform bulk action.");
                    return;
                }
                else {
                    ShowAlertBoxError("Error", "Error while updating records.");
                    return;
                }
            })
        }
        function replaceAll(string, search, replace) {
            return string.split(search).join(replace);
        }

        function onChangeglAccount(id, event) {

            var selectedValue = event.currentTarget.value;
            if (isEmptyOrBlank(selectedValue)) {
                selectedValue = -1;
            }
            var userId = $('#topProfilePicture').attr('userId');
            var ClientID = $("#ddlclient option:selected").val();
            postAjax('/Reconciliation/UpdateReconciliation?AgencyID=' + ClientID + '&id=' + id + '&GLAccount=' + selectedValue + '&BankRule=' + 0 + '&TrackingCategory=' + 0 + '&userId=' + userId, null, function (response) {
                if (response.Message == 'Success') {

                }
                else {

                }
            })
        }
    function onChangeBankRule(id, event) {

            var Selectedvalue = event.currentTarget.value;
            var ClientID = $("#ddlclient option:selected").val();
            postAjax('/Reconciliation/UpdateReconciliation?AgencyID=' + ClientID + '&id=' + id + '&GLAccount=' + 0 + '&BankRule=' + Selectedvalue + '&TrackingCategory=' + 0, null, function (response) {
                if (response.Message == 'Success') {

                }
                else {
                }
            })
        }
        function onChangeAction(id, event) {

            var Selectedvalue = event.currentTarget.value;
            if (isEmptyOrBlank(Selectedvalue)) {
                Selectedvalue = -1;
            }
            var userId = $('#topProfilePicture').attr('userId');

            var ClientID = $("#ddlclient option:selected").val();
            postAjax('/Reconciliation/UpdateReconciliation?AgencyID=' + ClientID + '&id=' + id + '&GLAccount=' + 0 + '&BankRule=' + 0 + '&TrackingCategory=' + 0 + '&reconciliationActionId=' + Selectedvalue + '&userId=' + userId, null, function (response) {
                if (response.Message == 'Success') {

                }
                else {

                }
            })
        }
    function onChangeTc(id, event) {

            var selectedValue = event.currentTarget.value;
            if (isEmptyOrBlank(selectedValue)) {
                selectedValue = -1;
            }
            var ClientID = $("#ddlclient option:selected").val();
            postAjax('/Reconciliation/UpdateReconciliation?AgencyID=' + ClientID + '&id=' + id + '&GLAccount=' + 0 + '&BankRule=' + 0 + '&TrackingCategory=' + selectedValue, null, function (response) {
                if (response.Message == 'Success') {

                }
                else {

                }
            })
        }

        function onChangeAditinalTc(id, event) {
            var Selectedvalue = event.currentTarget.value;
            if (isEmptyOrBlank(Selectedvalue)) {
                Selectedvalue = -1;
            }
            var ClientID = $("#ddlclient option:selected").val();
            postAjax('/Reconciliation/UpdateReconciliation?AgencyID=' + ClientID + '&id=' + id + '&GLAccount=' + 0 + '&BankRule=' + 0 + '&TrackingCategory=' + 0 + '&TrackingCategoryAdditional=' + Selectedvalue, null, function (response) {
                if (response.Message == 'Success') {

                }
                else {

                }
            })
        }

        function loadReconcilation() {

            var type = sessionStorage.getItem('Type');
            var recType = 'Not in Books';
            if (type != null && type == '1') {


                recType = 'Not in Banks';
            }
            var ClientID = $("#ddlclient option:selected").val();

            postAjax('/Reconciliation/GetReconcilation?Type=' + recType, null, function (data) {
                if (response.Message == "Success") {
                    let data = response.ResultData;
                }
                if (data === false) {

                }
                else {

                }
            });
        }

        function AgencyDropdownPartialViewChange() {
            var ClientID = $("#ddlclient option:selected").val();
            ShowlottieLoader();
            $.ajax({
                url: '/AgencyService/GetClientDetails?id=' + ClientID,
                type: "GET",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data != null) {
                        sessionStorage.setItem("LastMailSent", data.MailSendDate)
                        // Write here what should happend once client selected
                        SetUserPreferencesForAgency();
                        var url = '@Url.Action("ReconciliationMain", "Reconciliation")';
                        window.location.href = url;
                       // window.location.reload();
                    }
                    else {
                        // Write here what should happend once selected client is null
                    }
                },
                error: function () {
                    // Write here what should happend when action result is errored.
                }
            });
        }
        $("input[id$='Notinbook']").click(function () {
            $("#BankAccount").show();
            var BankAccount = $("#QBO_AccountsFilter option:selected").text();
            if (BankAccount == "Select Bank Account") {

                $("#btnDropzoneUpload").attr('disabled', true);
                $('#btnDropzoneUpload').css('cursor', 'not-allowed');
                $("#btnDropzoneUpload").attr('title', 'Please select a bank account.');
            }
            else {
                $("#btnDropzoneUpload").attr('disabled', false);
                $('#btnDropzoneUpload').css('cursor', '');
                $("#btnDropzoneUpload").attr('title', '');
            }
        });
        $("input[id$='Notinbank']").click(function () {
            $("#BankAccount").hide();
            var BankAccount = $("#QBO_AccountsFilter option:selected").text();
            if (BankAccount == "Select Bank Account") {

                $("#btnDropzoneUpload").attr('disabled', false);
                $('#btnDropzoneUpload').css('cursor', '');
                $("#btnDropzoneUpload").attr('title', '');
            }

        });

        $(function () {

            $("#email").click(function () {
                var url = window.location.href;
                $('.text-danger').empty();
                $("#sendbutton").attr("disabled", false);
                var ClientName = $("#ddlclient option:selected").text();
                var ClientId = $("#ddlclient option:selected").val();
                getClientDate(ClientName);
                ClientName = encodeURIComponent(ClientName);
                var NotInBankUnreconciledItemsCount = $("#lblNotInBooksCount").text();
                var LastMailSent = sessionStorage.getItem("LastMailSent");
                getAjax(`/Reconciliation/EmailSend?ClientName=${ClientName}&ClientId=${ClientId}&NotInBankUnreconciledItemsCount=${NotInBankUnreconciledItemsCount}&url=${url}&sentdate=${LastMailSent}`, null, function (response) {
                    if (response.Status == 'Success') {
                        var text = response.Recipients.toString().split(",");
                        var str = text.join(', ');
                        $("#email-to").val(str);
                        if (str == "") {
                            $("#sendbutton").attr("disabled", true);
                        }
                        $("#email-subject").val(response.Subject);
                        $("#ibody").html(response.Body);
                        $("#ifooter").html(response.LastSent);

                    }
                });

            });
        });


        function getClientDate(ClientName) {
            getAjaxSync(apiurl + `Reconciliation/getLastSentDate?ClientName=${ClientName}`, null, function (response) {
                sessionStorage.setItem("LastMailSent", response.resultData);
            });
        }
        $("#email-to").on("focus", function (e) {
            e.preventDefault();
            e.target.removeAttribute("readonly");

        });
        $("#email-to").on("blur", function (e) {
            e.preventDefault();
            e.target.setAttribute("readonly", "");
            validateMultipleEmails($('#email-to').val());
        });

        function validateMultipleEmails(emailinput) {
            var emails = emailinput;
            var invalidEmails = [];
            if (emails == "") {
                $('.text-danger').empty();
                $('.emailvalidation').append('<span class="text-danger">Please Enter Email </span>');
                $("#sendbutton").attr("disabled", true);
                return;
            }
            emails = emails.split(',');
            var regexs = /^([A-Za-z0-9_\-\.])+\@@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;;

           

            for (var i = 0; i<emails.length; i++) {
                //Trimming the whitespace from emails if any
                emails[i] = emails[i].trim();
                //Cheking the invalid emails and push them into an array
                if (!regexs.test(emails[i])) {
                    invalidEmails.push(emails[i]);
                }
            }
            if (invalidEmails.length != 0) {
                $('.text-danger').empty();
                $('.emailvalidation').append('<span class="text-danger">Invalid emails: ' + invalidEmails.join(',') + '</span>');
                $("#sendbutton").attr("disabled", true);
            }
            else if (invalidEmails.length == 0) {
                $('.emailvalidation .text-danger').remove();
                $("#sendbutton").attr("disabled", false);
            }
        }

        function sendMail() {
            var recip = $("#email-to").val();
            var subject = $("#email-subject").val();
            var body = $("#ibody").html();
            var pdata = {
                Recipents: recip,
                Subject: subject,
                Body:body,
            };
            postAjaxSync(apiurl + `Reconciliation/sendReconcilationEmail`, JSON.stringify(pdata), function (response) {
                ShowAlertBoxSuccess("", "Email has been sent ", function () { window.location.reload(); });
            });
        }

        var hideParticipantsSidebar = function () { $(".chat-sidebar").hide(); }

        var onChangeAditinalBA = function (e) {
            var BankAccount = $("#QBO_AccountsFilter option:selected").text();
            if (BankAccount =="Select Bank Account") {
                $("#btnDropzoneUpload").attr('disabled', true);
                $('#btnDropzoneUpload').css('cursor', 'not-allowed');
                $("#btnDropzoneUpload").attr('title', 'Please select a bank account.');
            }
            else {
                $("#btnDropzoneUpload").attr('disabled', false);
                $('#btnDropzoneUpload').css('cursor', '');
                $("#btnDropzoneUpload").attr('title', '');
            }
        }
        $("#email-subject").on("focus", function (e) {
            e.preventDefault();
            e.target.removeAttribute("readonly");
        });
        $("#email-subject").on("blur", function (e) {
            e.preventDefault();
            e.target.setAttribute("readonly", "");
        });

       

    </script>
    @Scripts.Render("~/bundles/js/reconciliationMain")
    <script>
        $(document).ready(function () {
            HidelottieLoader();

            $("#checkbox-bulk-purchases-select").click(function (e) {

                if (e.target.checked) {
                    this.setAttribute("isSelected", "true");
                } else {
                    this.setAttribute("isSelected", "false");
                }

            });
        });

    </script>

}

