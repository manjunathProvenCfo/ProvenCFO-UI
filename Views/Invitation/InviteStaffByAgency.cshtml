@model Proven.Model.InviteUserModel

@{
    ViewBag.Title = "InviteStaffByAgency";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    a.page-link {
        background-color: #fff !important;
        border-color: #d8e2ef !important;
    }

    .page-link:hover {
        color: #000 !important;
    }
</style>
@using (Html.BeginForm("InviteStaffByAgency", "Invitation", FormMethod.Post))
{
    @*@Html.ValidationSummary(true)*@
    @Html.AntiForgeryToken()



    <div class="card mb-3">
        <div class="card-body overflow-hidden">
            @*@if (@ViewBag.Message != null)
                {
                    <div class="alert alert-success">
                        <p class="mb-0">@ViewBag.Message</p>
                    </div>
                }*@
            @if (@ViewBag.ErrorMessage != null)
            {
                @Html.Hidden("InviteCreate", (object)@ViewBag.ErrorMessage, new { @id = "InviteCreate" });
            }
            @if (@ViewBag.Message != null)
            {
                <div class="alert alert-success">
                    <p>@ViewBag.Message</p>
                </div>

            }
            @if (Model.Id == null || Model.Id == 0)
            {
                <h3 class="font-weight-normal fs-2 fs-md-3 mb-0 border-bottom pb-2">Add New Agency User </h3>
            }
            else
            {
                <h3 class="font-weight-normal fs-2 fs-md-3 mb-0 border-bottom pb-2">Edit Agency User </h3>
            }

            <div class="row mt-4">
                <div class="col-12">
                    <form method="post" action="invitestaffbyagency">
                        @Html.HiddenFor(x => x.Id)
                        @Html.HiddenFor(x => x.AgencyID)
                        @Html.HiddenFor(x => x.AgencyName)

                        <div class="row form-group custom-form-width">
                            <div class="col-12 col-lg-8 col-xl-5">
                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0">First Name</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0">Last Name</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0">Email Address</label>
                                    </div>
                                    @if (Model.Id == null || Model.Id == 0)
                                    {
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                            @*@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })*@
                                            <span class="text-danger field-validation-error " data-valmsg-for="Email" data-valmsg-replace="true"><span id="EmailIdExist" class=""></span></span>
                                            @*   <span class="text-danger field-validation-error " data-valmsg-for="name" data-valmsg-replace="true"><span id="EmailIdExist" class="">The Email id has been already taken.</span></span>*@

                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                            @Html.HiddenFor(x => x.Email)
                                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", disabled = "disabled", @readonly = "readonly" } })
                                        </div>
                                    }
                                </div>
                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0">User Role</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.DropDownListFor(model => model.RoleId, new SelectList(Model.Rolelist, "id", "DisplayRoleName"), "Select a User Role", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0">Agency Name</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.EditorFor(model => model.AgencyName, new { htmlAttributes = new { @class = "form-control", disabled = "disabled", @readonly = "readonly" } })
                                        @*<span class="text-danger field-validation-error " data-valmsg-for="Email" data-valmsg-replace="true"><span id="EmailIdExist" class=""></span></span>*@
                                        @*   <span class="text-danger field-validation-error " data-valmsg-for="name" data-valmsg-replace="true"><span id="EmailIdExist" class="">The Email id has been already taken.</span></span>*@

                                    </div>
                                </div>
                                <div class="row align-items-center form-group">
                                    @*<div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0">Invite valid for / In Days</label>
                                    </div>*@
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.HiddenFor(model => model.SessionTimeout, new { htmlAttributes = new { @class = "form-control", disabled = "disabled", @readonly = "readonly" } })
                                        @*<span class="text-danger field-validation-error " data-valmsg-for="Email" data-valmsg-replace="true"><span id="EmailIdExist" class=""></span></span>*@
                                        @*   <span class="text-danger field-validation-error " data-valmsg-for="name" data-valmsg-replace="true"><span id="EmailIdExist" class="">The Email id has been already taken.</span></span>*@
                                        @Html.HiddenFor(x => x.SessionTimeout)
                                    </div>
                                </div>

                                @*<div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0">Status</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.DropDownListFor(model => model.IsActive, new List<SelectListItem>() { new SelectListItem { Text = "Active", Value = "1" }, new SelectListItem { Text = "Inactive", Value = "0" } }, new { @class = "form-control text-box single-line" })
                                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@


                                <div class="row form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @if (Model.Id == null || Model.Id == 0)
                                        {
                                            <button class="btn btn-primary" type="submit" id="btnCreate" name="submit" href="@Url.Action("InviteStaffByAgency", "Invitation")">Send Invitation</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-primary" type="submit" id="btnCreate" name="submit" href="@Url.Action("UpdateInviteStaffByAgency", "Invitation")">Update</button>
                                        }
                                        @*@Html.ActionLink("Cancel", "RegisteredUserList", "Invitation", new { }, new { @class = "btn btn-primary ml-2" })*@
                                        <input type="button" value="Cancel" class="btn btn-primary ml-2" onclick="location.href='@Url.Action("RegisteredUserList", "Invitation")'" />

                                    </div>
                                </div>

                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>


}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>

        if (document.getElementById("EmailIdExist") != null) {
            document.getElementById("EmailIdExist").style.display = "none";
        }

        $(document).ready(function () {

            //
            var msg = $('#InviteCreate') != undefined ? $('#InviteCreate').val() : '';
            debugger;

            if (msg != undefined && msg != '' && msg == "Created") {
                AddAlertMsg();
                $('#InviteCreate').val('');
            }
            else if (msg != undefined && msg != '' && msg == "InvitationSend") {
                //UpdateAlertRole();
                $('#EmailIdExist').show();
                $('#EmailIdExist').html('The invitation has been sent to this email address.')
                $('#InviteCreate').val('');
            }
            else if (msg != undefined && msg != '' && msg == "UserAlreadyLinked") {
                $('#EmailIdExist').show();
                $('#EmailIdExist').html('The invitation is already accepted for this agency.')
                $('#InviteCreate').val('');
            }
            else if (msg != undefined && msg != '' && msg == "UserAlreadyLinkedAndInActive") {
                $('#EmailIdExist').show();
                $('#EmailIdExist').html('The User has been registered for this Agency and current state is inActive.')
                $('#InviteCreate').val('');
            }
            else if (msg != undefined && msg != '' && msg == "Updated") {
                UpdateAlertMsg();
                $('#InviteCreate').val('');
            }
            if (msg != undefined && msg != '' && msg == "Exist") {

                $('#EmailIdExist').show();
                $('#EmailIdExist').html('This Email id has been already taken.')
                //ExistAlertRole();
                $('#InviteCreate').val('');
            }else if (msg != undefined && msg != '') {

                $('#EmailIdExist').show();
                $('#EmailIdExist').html(msg)
                //ExistAlertRole();
                $('#InviteCreate').val('');
            }

            $("#btnClear").click(function () {
                $('select').val("Active");
                $(this).closest('form').find("input[type=text], textarea").val("");
            });

            HidelottieLoader();
        });
        var ExportFileReq = function (Controller, jAction, rData) {
            if (rData == undefined) rData = "{}";
            $.ajax({
                type: "POST",
                url: '/' + Controller + '/' + jAction,
                contentType: "application/json; charset=utf-8",
                data: rData,
                dataType: "json",
            }).done(function (FileName) {
                //get the file name for download
                if (FileName != "") {
                    //use window.location.href for redirect to download action for download the file
                    var dPath = '/Base/Download?fileName=' + FileName;
                    window.location.href = dPath;

                }
            });
        };

        function AddAlertMsg() {
            sweetAlert
                ({
                    title: "Sent!",
                    text: "Agency user invitation has been sent.",
                    type: "success"
                },
                    function () {
                        window.location.href = '/Invitation/RegisteredUserList'
                    });
        }
        function UpdateAlertMsg() {
            sweetAlert
                ({
                    title: "Updated!",
                    text: "Agency user has been updated.",
                    type: "success"
                },
                    function () {
                        window.location.href = '/Invitation/RegisteredUserList'
                    });
        }

        function ExistAlertRole() {
            sweetAlert
                ({
                    title: "Exist!",

                    text: "This Email id already exist!",

                    type: "warning"
                },
                    function () {
                        //window.location.href = '/Role/Role'
                    });
        }
        $(document).ready(function () {
            HidelottieLoader();

        });

        $(document).on("keydown", function (e) {
            if (e.keyCode === 13) {
                e.preventDefault();

            }
        });

    </script>
}




