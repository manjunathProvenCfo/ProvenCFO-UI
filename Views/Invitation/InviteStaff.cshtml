@model ProvenCfoUI.Areas.Model.InviteStaffViewModel
@{
    ViewBag.Title = "InviteStaff";
}
@*@model ProvenCfoUI.Areas.Model.ManageRolesViewModel*@


<!--@if (ViewData.ModelState.IsValid)
{
    if (@ViewBag.Name != null)
    {
        <b>
            Name : @ViewBag.Name<br />
            Email : @ViewBag.Email<br />
            Role : @ViewBag.Role<br />
            SessionTimeout : @ViewBag.SessionTimeout
        </b>
    }
}-->
@*hey*@




@using (Html.BeginForm())
{
    @*@Html.ValidationSummary(true)*@
    @Html.AntiForgeryToken()



    <div class="card mb-3">
        <div class="card-body overflow-hidden">
            @*@if (@ViewBag.Message != null)
        {
            <div class="alert alert-success">
                <p class="mb-0">@ViewBag.Message</p>
            </div>
        }*@
            @if (@ViewBag.ErrorMessage != null)
            {
                @Html.Hidden("InviteCreate", (object)@ViewBag.ErrorMessage, new { @id = "InviteCreate" });
            }
            @if (@ViewBag.Message != null)
            {
                <div class="alert alert-success">
                    <p>@ViewBag.Message</p>
                </div>

            }
            <h3 class="font-weight-normal fs-2 fs-md-3 mb-0 border-bottom pb-2">Add New Staff</h3>

            <div class="row mt-4">
                <div class="col-12">
                    <form method="post" action="invitestaff">

                        <div class="row form-group custom-form-width">
                            <div class="col-12 col-lg-8 col-xl-5">
                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0">First Name</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0">Last Name</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0">Email Address</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                        @*@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })*@
                                        <span class="text-danger field-validation-error " data-valmsg-for="Email" data-valmsg-replace="true"><span id="EmailIdExist" class=""></span></span>
                                        @*   <span class="text-danger field-validation-error " data-valmsg-for="name" data-valmsg-replace="true"><span id="EmailIdExist" class="">The Email id has been already taken.</span></span>*@

                                    </div>
                                </div>

                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0">User Role</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.DropDownListFor(model => model.roleid, new SelectList(Model.Rolelist, "id", "DisplayRoleName"), "Select a User Role", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.roleid, "", new { @class = "text-danger" })
                                    </div>
                                </div>


                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0">Job Title</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.DropDownListFor(model => model.jobid, new SelectList(Model.JobTitlelist, "id", "Title", "Isactive"), "Select a Job Title", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.jobid, "", new { @class = "text-danger" })

                                    </div>
                                </div>


                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email" class="mb-0">Invite valid for</label><br />
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.DropDownListFor(m => m.SessionTimeout, new List<SelectListItem>() { new SelectListItem { Text = "24 Hours", Value = "24" } }, new { @class = "form-control text-box single-line" , @readonly = "readonly" })
                                        @Html.ValidationMessageFor(model => model.SessionTimeout, "", new { @class = "text-danger" })
                                        @*<div class="input-group">
            <select class="custom-select" id="SessionTimeout" name="SessionTimeout">
                <option  value="1">24 Hours</option>
            </select>
        </div>*@
                                    </div>
                                </div>

                                <div class="row form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        <button class="btn btn-primary" type="submit">Send Invitation</button>                                        
                                        <input type="button" value="Cancel" class="btn btn-primary ml-2" onclick="location.href='@Url.Action("InviteStaffList", "Invitation")'" />
                                        @*@Html.ActionLink("Cancel", "InviteStaffList", "Invitation", new { }, new { @class = "btn btn-primary ml-2" })*@

                                    </div>
                                </div>

                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>


}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script >
       

    document.getElementById("EmailIdExist").style.display = "none";
    $(document).ready(function () {

       
        var msg = $('#InviteCreate') != undefined ? $('#InviteCreate').val() : '';
       
        if (msg != undefined && msg != '' && msg == "Sent") {
           
            AddAlertRole();
            $('#InviteCreate').val('');
        }
       
        if (msg != undefined && msg != '' && msg == "Exist") {

            $('#EmailIdExist').show();
            $('#EmailIdExist').html('This Email id has been already taken.')

            //ExistAlertRole();
            $('#InviteCreate').val('');

        }

        $("#btnClear").click(function () {
            $('select').val("Active");
            $(this).closest('form').find("input[type=text], textarea").val("");
        });
    });
    var ExportFileReq = function (Controller, jAction, rData) {
        if (rData == undefined) rData = "{}";
        $.ajax({
            type: "POST",
            url: '/' + Controller + '/' + jAction,
            contentType: "application/json; charset=utf-8",
            data: rData,
            dataType: "json",
        }).done(function (FileName) {
            //get the file name for download
            if (FileName != "") {
                //use window.location.href for redirect to download action for download the file
                var dPath = '/Base/Download?fileName=' + FileName;
                window.location.href = dPath;

            }
        });
    };


    function AddAlertRole() {
     
        sweetAlert
            ({
                title: "Sent!",
                text: "staff user invitation has been sent.",
                type: "success"
            },
                function () {
                    window.location.href = '/Invitation/InviteStaffList'
                });
    }

    function ExistAlertRole() {
        sweetAlert
            ({
                title: "Exist!",

                text: "This Email id already exist!",

                type: "warning"
            },
                function () {
                    //window.location.href = '/Role/Role'
                });
    }


</script>
}



