@model ProvenCfoUI.Models.AgencyClient
@{ ViewBag.Title = "AgencyHome";
    Layout = "~/Views/Shared/_Layout.cshtml"; }
<style>
    .disabled-link {
        pointer-events: none;
    }
</style>

<div class="dashboard-frame">

    <!--<div class="card mb-4 ">
          @*@{
              Html.RenderAction("AgencySelection", "AgencyService");
          }*@
          <!--<!--<div class="card-header">
              <div class="row align-items-center justify-content-between">-->
    <!--@*<div class="col-6 col-sm-auto d-flex align-items-center pr-0">
            <h5 class="fs-0 mb-0 text-nowrap py-2 py-xl-0">Agency Home</h5>
        </div>*@-->
    <!--<!--<div class="col-6 col-sm-auto ml-auto text-right pl-0">
        <div class="d-none" id="purchases-actions">
            <div class="input-group input-group-sm">
                <select class="custom-select cus" aria-label="Bulk actions">
                    <option selected="">Bulk actions</option>
                    <option value="Delete">Delete</option>
                    <option value="Archive">Archive</option>
                </select>
                <button class="btn btn-falcon-default btn-sm ml-2" type="button">Submit</button>
            </div>
        </div>
        <div id="dashboard-actions">-->
    <!--@*<button class="btn btn-falcon-default btn-sm" type="button">
            <span class="fas fa-plus" data-fa-transform="shrink-3 down-2"></span>
            <span class="d-none d-sm-inline-block ml-1"><a href=@Url.Action("CreateClient", "Client")>Create</a></span>
        </button>*@
    @*<button class="btn btn-falcon-default btn-sm mx-2" type="button"><span class="fas fa-filter" data-fa-transform="shrink-3 down-2"></span><span class="d-none d-sm-inline-block ml-1">Filter</span></button>*@
    @*<button class="btn btn-falcon-default btn-sm ml-2" type="button">
            <span class="fas fa-external-link-alt" data-fa-transform="shrink-3 down-2"></span>
            <span class="d-none d-sm-inline-block ml-1" onclick="ExportToExcel()">Export</span>
        </button>*@-->
    <!--<!--<!--<button class="btn btn-falcon-default btn-sm ml-2" type="button">
    <span class="fas fa-external-link-alt" data-fa-transform="shrink-3 down-2"></span>
    <span class="d-none d-sm-inline-block ml-1">-->
    <!---->
    <!---->@*<a href=@Url.Action("AgencyHome", "AgencyService")>Back to dashboard</a>*@<!---->
    <!--</span>
    </button>-->
    <!--</div>
            </div>
        </div>
    </div>-->
    <!--@*@Html.Partial("_AgencySelection")*@
        @*@{
                Html.RenderAction("AgencySelection", "AgencyService");
            }*@
    </div>-->
    <!--<div class="card px-0 pt-0">
        <div class="row no-gutters">

            <div class="col-lg-3 col-xl-12 pl-lg-2 pl-xl-0 mb-3" id="divClientDetials">
                <div class="bg-holder d-none d-xl-block bg-card">
                </div>-->
    <!--/.bg-holder-->
    @*<div class="card-body">
            <h5>Agency Details: <span id="spClientName"></span></h5>
            <p class="fs--1" id="spClientAddress"></p>
            <div>
                <strong class="mr-2">Status: </strong>
                <div class="badge badge-pill badge-soft-success fs--2 d-none">Active<span class="fas fa-check ml-1" data-fa-transform="shrink-2"></span></div>
            </div>
        </div>*@               @*Commented By Amit From line 61 to 67*@


        <div class="row no-gutters">
            <div class="col-md-6 col-lg-3 mb-3">
                <div class="card h-md-100">
                    <div class="card-body">
                        <div class="row h-100 justify-content-between no-gutters">
                            <div class="col-auto pr-2">
                                <h6 class="mt-1">Not in Bank </h6>
                                @*<div class="fs--2 mt-3">
                                        <div class="d-flex flex-between-center mb-1">


                                            <div class="d-xxl-none">993%</div>
                                        </div>
                                    </div>*@
                                <h1 id="lblNotInBanksCount2" style=" margin-left: 25px;">0</h1>


                                <div>
                                    <span class="badge badge-pill badge-soft-danger ml-3 currency-usd" id="lblNegativeBanksCount" style="color: white; background-color: #00d27a; ">0</span>
                                </div>
                                <span class="badge badge-pill badge-soft-danger ml-3 currency-usd" id="lblpostiveBanksCount" style=" color: white; background-color: red;">0</span><br />
                            </div>
                            <div class="col-5 col-sm-4">

                                @*<div class="progress-circle" data-echart-responsive="true" id="lblPercentage" data-options='{"color":"url(#gradient)","progress":93,"strokeWidth":5,"trailWidth":5}'></div>*@
                                <h3 class="progressbar-text" style="position: absolute; left: 50%; top: 50%; padding: 0px; margin: 0px; transform: translate(-50%, -50%);"><span class="value" id="lblPercentage">0</span><span>%</span> </h3>
                                @*<div class="absolute-centered font-weight-medium text-dark fs-2" id="lblPercentage">0</div>*@

                                <div class="progress-circle"  data-options='{"color":"url(#gradient)","progress":93,"strokeWidth":5,"trailWidth":5}'></div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-3 pl-md-3 mb-3">
                <div class="card h-md-100">
                    <div class="card-body">
                        <div class="row h-100 justify-content-between no-gutters">
                            <div class="col-auto pr-2">
                                <h6 class="mt-1">Not in Book </h6>

                                <h1 id="lblNotInBooksCount2" style=" margin-left: 15px;">
                                    0
                                </h1>
                                <div>
                                    <span class="badge badge-pill badge-soft-danger ml-3 currency-usd" id="lblNegativeInBooksCount" style="color: white; background-color: #00d27a; ">0</span>
                                </div>
                                <span class="badge badge-pill badge-soft-danger ml-3 currency-usd" id="lblPostiveInBooksCount" style=" color: white; background-color: red;">0</span><br />
                            </div>
                            <div class="col-5 col-sm-4">

                                @*<div class="progress-circle" id="lblPercentage" data-echart-responsive="true" data-options='{"color":"url(#gradient)","progress":93,"strokeWidth":5,"trailWidth":5}'></div>*@
                               

                                <div class="progress-circle" data-options='{"color":"url(#gradient)","progress":93,"strokeWidth":5,"trailWidth":5}'></div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>



            <div class="col-md-6 col-lg-3 pl-md-3 mb-3">
                <div class="card h-md-100">
                    <div class="card-body">
                        <div class="row h-100 justify-content-between no-gutters">
                            <div class="col-5 col-sm-6 col-xxl pr-2">
                                <h6 class="mt-1">Need List</h6>
                                <div class="fs--2 mt-3">
                                    <div class="d-flex flex-between-center mb-1">
                                        <div class="d-flex align-items-center"><span class="dot bg-red"></span><span class="font-weight-semi-bold">Urgent</span></div>
                                        <div class="d-xxl-none">20%</div>
                                    </div>
                                    <div class="d-flex flex-between-center mb-1">
                                        <div class="d-flex align-items-center"><span class="dot bg-orange"></span><span class="font-weight-semi-bold">High</span></div>
                                        <div class="d-xxl-none"> 30%</div>
                                    </div>
                                    <div class="d-flex flex-between-center mb-1">
                                        <div class="d-flex align-items-center"><span class="dot bg-light-blue"></span><span class="font-weight-semi-bold">Medium</span></div>
                                        <div class="d-xxl-none"> 35%</div>
                                    </div>
                                    <div class="d-flex flex-between-center mb-1">
                                        <div class="d-flex align-items-center"><span class="dot bg-green"></span><span class="font-weight-semi-bold">Low</span></div>
                                        <div class="d-xxl-none"> 15%</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-auto">
                                <div class="position-relative">
                                    <div class="echart-doughnut" data-echart-responsive="true"></div>
                                    <div class="absolute-centered font-weight-medium text-dark fs-2">26</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-lg-3 pl-md-3 mb-3">
                <div class="card h-md-100">
                    <div class="card-body">
                        <div class="row h-100 justify-content-between no-gutters">
                            <div class="col-5 col-sm-6 col-xxl pr-2">
                                <h6 class="mt-1">Notes</h6>
                                <div class="fs--2 mt-3">
                                    <div class="d-flex flex-between-center mb-1">
                                        <div class="d-flex align-items-center"><span class="dot bg-light-blue"></span><span class="font-weight-semi-bold">Income</span></div>
                                        <div class="d-xxl-none">15%</div>
                                    </div>
                                    <div class="d-flex flex-between-center mb-1">
                                        <div class="d-flex align-items-center"><span class="dot bg-blue"></span><span class="font-weight-semi-bold">Expenses</span></div>
                                        <div class="d-xxl-none"> 25%</div>
                                    </div>
                                    <div class="d-flex flex-between-center mb-1">
                                        <div class="d-flex align-items-center"><span class="dot bg-red"></span><span class="font-weight-semi-bold">Assest</span></div>
                                        <div class="d-xxl-none"> 30%</div>
                                    </div>
                                    <div class="d-flex flex-between-center mb-1">
                                        <div class="d-flex align-items-center"><span class="dot bg-orange"></span><span class="font-weight-semi-bold">Bank Balance</span></div>
                                        <div class="d-xxl-none"> 15%</div>
                                    </div>
                                    <div class="d-flex flex-between-center mb-1">
                                        <div class="d-flex align-items-center"><span class="dot bg-soft-primary"></span><span class="font-weight-semi-bold">Liabilities</span></div>
                                        <div class="d-xxl-none"> 15%</div>
                                    </div>
                                    <div class="d-flex flex-between-center mb-1">
                                        <div class="d-flex align-items-center"><span class="dot bg-green"></span><span class="font-weight-semi-bold">Equity</span></div>
                                        <div class="d-xxl-none"> 15%</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-auto">
                                <div class="position-relative">
                                    <div id="echart-notes" class="echart"></div>
                                    <div class="absolute-centered font-weight-medium text-dark fs-2"><span id="lblTotalNotesCount"></span></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row no-gutters">
            <div class="col-lg-6 mb-3">
                <div class="card h-100">
                    <div class="card-header d-flex flex-between-center bg-light py-2">
                        <h6 class="mb-0">Overview</h6>
                        <div class="dropdown text-sans-serif btn-reveal-trigger">
                            <button class="btn btn-link text-600 btn-sm dropdown-toggle btn-reveal dropdown-caret-none" type="button" id="dropdown-active-user" data-toggle="dropdown" data-boundary="viewport" aria-haspopup="true" aria-expanded="false"><span class="fas fa-ellipsis-h fs--2"></span></button>
                            <div class="dropdown-menu dropdown-menu-right border py-0" aria-labelledby="dropdown-active-user">
                                <div class="bg-white py-2">
                                    <a class="dropdown-item" href="#!">View</a><a class="dropdown-item" href="#!">Export</a>
                                    <div class="dropdown-divider"></div><a class="dropdown-item text-danger" href="#!">Remove</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body py-2 overview-content">
                        <h5 class="mb-3"> <span class="spClientName"></span></h5>
                        @*I have Did Some Changes Here*@
                        <div class="row no-gutters mb-2 mb-md-0">
                            <p class="col-md-5 col-xl-4 mb-2 color-dark">Billable Entity</p>
                            <p class="col-md-7 col-xl-8 mb-2 color-gray-shades"><span class="spEntityName"></span></p>
                        </div>
                        <div class="row no-gutters mb-2 mb-md-0">
                            <p class="col-md-5 col-xl-4 mb-2 color-dark">Start Date</p>
                            <p class="col-md-7 col-xl-8 mb-2 color-gray-shades"><span id="spCreatedDate"></span></p>
                        </div>
                        <div class="row no-gutters mb-2 mb-md-0">
                            <p class="col-md-5 col-xl-4 mb-2 color-dark">Team</p>
                            <p class="col-md-7 col-xl-8 mb-2 color-gray-shades"><span id="spTeamName"></span></p>
                        </div>
                        <div class="row no-gutters mb-2 mb-md-0">
                            <p class="col-md-5 col-xl-4 mb-2 color-dark">Status</p>
                            <p class="badge badge-success font-weight-normal mb-1"><span id="spStatus"></span></p>
                            <!--<p class="col-md-7 col-xl-8 mb-2 color-gray-shades">-->
                            @*<san href="#" class="badge badge-success font-weight-normal"><span id="spStatus"></span></san>*@
                            <!--</p>-->
                        </div>
                        <div class="row no-gutters mb-2 mb-md-0">
                            <p class="col-md-5 col-xl-4 mb-2 color-dark">Months as Client</p>
                            <p class="col-md-7 col-xl-8 mb-2 color-gray-shades"><span id="spMonths"></span></p>
                        </div>
                        <div class="row no-gutters mb-2 mb-md-0">
                            <p class="col-md-5 col-xl-4 mb-2 color-dark">Outstanding Balance</p>
                            <p class="col-md-7 col-xl-8 mb-2 color-gray-shades">
                                <span id="spOutSanding"></span> <a href="#" class="ml-5 badge badge-danger font-weight-normal pt-1">Pay Now</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-6 pl-lg-3 mb-3">
                <div class="card h-100">
                    <div class="card-header d-flex flex-between-center bg-light py-2 mb-3">
                        <h6 class="mb-0">Your Team</h6>
                        <div class="dropdown text-sans-serif btn-reveal-trigger">
                            <button class="btn btn-link text-600 btn-sm dropdown-toggle btn-reveal dropdown-caret-none" type="button" id="dropdown-active-user" data-toggle="dropdown" data-boundary="viewport" aria-haspopup="true" aria-expanded="false"><span class="fas fa-ellipsis-h fs--2"></span></button>
                            <div class="dropdown-menu dropdown-menu-right border py-0" aria-labelledby="dropdown-active-user">
                                <div class="bg-white py-2">
                                    <a class="dropdown-item" href="#!">View</a><a class="dropdown-item" href="#!">Export</a>
                                    <div class="dropdown-divider"></div><a class="dropdown-item text-danger" href="#!">Remove</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body py-3 overview-content">
                        <div class="media align-items-center mb-4">
                            <div class="d-flex justify-content-between align-items-center w-100">
                                <div class="d-flex justify-content-between align-items-center flex-row">
                                    <div class="avatar avatar-2xl">
                                        <img class="rounded-circle" id="spProfileImage1" />

                                    </div>
                                    <div class="media-body ml-3">
                                        <p class="mb-0 color-gray-shades"><span id="spStaffName1"></span></p>
                                        <p class="text-500 fs--2 mb-0"><span id="spJobTitle1"></span></p>
                                    </div>
                                </div>
                                <div class="action-icons">
                                    <a href="#" class="d-inline-block mx-2 fs-1">
                                        <span class='far fa-envelope'></span>
                                    </a>
                                    <a href="#" class="d-inline-block mx-2 fs-1">
                                        <span class='far fab fa-rocketchat'></span>
                                    </a>
                                    <a href="#" class="d-inline-block mx-2 fs-1">
                                        <span class='far fas fa-phone'></span>
                                    </a>
                                    <a href="#" target="_blank" class="d-inline-block mx-2 fs-1" id="aLinkedInProfile1">
                                        <span class='far fab fa-linkedin'></span>
                                    </a>
                                </div>
                            </div>
                        </div>
                        <div class="media align-items-center mb-4">
                            <div class="d-flex justify-content-between align-items-center w-100">
                                <div class="d-flex justify-content-between align-items-center flex-row">
                                    <div class="avatar avatar-2xl">
                                        @*<img class="rounded-circle" src="../assets/img/team/2-thumb.png" alt="" />*@
                                        <img class="rounded-circle" id="spProfileImage2" />

                                    </div>
                                    <div class="media-body ml-3">
                                        <p class="mb-0 color-gray-shades"><span id="spStaffName2"></span></p>
                                        <p class="text-500 fs--2 mb-0"><span id="spJobTitle2"></span></p>
                                    </div>
                                </div>
                                <div class="action-icons">
                                    <a href="#" class="d-inline-block mx-2 fs-1">
                                        <span class='far fa-envelope'></span>
                                    </a>
                                    <a href="#" class="d-inline-block mx-2 fs-1">
                                        <span class='far fab fa-rocketchat'></span>
                                    </a>
                                    <a href="#" class="d-inline-block mx-2 fs-1">
                                        <span class='far fas fa-phone'></span>
                                    </a>
                                    <a href="#" target="_blank" class="d-inline-block mx-2 fs-1" id="aLinkedInProfile2">
                                        <span class='far fab fa-linkedin'></span>
                                    </a>
                                </div>
                            </div>
                        </div>

                        <div class="media align-items-center mb-4">
                            <div class="d-flex justify-content-between align-items-center w-100">
                                <div class="d-flex justify-content-between align-items-center flex-row">
                                    <div class="avatar avatar-2xl">
                                        @*<img class="rounded-circle" src="../assets/img/team/3-thumb.png" alt="" />*@
                                        <img class="rounded-circle" id="spProfileImage3" />

                                    </div>
                                    <div class="media-body ml-3">
                                        <p class="mb-0 color-gray-shades"><span id="spStaffName3"></span></p>
                                        <p class="text-500 fs--2 mb-0"><span id="spJobTitle3"></span></p>
                                    </div>
                                </div>
                                <div class="action-icons">
                                    <a href="#" class="d-inline-block mx-2 fs-1">
                                        <span class='far fa-envelope'></span>
                                    </a>
                                    <a href="#" class="d-inline-block mx-2 fs-1">
                                        <span class='far fab fa-rocketchat'></span>
                                    </a>
                                    <a href="#" class="d-inline-block mx-2 fs-1">
                                        <span class='far fas fa-phone'></span>
                                    </a>
                                    <a href="#" target="_blank" class="d-inline-block mx-2 fs-1" id="aLinkedInProfile3">
                                        <span class='far fab fa-linkedin'></span>
                                    </a>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="card-footer bg-light p-0">
                        <a class="btn btn-sm btn-link btn-block py-2" href=@Url.Action("Chat", "Communication")>
                            Chat With Team<span class="fas fa-chevron-right ml-1 fs--2"></span>
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="row no-gutters">
            <div class="col-lg-6 mb-3">
                <div class="card h-lg-100">
                    <div class="card-header">
                        <div class="row flex-between-center">
                            <div class="col-auto">
                                <h6 class="mb-0">Gross Revenue</h6>
                            </div>
                            <div class="col-auto d-flex">
                                <select class="custom-select custom-select-sm select-month mr-2">
                                    <option value="0">January</option>
                                    <option value="1">February</option>
                                    <option value="2">March</option>
                                    <option value="3">April</option>
                                    <option value="4">May</option>
                                    <option value="5">Jun</option>
                                    <option value="6">July</option>
                                    @*<option value="7">August</option>
                                        <option value="8">September</option>
                                        <option value="9">October</option>
                                        <option value="10">November</option>
                                        <option value="11">December</option>*@
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="card-body h-100 pr-0">
                        <div class="echart-line-total-sales h-100" data-echart-responsive="true" id="container1"></div>
                    </div>
                </div>
            </div>

            <div class="col-lg-6 pl-lg-3 mb-3">
                <div class="card h-lg-100">
                    <div class="card-header">
                        <div class="row flex-between-center">
                            <div class="col-auto">
                                <h6 class="mb-0">Net Income</h6>
                            </div>
                            <div class="col-auto d-flex">
                                <select class="custom-select custom-select-sm select-month mr-2">
                                    <option value="0">January</option>
                                    <option value="1">February</option>
                                    <option value="2">March</option>
                                    <option value="3">April</option>
                                    <option value="4">May</option>
                                    <option value="5">Jun</option>
                                    <option value="6">July</option>
                                    <option value="7">August</option>
                                    <option value="8">September</option>
                                    <option value="9">October</option>
                                    <option value="10">November</option>
                                    <option value="11">December</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="card-body h-100 pr-0">
                        <div class="echart-line-total-sales" style="min-height: 300px;" data-echart-responsive="true" id="container2"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row no-gutters">
            <div class="col-lg-6 mb-3">
                <div class="card">
                    <div class="card-header d-flex flex-between-center bg-light py-4">
                        <h6 class="mb-0">Monthly Financials</h6>
                    </div>
                    <div class="card-body py-2">
                        <div class="media align-items-center mb-3">
                            <div class="avatar avatar-2xl status-online">
                                <img class="rounded-circle" src="../assets/img/team/1-thumb.png" alt="" />

                            </div>
                            <div class="media-body ml-3">
                                <h6 class="mb-0 font-weight-semi-bold"><a class="text-900" href="#">June 2021</a></h6>
                                <p class="text-500 fs--2 mb-0">Updated <span class="ml-2 d-inline-block">June 05, 2021</span></p>
                            </div>
                        </div>
                        <div class="media align-items-center mb-3">
                            <div class="avatar avatar-2xl status-online">
                                <img class="rounded-circle" src="../assets/img/team/2-thumb.png" alt="" />
                            </div>
                            <div class="media-body ml-3">
                                <h6 class="mb-0 font-weight-semi-bold"><a class="text-900" href="#">May 2021</a></h6>
                                <p class="text-500 fs--2 mb-0">Updated <span class="ml-2 d-inline-block">May 15, 2021</span></p>
                            </div>
                        </div>
                        <div class="media align-items-center mb-3">
                            <div class="avatar avatar-2xl status-away">
                                <img class="rounded-circle" src="../assets/img/team/3-thumb.png" alt="" />

                            </div>
                            <div class="media-body ml-3">
                                <h6 class="mb-0 font-weight-semi-bold"><a class="text-900" href="#">April 2021</a></h6>
                                <p class="text-500 fs--2 mb-0">Updated <span class="ml-2 d-inline-block">April 20, 2021</span></p>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer bg-light p-0">
                        <a class="btn btn-sm btn-link btn-block py-2" href=@Url.Action("About", "Home")>
                            Show All<span clas111s="fas fa-chevron-right ml-1 fs--2"></span>
                        </a>
                    </div>
                </div>
            </div>

            <div class="col-lg-6 pl-lg-3 mb-3">
                <div class="card">
                    <div class="card-header d-flex flex-between-center bg-light py-4">
                        <h6 class="mb-0">Annual Financials</h6>
                    </div>
                    <div class="card-body py-2">
                        <div class="media align-items-center mb-3">
                            <div class="avatar avatar-2xl status-online">
                                <img class="rounded-circle" src="../assets/img/team/1-thumb.png" alt="" />

                            </div>
                            <div class="media-body ml-3">
                                <h6 class="mb-0 font-weight-semi-bold"><a class="text-900" href="#">2020</a></h6>
                                <p class="text-500 fs--2 mb-0">Updated <span class="ml-2 d-inline-block">April 20, 2021</span></p>
                            </div>
                        </div>
                        <div class="media align-items-center mb-3">
                            <div class="avatar avatar-2xl status-online">
                                <img class="rounded-circle" src="../assets/img/team/2-thumb.png" alt="" />

                            </div>
                            <div class="media-body ml-3">
                                <h6 class="mb-0 font-weight-semi-bold"><a class="text-900" href="#">2019</a></h6>
                                <p class="text-500 fs--2 mb-0">Updated <span class="ml-2 d-inline-block">April 20, 2021</span></p>
                            </div>
                        </div>
                        <div class="media align-items-center mb-3">
                            <div class="avatar avatar-2xl status-away">
                                <img class="rounded-circle" src="../assets/img/team/3-thumb.png" alt="" />

                            </div>
                            <div class="media-body ml-3">
                                <h6 class="mb-0 font-weight-semi-bold"><a class="text-900" href="#">2018</a></h6>
                                <p class="text-500 fs--2 mb-0">Updated <span class="ml-2 d-inline-block">April 20, 2021</span></p>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer bg-light p-0">
                        <a class="btn btn-sm btn-link btn-block py-2" href=@Url.Action("About", "Home")>
                            Show All<span class="fas fa-chevron-right ml-1 fs--2"></span>
                        </a>
                    </div>
                </div>
            </div>
        </div>

    </div>




    @section Scripts {
        @*@Scripts.Render("~/bundles/jqueryval");*@
        @*@Scripts.Render("~/bundles/customjquery");*@

        @Scripts.Render("~//bundles/js/chart");
        @Scripts.Render("~/bundles/js/select");
        <script>
            $('divClientDetials').addClass('d-none');
            $(document).ready(function () {
                AgencyDropdownPartialViewChange();

                bindNotInBooksAndBanksCountDashboard();


                NotesIndividualCountAndPercentageByAgencyId();

                Chart1();
                Chart2();

                setTimeout(function () {
                    $('.currency-usd').each(function (key, value) {
                        var monetary_value = $(value).text();
                        if (monetary_value == '0') {
                            var i = new Intl.NumberFormat('en-US', {
                                style: 'currency',
                                currency: 'USD'
                            }).format(monetary_value);
                            $(value).text(i);
                        }
                    });
                }, 3000);
                // totalSalesInit();
                //totalSalesInitTwo();
            });

            //function GetMonthDifference(data.StartDate, Enddate) {
            //    var startdate = new Date(data.StartDate.match(/\d+/)[0] * 1).toDateString()
            //    var enddate = new Date(Enddate)
            //    var months = enddate.getMonth() - startdate.getMonth() + (12 * (enddate.getFullYear() - startdate.getFullYear()));
            //    return months;
            //}

            function Chart1() {
                var dom = document.getElementById("container1");
                var myChart = echarts.init(dom);
                var app = {};

                var option;



                option = {
                    xAxis: {
                        type: 'category',
                        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        data: [150, 230, 224, 218, 135, 147, 260],
                        type: 'line'
                    }]
                };

                if (option && typeof option === 'object') {
                    myChart.setOption(option);
                }
            }
            function Chart2() {
                var dom = document.getElementById("container2");
                var myChart = echarts.init(dom);
                var app = {};

                var option;



                option = {
                    xAxis: {
                        type: 'category',
                        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        data: [150, 230, 224, 218, 135, 147, 260],
                        type: 'line',
                        lineStyle: {
                            color: '#2c7be5'
                        },
                        symbol: 'circle',
                        symbolSize: 10,
                        smooth: false,
                        hoverAnimation: true,
                    }],
                    grid: {
                        right: '28px',
                        left: '40px',
                        bottom: '15%',
                        top: '5%'
                    }
                };

                if (option && typeof option === 'object') {
                    myChart.setOption(option);
                }
            }
            function NotesChart(dataArray) {
                let dom = document.getElementById("echart-notes");
                var myChart = echarts.init(dom);
                var app = {};
                
                let options = {
                    color: [utils.colors.danger, "#F68F57", "#00BE82","#235EE8", utils.colors.info, utils.grays[300]],
                    tooltip: {
                        trigger: 'item',
                        padding: [7, 10],
                        backgroundColor: utils.grays.white,
                        textStyle: {
                            color: utils.grays.black
                        },
                        transitionDuration: 0,
                        borderColor: utils.grays['300'],
                        borderWidth: 1,
                        formatter: function formatter(params) {
                            return "<strong>" + params.data.name + ":</strong> " + params.percent + "%";
                        }
                    },
                    position: function position(pos, params, dom, rect, size) {
                        return getPosition(pos, params, dom, rect, size);
                    },
                    legend: {
                        show: false
                    },
                    series: [{
                        type: 'pie',
                        radius: ['100%', '87%'],
                        avoidLabelOverlap: false,
                        hoverAnimation: false,
                        itemStyle: {
                            borderWidth: 2,
                            borderColor: utils.grays.white
                        },
                        label: {
                            normal: {
                                show: false,
                                position: 'center',
                                textStyle: {
                                    fontSize: '20',
                                    fontWeight: '500',
                                    color: utils.grays['700']
                                }
                            },
                            emphasis: {
                                show: false
                            }
                        },
                        labelLine: {
                            normal: {
                                show: false
                            }
                        },
                        data: dataArray
                    }]
                };
                if (options && typeof options === 'object') {
                    myChart.setOption(options);
                }
            }

            function NotesIndividualCountAndPercentageByAgencyId() {
                var ClientID = $("#ddlclient option:selected").val();
                getAjax(`/Notes/NotesIndividualCountAndPercentageByAgencyId?AgencyId=${ClientID}`, null, function (response) {
                   
                    let data = response.ResultData;
                    let result = [];
                    for (var i = 0; i < data.length; i++) {
                        let NoteCategoryName = data[i].NoteCategoryName;
                        let NoteCategoryCount = data[i].NoteCategoryCount;
                        var tempObj = { value: NoteCategoryCount, name: NoteCategoryName };
                        result.push(tempObj);
                    }
                    NotesChart(result);
                    if (response.Message == "Success") {

                        let TotalNotes = 0;

                        for (var i = 0; i < data.length; i++) {
                            TotalNotes = Number(data[i].TotalNotes);
                        }
                        $("#lblTotalNotesCount").text(TotalNotes);
                    }
                });
            }

            function getTeamMembersList() {
                var ClientID = $("#ddlclient option:selected").val();
                $.ajax({
                    url: '/Needs/getTeamMembersList?ClientID=' + ClientID,
                    type: "GET",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {

                        if (data != null) {
                            var count = 1;
                            $.each(data.TeamMembers, function (key, object) {
                                if (object.LinkedInProfile != null && object.LinkedInProfile != '') {
                                    $('#aLinkedInProfile' + count).attr("href", object.LinkedInProfile);
                                    $('#aLinkedInProfile' + count).prop('disabled', false);
                                    $('#aLinkedInProfile' + count).removeClass('disabled-action-icons');
                                }
                                else {
                                    $('#aLinkedInProfile' + count)[0].className = $('#aLinkedInProfile' + count)[0].className + ' disabled-action-icons';
                                    $('#aLinkedInProfile' + count).prop('disabled', true);
                                }
                                if (object.Username != null && object.Username != '') {
                                    $('#spStaffName' + count).html(String(object.Username));
                                }
                                else {
                                    $('#spStaffName' + count).html(String(''));
                                }
                                if (object.Jobtitle != null && object.Jobtitle != '') {
                                    $('#spJobTitle' + count).html(String(object.Jobtitle));
                                }
                                else {
                                    $('#spJobTitle' + count).html(String(''));
                                }
                                if (object.Profileimage != null && object.Profileimage != '') {
                                    $('#spProfileImage' + count).attr('src', object.Profileimage);
                                }
                                else {
                                    $('#spProfileImage' + count).attr('src', '../assets/img/team/default-logo.png');
                                }
                                count = count + 1;
                            });
                        }
                        else {
                            // Write here what should happend once selected client is null
                        }
                    },
                    error: function () {
                        // Write here what should happend when action result is errored.
                    }
                });
            }

            function getBankSummary() {

                $.ajax({
                    url: '/AgencyService/GetBankSummary',
                    type: "GET",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        if (data != null && data != '') {
                            $('#spOutSanding').html(data.Total);
                        }
                        else {
                            $('#spOutSanding').html(0);
                        }
                    },
                    error: function (e) {
                        $('#spOutSanding').html(0);
                        console.log(e);
                    }


                });
            }


            function AgencyDropdownPartialViewChange() {
                var ClientID = $("#ddlclient option:selected").val();
                //postAjax(`/AgencyService/XeroSwitchOrganization?ClientID=${ClientID}`, null, function (response) {
                //    if (response && response.URL != '') {
                //        window.location.href = response.URL;
                //    }
                //});

                $.ajax({
                    url: '/AgencyService/GetClientDetails?id=' + ClientID,
                    type: "GET",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        if (data != null) {

                            getTeamMembersList();
                            $('#roleexist').show();
                            $('.spClientName').html(String(data.Name));
                            $('.spEntityName').html(String(data.EntityName));
                            $('#spTeamName').html(String(data.TeamName));

                            $('#spStatus').html(String(data.Status ? "Active" : "Inactive"));
                            getBankSummary();
                            GetReconcilationData();
                            GetReconcilationPostiveData();
                            GetReconcilationNegativeData();
                            bindNotInBooksAndBanksCountDashboard();
                            /*GetTotalNotesCount();*/
                            SetUserPreferencesForAgency();
                            let month = moment(new Date()).diff(moment(data.StartDate), 'months', false) + 1;
                            $('#spMonths').html(month);
                            $('#spClientAddress').html(data.CityName + ',' + data.StateName);
                            if (data.StartDate != null && data.StartDate != '') {
                                let stDate = new Date(data.StartDate.match(/\d+/)[0] * 1).toDateString().replace(/^\S+\s/, '');//(data.StartDate);
                                $('#spCreatedDate').html(String(stDate)); // This is causing error $('#spCreatedDate').html(String(new Date(data.StartDate.match(/\d+/)[0] * 1).toDateString().replace(/^\S+\s/, '')));
                            }
                            $('.badge-soft-success').removeClass('d-none');
                            $('.badge-success').removeClass('d-none');
                            $('.rounded-circle').removeClass('d-none');



                        }
                        else {

                            $('#roleexist').hide();
                            $('.spClientName').html('');
                            $('.spEntityName').html('');
                            $('#spCreatedDate').html('');
                            $('#spMonths').html('');
                            $('#spTeamName').html('');
                            $('#spStatus').html('');
                            $('#spClientAddress').html('');
                            $('.badge-soft-success').addClass('d-none');
                            $('.badge-success').removeClass('d-none');
                            $('.rounded-circle').removeClass('d-none');
                        }
                    },
                    error: function () {
                        $('#roleexist').hide();
                        $('.spClientName').html('');
                        $('.spEntityName').html('');
                        $('#spCreatedDate').html('');
                        $('#spMonths').html('');
                        $('#spTeamName').html('');
                        $('#spStaffName1').html('');
                        $('#spStaffName2').html('');
                        $('#spStaffName3').html('');
                        $('#spJobTitle1').html('');
                        $('#spJobTitle2').html('');
                        $('#spJobTitle3').html('');
                        $('#spProfileImage1').removeAttr('src');
                        $('#spProfileImage2').removeAttr('src');
                        $('#spProfileImage3').removeAttr('src');
                        $('#spStatus').html('');
                        $('#spClientAddress').html('');
                        $('.badge-soft-success').addClass('d-none');
                        $('.badge-success').addClass('d-none');
                        $('.rounded-circle').addClass('d-none');
                    }


                });

            }

            //function GetTotalNotesCount() {
            //    var ClientID = $("#ddlclient option:selected").val();
            //    getAjax(`/Notes/TotalNotesCountByAgencyId?AgencyId=${ClientID}`, null, function (response) {

            //        if (response.Message == "Success") {

            //            let data = response.ResultData;
            //            let TotalNotes;

            //            for (var i = 0; i < data.length; i++) {
            //                TotalNotes = TotalNotes + data[i].TotalNotes;
            //            }
            //            $("#lblTotalNotes").text(TotalNotes);
            //        }
            //    });
            //}

            function GetReconcilationData() {


                var ClientID = $("#ddlclient option:selected").val();


                getAjax(`/Reconciliation/GetReconciliationDataCountAgencyId?AgencyId=${ClientID}`, null, function (response) {

                    if (response.Message == "Success") {



                        var data = response.ResultData;


                        let totalSum = 0;



                        for (var i = 0; i < data.length; i++) {

                            totalSum = totalSum + data[i].totalCount;
                            if (data[i].type.toLowerCase() == "Outstanding Payments".toLowerCase()) {


                                $("#lblNotInBanksCount2").text(data[i].totalCount);

                            }


                            else if (data[i].type.toLowerCase() == "Unreconciled".toLowerCase()) {
                                $("#lblNotInBooksCount2").text(data[i].totalCount);

                            }

                        }

                        if (data == 0) {

                            //$("#lblNotInBanksCount2").text(data.totalCount);
                            //$("#lblNotInBooksCount2").text(data.totalCount);
                            $("#lblNotInBooksCount2").text(0);
                            $("#lblNotInBanksCount2").text(0);
                        }
                        $("#lblNotInCount").text(totalSum);

                    }

                    error: (function (data) {

                        window.location.reload();

                        swal("Oops", "We couldn't connect to the server!", "error");
                    });

                });
            }

            function GetReconcilationPostiveData() {


                var ClientID = $("#ddlclient option:selected").val();
                getAjax(`/Reconciliation/GetReconciliationCountAgencyId?AgencyId=${ClientID}`, null, function (response) {

                    if (response.Message == "Success") {

                        let data = response.ResultData;
                        let totalSum = 0;

                        for (var i = 0; i < data.length; i++) {

                            totalSum = totalSum + data[i].amount;
                            if (data[i].type.toLowerCase() == "Outstanding Payments".toLowerCase()) {


                                $("#lblNegativeBanksCount").text(ConvertToUDS(data[i].amount).replace('-', ''));
                            }
                            else if (data[i].type.toLowerCase() == "Unreconciled".toLowerCase()) {
                                $("#lblNegativeInBooksCount").text(ConvertToUDS(data[i].amount).replace('-', ''));

                            }
                        }
                        if (data == 0) {

                            $("#lblNegativeBanksCount").text(ConvertToUDS(0).replace('-', ''));
                            $("#lblNegativeInBooksCount").text(ConvertToUDS(0).replace('-', ''));
                        }
                    }


                });

            }

            function GetReconcilationNegativeData() {


                var ClientID = $("#ddlclient option:selected").val();
                getAjax(`/Reconciliation/GetReconciliationNegCountAgencyId?AgencyId=${ClientID}`, null, function (response) {

                    if (response.Message == "Success") {

                        var data = response.ResultData;
                        var totalSum = 0;
                       
                        for (var i = 0; i < data.length; i++) {
                           
                            totalSum = totalSum + data[i].amount;
                            if (data[i].type.toLowerCase() == "Outstanding Payments".toLowerCase()) {

                                $("#lblpostiveBanksCount").text(ConvertToUDS(data[i].amount).replace('-', ''));


                            }
                            else if (data[i].type.toLowerCase() == "Unreconciled".toLowerCase()) {
                                $("#lblPostiveInBooksCount").text(ConvertToUDS(data[i].amount).replace('-', ''));
                            }
                        }
                        if (data == 0) {

                            $("#lblpostiveBanksCount").text(ConvertToUDS(0).replace('-', ''));
                            $("#lblPostiveInBooksCount").text(ConvertToUDS(0).replace('-', ''));
                        }

                    }
                    else {
                        totalSum = totalSum + data[i].amount;
                    }

                });
            }


            function bindNotInBooksAndBanksCountDashboard() {
                debugger;
                var ClientID = $("#ddlclient option:selected").val();
                getAjax(`/Reconciliation/GetReconciliationDashboardDataAgencyId?AgencyId=${ClientID}`, null, function (response) {

                    if (response.Message == "Success") {
                        
                        let data = response.ResultData;
                      
                        let totalSum = 0;
                      
                        for (var i = 0; i < data.length; i++) {
                          
                            percentage = data[i].percentage.toFixed(0);
                           
                            totalSum = totalSum + data[i].totalCount;
                            if (data[i].type.toLowerCase() == "Outstanding Payments".toLowerCase()) {
                                $("#lblNotInBanksCount").text(data[i].totalCount);
                            }
                            else {
                                $("#lblNotInBooksCount").text(data[i].totalCount);
                            }
                        }


                        $("#lblNotInCount").text(totalSum);                       
                        $("#lblPercentage").text(percentage);

                    }
                })
            }

            //function AgencyDropdownPartialViewChange() {
            //    var ClientID = $("#ddlclient option:selected").val();

            //    $.ajax({
            //        url: '/AgencyService/GetClientDetails?id=' + ClientID,
            //        type: "GET",
            //        contentType: "application/json; charset=utf-8",
            //        dataType: "json",
            //        success: function (data) {
            //            if (data != null) {
            //                // Write here what should happend once client selected
            //                SetUserPreferencesForAgency();
            //                //loadReconcilation();
            //                window.location.reload();
            //            }
            //            else {
            //                // Write here what should happend once selected client is null
            //            }
            //        },
            //        error: function () {
            //            // Write here what should happend when action result is errored.
            //        }
            //    });
            //}



            const camelize = (str) => {
                const text = str.replace(/[-_\s.]+(.)?/g, (_, c) =>
                    c ? c.toUpperCase() : ""
                );
                return `${text.substr(0, 1).toLowerCase()}${text.substr(1)}`;
            };

            const getData = (el, data) => {
                try {
                    return JSON.parse(el.dataset[camelize(data)]);
                } catch (e) {
                    return el.dataset[camelize(data)];
                }
            };
            const getGrays = (dom) => ({
                white: getColor("white", dom),
                100: getColor("100", dom),
                200: getColor("200", dom),
                300: getColor("300", dom),
                400: getColor("400", dom),
                500: getColor("500", dom),
                600: getColor("600", dom),
                700: getColor("700", dom),
                800: getColor("800", dom),
                900: getColor("900", dom),
                1000: getColor("1000", dom),
                1100: getColor("1100", dom),
                black: getColor("black", dom),
            });
            const getColors = (dom) => ({
                primary: getColor("primary", dom),
                secondary: getColor("secondary", dom),
                success: getColor("success", dom),
                info: getColor("info", dom),
                warning: getColor("warning", dom),
                danger: getColor("danger", dom),
                light: getColor("light", dom),
                dark: getColor("dark", dom),
            });
            const getColor = (name, dom = document.documentElement) =>
                getComputedStyle(dom).getPropertyValue(`--falcon-${name}`).trim();
            const rgbaColor = (color = "#fff", alpha = 0.5) =>
                `rgba(${hexToRgb(color)}, ${alpha})`;
            const hexToRgb = (hexValue) => {
                let hex;
                hexValue.indexOf("#") === 0
                    ? (hex = hexValue.substring(1))
                    : (hex = hexValue);
                // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
                const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
                const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(
                    hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)
                );
                return result
                    ? [
                        parseInt(result[1], 16),
                        parseInt(result[2], 16),
                        parseInt(result[3], 16),
                    ]
                    : null;
            };
            var totalSalesInit = function totalSalesInit() {
                var ECHART_LINE_TOTAL_SALES = '.echart-line-total-sales';
                var SELECT_MONTH = '.select-month';
                var $echartsLineTotalSales = document.querySelector(ECHART_LINE_TOTAL_SALES);
                var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

                function getFormatter(params) {
                    var _params$ = params[0],
                        name = _params$.name,
                        value = _params$.value;
                    var date = new Date(name);
                    return "".concat(months[0], " ").concat(date.getDate(), ", ").concat(value);
                }

                if ($echartsLineTotalSales) {
                    // Get options from data attribute
                    var userOptions = getData($echartsLineTotalSales, 'options');
                    var chart = window.echarts.init($echartsLineTotalSales);
                    var monthsnumber = [[60, 80, 60, 80, 65, 130, 120, 100, 30, 40, 30, 70], [100, 70, 80, 50, 120, 100, 130, 140, 90, 100, 40, 50], [80, 50, 60, 40, 60, 120, 100, 130, 60, 80, 50, 60], [70, 80, 100, 70, 90, 60, 80, 130, 40, 60, 50, 80], [90, 40, 80, 80, 100, 140, 100, 130, 90, 60, 70, 50], [80, 60, 80, 60, 40, 100, 120, 100, 30, 40, 30, 70], [20, 40, 20, 50, 70, 60, 110, 80, 90, 30, 50, 50], [60, 70, 30, 40, 80, 140, 80, 140, 120, 130, 100, 110], [90, 90, 40, 60, 40, 110, 90, 110, 60, 80, 60, 70], [50, 80, 50, 80, 50, 80, 120, 80, 50, 120, 110, 110], [60, 90, 60, 70, 40, 70, 100, 140, 30, 40, 30, 70], [20, 40, 20, 50, 30, 80, 120, 100, 30, 40, 30, 70]];

                    var getDefaultOptions = {
                        color: getGrays()['100'],
                        tooltip: {
                            trigger: 'axis',
                            padding: [7, 10],
                            backgroundColor: getGrays()['100'],
                            borderColor: getGrays()['300'],
                            textStyle: {
                                color: getColors().dark
                            },
                            borderWidth: 1,
                            formatter: function formatter(params) {
                                return getFormatter(params);
                            },
                            transitionDuration: 0,
                            position: function position(pos, params, dom, rect, size) {
                                return getPosition(pos, params, dom, rect, size);
                            }
                        },
                        xAxis: {
                            type: 'category',
                            data: ['2019-01-05', '2019-01-06', '2019-01-07', '2019-01-08', '2019-01-09', '2019-01-10', '2019-01-11', '2019-01-12', '2019-01-13', '2019-01-14', '2019-01-15', '2019-01-16'],
                            boundaryGap: false,
                            axisPointer: {
                                lineStyle: {
                                    color: getGrays()['300'],
                                    type: 'dashed'
                                }
                            },
                            splitLine: {
                                show: false
                            },
                            axisLine: {
                                lineStyle: {
                                    // color: utils.getGrays()['300'],
                                    color: rgbaColor('#000', 0.01),
                                    type: 'dashed'
                                }
                            },
                            axisTick: {
                                show: false
                            },
                            axisLabel: {
                                color: getGrays()['400'],
                                formatter: function formatter(value) {
                                    var date = new Date(value);
                                    return "".concat(months[date.getMonth()], " ").concat(date.getDate());
                                },
                                margin: 15
                            }
                        },
                        yAxis: {
                            type: 'value',
                            axisPointer: {
                                show: false
                            },
                            splitLine: {
                                lineStyle: {
                                    color: getGrays()['300'],
                                    type: 'dashed'
                                }
                            },
                            boundaryGap: false,
                            axisLabel: {
                                show: true,
                                color: getGrays()['400'],
                                margin: 15
                            },
                            axisTick: {
                                show: false
                            },
                            axisLine: {
                                show: false
                            }
                        },
                        series: [{
                            type: 'line',
                            data: monthsnumber[0],
                            lineStyle: {
                                color: getColors().primary
                            },
                            itemStyle: {
                                borderColor: getColors().primary,
                                borderWidth: 2
                            },
                            symbol: 'circle',
                            symbolSize: 10,
                            smooth: false,
                            hoverAnimation: true,
                            areaStyle: {
                                color: {
                                    type: 'linear',
                                    x: 0,
                                    y: 0,
                                    x2: 0,
                                    y2: 1,
                                    colorStops: [{
                                        offset: 0,
                                        color: rgbaColor(getColors().primary, 0.2)
                                    }, {
                                        offset: 1,
                                        color: rgbaColor(getColors().primary, 0)
                                    }]
                                }
                            }
                        }],
                        grid: {
                            right: '28px',
                            left: '40px',
                            bottom: '15%',
                            top: '5%'
                        }
                    };

                    if (getDefaultOptions) { // && typeof getDefaultOptions === 'object'
                        chart.setOption(getDefaultOptions);
                    }

                    $echartsLineTotalSales.echartSetOption(chart, userOptions, getDefaultOptions); // Change chart options according to the selected month

                    var monthSelect = document.querySelector(SELECT_MONTH);

                    if (monthSelect) {
                        monthSelect.addEventListener('change', function (e) {
                            var month = e.currentTarget.value;
                            var data = monthsnumber[month];
                            chart.setOption({
                                tooltip: {
                                    formatter: function formatter(params) {
                                        var _params$2 = params[0],
                                            name = _params$2.name,
                                            value = _params$2.value;
                                        var date = new Date(name);
                                        return "".concat(months[month], " ").concat(date.getDate(), ", ").concat(value);
                                    }
                                },
                                xAxis: {
                                    axisLabel: {
                                        formatter: function formatter(value) {
                                            var date = new Date(value);
                                            return "".concat(months[month], " ").concat(date.getDate());
                                        },
                                        margin: 15
                                    }
                                },
                                series: [{
                                    data: data
                                }]
                            });
                        });
                    }
                }
            };
            var totalSalesInitTwo = function totalSalesInitTwo() {
                var ECHART_LINE_TOTAL_SALES = '.echart-line-total-sales-2';
                var SELECT_MONTH = '.select-month';
                var $echartsLineTotalSales = document.querySelector(ECHART_LINE_TOTAL_SALES);
                var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

                function getFormatter(params) {
                    var _params$ = params[0],
                        name = _params$.name,
                        value = _params$.value;
                    var date = new Date(name);
                    return "".concat(months[0], " ").concat(date.getDate(), ", ").concat(value);
                }

                if ($echartsLineTotalSales) {
                    // Get options from data attribute
                    var userOptions = getData($echartsLineTotalSales, 'options');
                    var chart = window.echarts.init($echartsLineTotalSales);
                    var monthsnumber = [[60, 80, 60, 80, 65, 130, 120, 100, 30, 40, 30, 70], [100, 70, 80, 50, 120, 100, 130, 140, 90, 100, 40, 50], [80, 50, 60, 40, 60, 120, 100, 130, 60, 80, 50, 60], [70, 80, 100, 70, 90, 60, 80, 130, 40, 60, 50, 80], [90, 40, 80, 80, 100, 140, 100, 130, 90, 60, 70, 50], [80, 60, 80, 60, 40, 100, 120, 100, 30, 40, 30, 70], [20, 40, 20, 50, 70, 60, 110, 80, 90, 30, 50, 50], [60, 70, 30, 40, 80, 140, 80, 140, 120, 130, 100, 110], [90, 90, 40, 60, 40, 110, 90, 110, 60, 80, 60, 70], [50, 80, 50, 80, 50, 80, 120, 80, 50, 120, 110, 110], [60, 90, 60, 70, 40, 70, 100, 140, 30, 40, 30, 70], [20, 40, 20, 50, 30, 80, 120, 100, 30, 40, 30, 70]];

                    var getDefaultOptions = {
                        color: getGrays()['100'],
                        tooltip: {
                            trigger: 'axis',
                            padding: [7, 10],
                            backgroundColor: getGrays()['100'],
                            borderColor: getGrays()['300'],
                            textStyle: {
                                color: getColors().dark
                            },
                            borderWidth: 1,
                            formatter: function formatter(params) {
                                return getFormatter(params);
                            },
                            transitionDuration: 0,
                            position: function position(pos, params, dom, rect, size) {
                                return getPosition(pos, params, dom, rect, size);
                            }
                        },
                        xAxis: {
                            type: 'category',
                            data: ['2019-01-05', '2019-01-06', '2019-01-07', '2019-01-08', '2019-01-09', '2019-01-10', '2019-01-11', '2019-01-12', '2019-01-13', '2019-01-14', '2019-01-15', '2019-01-16'],
                            boundaryGap: false,
                            axisPointer: {
                                lineStyle: {
                                    color: getGrays()['300'],
                                    type: 'dashed'
                                }
                            },
                            splitLine: {
                                show: false
                            },
                            axisLine: {
                                lineStyle: {
                                    color: getGrays()['300'],
                                    //color: utils.rgbaColor('#000', 0.01),
                                    type: 'dashed'
                                }
                            },
                            axisTick: {
                                show: false
                            },
                            axisLabel: {
                                //color: utils.getGrays()['400'],
                                formatter: function formatter(value) {
                                    var date = new Date(value);
                                    return "".concat(months[date.getMonth()], " ").concat(date.getDate());
                                },
                                margin: 15
                            }
                        },
                        yAxis: {
                            type: 'value',
                            axisPointer: {
                                show: false
                            },
                            splitLine: {
                                lineStyle: {
                                    color: getGrays()['300'],
                                    type: 'dashed'
                                }
                            },
                            boundaryGap: false,
                            axisLabel: {
                                show: true,
                                color: getGrays()['400'],
                                margin: 15
                            },
                            axisTick: {
                                show: false
                            },
                            axisLine: {
                                show: false
                            }
                        },
                        series: [{
                            type: 'line',
                            data: monthsnumber[0],
                            lineStyle: {
                                color: getColors().primary
                            },
                            itemStyle: {
                                borderColor: getColors().primary,
                                borderWidth: 2
                            },
                            symbol: 'circle',
                            symbolSize: 10,
                            smooth: false,
                            hoverAnimation: true,
                            areaStyle: {
                                color: {
                                    type: 'linear',
                                    x: 0,
                                    y: 0,
                                    x2: 0,
                                    y2: 1,
                                    colorStops: [{
                                        offset: 0,
                                        color: rgbaColor(getColors().primary, 0.2)
                                    }, {
                                        offset: 1,
                                        color: rgbaColor(getColors().primary, 0)
                                    }]
                                }
                            }
                        }],
                        grid: {
                            right: '28px',
                            left: '40px',
                            bottom: '15%',
                            top: '5%'
                        }
                    };


                    //chart.echartSetOption(chart, userOptions, getDefaultOptions); // Change chart options according to the selected month
                    if (getDefaultOptions && typeof getDefaultOptions === 'object') {
                        chart.setOption(getDefaultOptions);
                    }

                    var monthSelect = document.querySelector(SELECT_MONTH);

                    if (monthSelect) {
                        monthSelect.addEventListener('change', function (e) {
                            var month = e.currentTarget.value;
                            var data = monthsnumber[month];
                            chart.setOption({
                                tooltip: {
                                    formatter: function formatter(params) {
                                        var _params$2 = params[0],
                                            name = _params$2.name,
                                            value = _params$2.value;
                                        var date = new Date(name);
                                        return "".concat(months[month], " ").concat(date.getDate(), ", ").concat(value);
                                    }
                                },
                                xAxis: {
                                    axisLabel: {
                                        formatter: function formatter(value) {
                                            var date = new Date(value);
                                            return "".concat(months[month], " ").concat(date.getDate());
                                        },
                                        margin: 15
                                    }
                                },
                                series: [{
                                    data: data
                                }]
                            });
                        });
                    }
                }
            };




        </script>
    }