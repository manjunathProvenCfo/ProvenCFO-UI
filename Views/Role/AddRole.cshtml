@model  ProvenCfoUI.Models.RolesViewModel

@{
    ViewBag.Title = "";
}
<style>
    .row.align-items-center.form-group {
        margin-right: 1px !important;
        
    }
</style>

@using (Html.BeginForm("CreateRole", "Role", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="card mb-3">
        <div class="card-body overflow-hidden">
            @if (@ViewBag.ErrorMessage != null)
            {
                @Html.Hidden("RoleCreateOrUpdate", (object)@ViewBag.ErrorMessage, new { @id = "RoleCreateOrUpdate" });
            }
            @if (@ViewBag.Message != null)
            {
                <div class="alert alert-success">
                    <p>@ViewBag.Message</p>
                </div>

            }

            @if (Model.Id == null)
            {
                <h3 class="font-weight-normal fs-2 fs-md-3 mb-0 border-bottom pb-2">Create New User Role</h3>
            }
            else
            {
                <h3 class="font-weight-normal fs-2 fs-md-3 mb-0 border-bottom pb-2">Edit User Role</h3>
            }


            <div class="row mt-4">
                <div class="col-12">
                    <form method="post" action="CreateRole">

                        <div class="row form-group custom-form-width">
                            <div class="col-12 col-lg-8 col-xl-5">
                                @*<input class="form-control" type="email" placeholder="Email address" id="txtEmail" />*@

                                @Html.HiddenFor(x => x.Id, "id")
                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-create-name">Role Name</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", onfocusout = "CheckExistValidation()" } })
                                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                        @*<span class="text-danger field-validation-error " data-valmsg-for="name" data-valmsg-replace="true"><span id="roleexist" class=""></span></span>*@
                                    </div>
                                    @*<input class="form-control" type="email" placeholder="Email address" id="txtEmail" />*@
                                </div>
                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-create-name">Role Display Name</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.EditorFor(model => model.DisplayRoleName, new { htmlAttributes = new { @class = "form-control", onfocusout = "CheckExistValidation()" } })
                                        @Html.ValidationMessageFor(model => model.DisplayRoleName, "", new { @class = "text-danger" })
                                        @*<span class="text-danger field-validation-error " data-valmsg-for="name" data-valmsg-replace="true"><span id="Displayroleexist" class=""></span></span>*@
                                    </div>
                                    @*<input class="form-control" type="email" placeholder="Email address" id="txtEmail" />*@
                                </div>
                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email">Status</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @Html.DropDownListFor(m => m.Status, new List<SelectListItem>() { new SelectListItem { Text = "Active", Value = "Active" }, new SelectListItem { Text = "Inactive", Value = "Inactive" } }, new { @class = "form-control text-box single-line" })
                                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                    </div>
                                    @*<input class="form-control" type="email" placeholder="Email address" id="txtEmail" />*@
                                </div>
                            @*</div>
                            <div class="col-12 col-lg-8 col-xl-6">*@
                                <div class="row align-items-center form-group">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                        <label for="split-login-email">User Type</label>
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">
                                        @foreach (var usertype in (List<Proven.Model.UserTypesVM>)TempData["UserTypeList"])
                                        {
                                            if (Model.Id == null)
                                            {
                                                <span>
                                                    @if (Model.UserType == usertype.UserTypeID)
                                                    {
                                                        @Html.RadioButtonFor(m => m.UserType, usertype.UserTypeID, new { @checked = "checked" })
                                                    }
                                                    else
                                                    {
                                                        @Html.RadioButtonFor(m => m.UserType, usertype.UserTypeID)
                                                    }
                                                    @usertype.UserTypeName
                                                </span>
                                            }
                                            else
                                            {
                                                <span>
                                                    @if (Model.UserType == usertype.UserTypeID)
                                                    {
                                                        @Html.RadioButtonFor(m => m.UserType, usertype.UserTypeID, new { @checked = "checked", disabled = "disabled" })
                                                    }
                                                    else
                                                    {
                                                        @Html.RadioButtonFor(m => m.UserType, usertype.UserTypeID, new { disabled = "disabled" })
                                                    }
                                                    @usertype.UserTypeName
                                                </span>
                                            }

                                            <br />

                                        }
                                    </div>
                                    @*<input class="form-control" type="email" placeholder="Email address" id="txtEmail" />*@
                                </div>


                                @*<div class="custom-control custom-checkbox">
                <input class="custom-control-input" type="checkbox" id="basic-register-checkbox" />
                <label class="custom-control-label" for="basic-register-checkbox">I accept the <a href="#!">terms </a>and <a href="#!">privacy policy</a></label>
            </div>*@


                                @*@for (int i = 0; i < Model.MasterFeaturesList.Count; i++)
            {
                <div class="col-12 facility_service_permissions">
                    <div class="permission-box">
                        <h6>
                            @Html.CheckBoxFor(model => model.MasterFeaturesList[i].IsChecked.Value, Model.MasterFeaturesList[i].IsChecked.Value)
                            @Html.DisplayFor(model => model.MasterFeaturesList[i].DisplayName)
                        </h6>
                    </div>
                </div>
            }*@

                                @for (int i = 0; i < Model.MasterFeaturesList.Count; i++)
                                {
                                    if (Model.MasterFeaturesList[i].ParentId == 0)
                                    {


                                        <div class="col-12 facility_service_permissions" id="section_@Model.MasterFeaturesList[i].FeaturName">
                                            <div class="permission-box">

                                                <h6>
                                                    @Html.CheckBoxFor(x => x.MasterFeaturesList[i].IsChecked, new { @class = "top_role_" + @Model.MasterFeaturesList[i].DisplayName.Replace(" ", "-"), @onclick = "check_uncheck_topper(this.checked,'" + @Model.MasterFeaturesList[i].DisplayName.Replace(" ", "-") + "')" })
                                                    <label>@Model.MasterFeaturesList[i].DisplayName</label>
                                                    @Html.HiddenFor(x => x.MasterFeaturesList[i].Id)
                                                    @Html.HiddenFor(x => x.MasterFeaturesList[i].DisplayName)
                                                </h6>

                                                @for (int j = 0; j < Model.MasterFeaturesList.Count; j++)
                                                {
                                                    if (Model.MasterFeaturesList[j].ParentId == Model.MasterFeaturesList[i].Id)
                                                    {
                                                        <ul>
                                                            <li>

                                                                @Html.CheckBoxFor(x => x.MasterFeaturesList[j].IsChecked, new { @class = "name ml-4 top_roles top_tucker_" + Model.MasterFeaturesList[i].DisplayName.Replace(" ", "-"), @onclick = "check_uncheck_checkbox(this.checked,'" + @Model.MasterFeaturesList[j].DisplayName.Replace(" ", "-") + "','" + @Model.MasterFeaturesList[i].DisplayName.Replace(" ", "-") + "')" })
                                                                <label>@Model.MasterFeaturesList[j].DisplayName</label>
                                                                @Html.HiddenFor(x => x.MasterFeaturesList[j].Id)
                                                                @Html.HiddenFor(x => x.MasterFeaturesList[j].DisplayName)
                                                            </li>
                                                        </ul>
                                                    }
                                                }





                                            </div>
                                        </div>
                                    }
                                }


                                <br />



                                <div class="row align-items-center form-group mb-0">
                                    <div class="col-12 col-md-4 col-lg-3 col-xl-4">
                                    </div>
                                    <div class="col-12 col-md-8 col-lg-9 col-xl-8">

                                        @if (Model.Id == null)
                                        {
                                            <button class="btn btn-primary" type="submit" id="btnCreate" name="submit" href="@Url.Action("CreateRole", "Role")">Create</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-primary" type="submit" id="btnCreate" name="submit" href="@Url.Action("UpdateRole", "Role")">Update</button>
                                        }

                                        <input type="button" value="Cancel" class="btn btn-primary ml-2" onclick="location.href='@Url.Action("Role", "Role")'" />
                                    </div>
                                    @*<button class="btn btn-primary btn-block mt-2 col-5" type="button" id="btnCreate" name="submit" href="@Url.Action("Role", "Role")">Cancel</button>*@
                                    @*<input class="btn btn-primary btn-block mt-2 col-5 float-right" type="button" name="Cancel" id="btnClear" href=@Url.Action("Role", "Role") value="Cancel" />*@
                                    @*<button class="btn btn-primary btn-block mt-2 col-5 float-right"  id="btnClear" href="#">Cancel</button>*@
                                </div>

                            </div>

                        </div>
                    </form>
                </div>

            </div>
        </div>
    </div>
}






<div>

</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>

        document.getElementById("roleexist").style.display = "none";
        document.getElementById("Displayroleexist").style.display = "none";
        function CheckExistValidation() {
            if ($("#name").val() === "" && $("#roleexist").html() !== "") {
                $('#roleexist').hide();
                $("#roleexist").html('');
            }
        }

        function check_uncheck_topper(top_id_checked, top_id) {
            $('.top_tucker_' + top_id).prop("checked", top_id_checked);
        }

        function check_uncheck_checkbox(isChecked, parent_id, top_id) {
            $('.top_role_' + top_id).prop("checked", true);
            if (isChecked) {
                //$(".input_super_cat_" + parent_id).each(function () {
                //    this.checked = true;
                //});
            } else {
                //$(".input_super_cat_" + parent_id).each(function () {
                //    this.checked = false;
                //});
            }
        }
        $(document).ready(function () {
            var userTypes = $('input[type=radio][name=UserType]');
            if (userTypes[1].checked == true) {
                HideAdminSetup();
            }
            //
            var msg = $('#RoleCreateOrUpdate') != undefined ? $('#RoleCreateOrUpdate').val() : '';

            if (msg != undefined && msg != '' && msg == "Created") {
                AddAlertRole();
                $('#RoleCreateOrUpdate').val('');
            }
            else if (msg != undefined && msg != '' && msg == "Updated") {
                UpdateAlertRole();
                $('#RoleCreateOrUpdate').val('');
            }
            else if (msg != undefined && msg != '' && msg == "Exist") {

                $('#roleexist').show();
                $('#roleexist').html('This User Role has been already taken.')
                //ExistAlertRole();
                $('#RoleCreateOrUpdate').val('');
            }

            $("#btnClear").click(function () {
                $('select').val("Active");
                $(this).closest('form').find("input[type=text], textarea").val("");
            });


            $('input[type=radio][name=UserType]').change(function () {
                if (this.checked && this.value == '1') {
                    $("#section_Administration").show();
                    $("#section_Setup").show();
                }
                else {

                    HideAdminSetup();
                }

            });
        });
        var HideAdminSetup = function () {
            $("#section_Administration").find("input[type='checkbox']")
                .prop('checked', false);
            $("#section_Setup").find("input[type='checkbox']")
                .prop('checked', false);
            $("#section_Administration").hide();
            $("#section_Setup").hide();
        }
        var ExportFileReq = function (Controller, jAction, rData) {
            if (rData == undefined) rData = "{}";
            $.ajax({
                type: "POST",
                url: '/' + Controller + '/' + jAction,
                contentType: "application/json; charset=utf-8",
                data: rData,
                dataType: "json",
            }).done(function (FileName) {
                //get the file name for download
                if (FileName != "") {
                    //use window.location.href for redirect to download action for download the file
                    var dPath = '/Base/Download?fileName=' + FileName;
                    window.location.href = dPath;

                }
            });
        };

        function AddAlertRole() {
            sweetAlert
                ({
                    title: "Created!",
                    text: "New User Role created successfully!",
                    type: "success"
                },
                    function () {
                        window.location.href = '/Role/Role'
                    });
        }

        function UpdateAlertRole() {
            sweetAlert
                ({
                    title: "Updated!",
                    text: "User Role updated successfully!",
                    type: "success"
                },
                    function () {
                        window.location.href = '/Role/Role'
                    });
        }
        function ExistAlertRole() {
            sweetAlert
                ({
                    title: "Exist!",
                    text: "This User Role is exist!",
                    type: "warning"
                },
                    function () {
                        //window.location.href = '/Role/Role'
                    });
        }



    </script>

}
